{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/892d33e07a34f7d7cf93.jpg","path":"images/892d33e07a34f7d7cf93.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/clock.png","path":"images/clock.png","modified":0,"renderable":0},{"_id":"source/images/swiper.png","path":"images/swiper.png","modified":0,"renderable":0},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"source/images/bg2.jpg","path":"images/bg2.jpg","modified":0,"renderable":0},{"_id":"themes/apollo/source/favicon.jpg","path":"favicon.jpg","modified":0,"renderable":1},{"_id":"source/images/ea3c933f25c58df0caad9c00a53bcfc5.png","path":"images/ea3c933f25c58df0caad9c00a53bcfc5.png","modified":0,"renderable":0},{"_id":"source/images/vi.png","path":"images/vi.png","modified":0,"renderable":0},{"_id":"source/images/bg.jpg","path":"images/bg.jpg","modified":0,"renderable":0},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1},{"_id":"source/images/16146adf33a8603c.jpg","path":"images/16146adf33a8603c.jpg","modified":0,"renderable":0},{"_id":"source/images/demo-ac.png","path":"images/demo-ac.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"b912b8ec44ce3c3844741275fb5c765e0c6e5775","modified":1489686575755},{"_id":"source/person.html","hash":"3e5a0f059c2dea1a231681c284e9084780677696","modified":1489733352301},{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1517399137336},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1517399137337},{"_id":"themes/apollo/README.md","hash":"201c76d030a98578ed5a6ad5c766a7bde91c32d3","modified":1517399137387},{"_id":"themes/apollo/_config.yml","hash":"b76b8c3c970dfb30d5ed67937e26d0d63fc6acf9","modified":1517401814366},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1517399137478},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1517399137782},{"_id":"source/_posts/AJAX应用之HTTP.md","hash":"9db48a74b11b78eecd62025bb4759529b374f3fd","modified":1517402032695},{"_id":"source/_posts/AJAX学习之基本功.md","hash":"98aaa92817eb42a49ed1e9cacd9e57353bd156d4","modified":1517402020454},{"_id":"source/_posts/AngularJS系列之模块化介绍.md","hash":"43657ddb3670a47fe072d4999ed6e6ab2746e6a0","modified":1517402349799},{"_id":"source/_posts/AngularJS介绍.md","hash":"279cad7a59ecbc09e8aca430d1c3103e4a76b3da","modified":1517402349799},{"_id":"source/_posts/MongoDB简单学习.md","hash":"91f3888515b2f0111ea59d0905790e96bdf3c36f","modified":1517402349846},{"_id":"source/_posts/ECMAScript发展史.md","hash":"7648df4136919ba0137c6b884f151b0480525970","modified":1517402553003},{"_id":"source/_posts/PHP简单入门.md","hash":"2160aac532e7d5e19a6943f163dd9f3fcba09f1d","modified":1517402553017},{"_id":"source/_posts/ajax是什么.md","hash":"f9c461b1ccd1fe8351d25567c011931b8e983e4e","modified":1517402349799},{"_id":"source/_posts/canvas入门1.md","hash":"cc592ef983e0ae14d4244b685181459ec4ac9aba","modified":1517402349805},{"_id":"source/_posts/canvas入门2.md","hash":"beaa49a29c58dafece334750bebb8e51605923cf","modified":1517402088517},{"_id":"source/_posts/centos-01.md","hash":"e92fede4fb8b3ddf3db3d26198418987178d486a","modified":1517402096746},{"_id":"source/_posts/css变形.md","hash":"5fd0aedb807cad451c3bd287a82bd41243c9eab5","modified":1517402105792},{"_id":"source/_posts/git应用之git和github.md","hash":"575239f168d1a4ea5b654b7143dc710b8cfd72c2","modified":1517402349808},{"_id":"source/_posts/git应用之git工作原理.md","hash":"d64b2768e524fe6ca9e4b9375bbc1cece9ae06c5","modified":1517402349811},{"_id":"source/_posts/git应用之git常用操作.md","hash":"b9b0dd56f76553ab6a8fec0c7c19f9c4ad12acd1","modified":1517402349811},{"_id":"source/_posts/git应用之vi编辑器.md","hash":"a3df07b0dd614d02060653d0ac95576f12269cee","modified":1517402349816},{"_id":"source/_posts/git应用之版本控制.md","hash":"d2b520044c9befbc4d1969849fa381ffd42a97d8","modified":1517402349814},{"_id":"source/_posts/git应用之认识SSH.md","hash":"32b82546e0f26bc2a47d3be4575376081172c6e0","modified":1517402349819},{"_id":"source/_posts/git快速入门之bash.md","hash":"ed7090d7590cde3d43e279a44477624150d16f73","modified":1517402349823},{"_id":"source/_posts/hexo搭建博客常见问题.md","hash":"74ea707eca5cf4b9e6d5290837f2ac703a902600","modified":1517402349826},{"_id":"source/_posts/hexo配置个人博客站点.md","hash":"e1e2f5332df87d222029ce463d9ff94d1973488f","modified":1517402349826},{"_id":"source/_posts/markdown2html.md","hash":"7b90e384825e46c0c77f450e47f5cdff2e1e7d62","modified":1517402349837},{"_id":"source/_posts/js原型.md","hash":"e7700f5bfc77c1682efdc53dc7f953d5677f5742","modified":1517402349828},{"_id":"source/_posts/nodeJS构建express框架开发简单应用.md","hash":"1631dbdae45ad14d02fe0628d9de82f932bfb670","modified":1517402232974},{"_id":"source/_posts/markdown基本语法.md","hash":"7f1b1cb3a05156fb600a2f2832fcd4c36edd6279","modified":1517402349843},{"_id":"source/_posts/ubuntu常用软件部署.md","hash":"ed4f5e989f5f6d84171d944c84f1ebe1d7e982e6","modified":1517402349828},{"_id":"source/_posts/ubuntu常见问题.md","hash":"643dc376cf95c5d9901cbe6f124fb775a25017c3","modified":1517402553003},{"_id":"source/_posts/关于js中的静态方法和实例方法.md","hash":"400f8c3a335c816d28803ed4bb15759d0673dfdd","modified":1517402349849},{"_id":"source/_posts/初识Koa.md","hash":"279b05a9af40acab59d2c8478867a6e10c531160","modified":1517401738927},{"_id":"source/_posts/前后端渲染的对比.md","hash":"5adb2c0e296b04d427e7591d433f8dcb053d6ecb","modified":1517402349846},{"_id":"source/_posts/原生框架封装之插件开发.md","hash":"5dbd7011c22baa9609ce9f9f89ca731789b84698","modified":1517402553010},{"_id":"source/_posts/原生框架封装练习01.md","hash":"521187df41a905ce384ff03e2f443167910bd71a","modified":1517402349852},{"_id":"source/_posts/原生框架封装练习2.md","hash":"5d3d59d063eea8b96de0c0d14329f400935ef743","modified":1517402553004},{"_id":"source/_posts/手动一步一步搭建ss.md","hash":"8089586eb273e135afe6238af0a9af09e03c0c77","modified":1517402553003},{"_id":"source/_posts/数组方法梳理.md","hash":"38c97a531bc5801776452ef9de1605fd6a84870e","modified":1517402553014},{"_id":"source/_posts/框架封装之Ajax.md","hash":"851a2b24cb1ff896fe6ce6a54ac3263bff463ae2","modified":1517402553022},{"_id":"source/categories/index.md","hash":"1f6f9db5cf4cba5be4d91278021eb9873b80d376","modified":1489683416000},{"_id":"source/_posts/框架封装练习3.md","hash":"3f441f85cfa85a471a04f5d59d0d8ecde712d16e","modified":1517402547854},{"_id":"source/images/892d33e07a34f7d7cf93.jpg","hash":"684248c1bab6aac9ae3db74dceb95c45e32a9437","modified":1489679758921},{"_id":"source/images/avatar.jpg","hash":"b0954f70d022afa1d0f25a75340bce0a927aa44b","modified":1487954239267},{"_id":"source/images/clock.png","hash":"914bde8faa24a6c40c0330246742b3aaade877d8","modified":1489198480619},{"_id":"source/images/swiper.png","hash":"d25d781b5af087a62bd56dbd197c69afca29aa62","modified":1491049139796},{"_id":"source/tags/index-1.md","hash":"068562a6c9fb4232f59621fa6d0a392f26692cd3","modified":1489683308215},{"_id":"source/tags/index.md","hash":"7c33368714c02998c88ee12fd0c129599c478fa5","modified":1489683345000},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1517399137132},{"_id":"source/me/index.md","hash":"fccf6805ff892a2cef27a6e9125678c8a074428d","modified":1489737781282},{"_id":"source/友链/index.md","hash":"7e531c1115fae59e080c16d92ffa9548ab159547","modified":1491741974000},{"_id":"themes/apollo/.git/config","hash":"d25f78a3f0c3916281b4f0e023d2908573fcfe52","modified":1517399137158},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1517399125176},{"_id":"themes/apollo/.git/index","hash":"5943ece994b27ca32680a8623a7e3e2652c6da1c","modified":1517399137849},{"_id":"themes/apollo/.git/packed-refs","hash":"53b52c4c3ec6eec8c00208d4008b072952b247e4","modified":1517399137107},{"_id":"themes/apollo/doc/doc-en.md","hash":"409e931a444c02a57b64a0a44dde6e66c1881ca0","modified":1517399137465},{"_id":"themes/apollo/doc/doc-zh.md","hash":"2a6a81840cdaf497969268a12d8f62c98cc38103","modified":1517399137477},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1517399137515},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1517399137563},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1517399137586},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1517399137587},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1517399137781},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1517399137800},{"_id":"source/images/bg2.jpg","hash":"0bbaab4e56fea44e9a0ad920ddb62eab75a0bf2a","modified":1489338445096},{"_id":"themes/apollo/source/favicon.jpg","hash":"0f66adae70f99ac7eaee6f4bec5c1a18bd52db13","modified":1509172963248},{"_id":"source/images/ea3c933f25c58df0caad9c00a53bcfc5.png","hash":"c814a9d2b729edf7a2b69a5cdd3c6b0063db6be1","modified":1491052670121},{"_id":"source/images/vi.png","hash":"1b503a3f8bdf7c6aa7b1ed570935c9004b9b8241","modified":1489382071804},{"_id":"source/images/bg.jpg","hash":"36b49a2f0183ac20207c44a8172e410e4d6865e6","modified":1489338221771},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1517399125184},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1517399125192},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1517399125207},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1517399125248},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1517399125257},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1517399125266},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1517399125316},{"_id":"themes/apollo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1517399125374},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1517399125395},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1517399125432},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1517399125466},{"_id":"themes/apollo/.git/logs/HEAD","hash":"4a76ac41d25ed7baf8b99e77a526846c0467f9e3","modified":1517399137137},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1517399137588},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"cd9447e9b0ad22213e6a17d9a9b948f9f998f921","modified":1517399137669},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1517399137684},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1517399137687},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1517399137730},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"529c2ec06cfbc3d5b6d66dd320db50dfab5577a6","modified":1517399137778},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1517399137779},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"6bff591ae3d1ff6750f239c4c933ad61f009f36a","modified":1517399137780},{"_id":"themes/apollo/source/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1517399137799},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1517399137801},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1517399137802},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1517399137844},{"_id":"source/images/16146adf33a8603c.jpg","hash":"20b0a8b2d19184862defe2e4c4a101824b9c5469","modified":1517390719253},{"_id":"themes/apollo/.git/objects/pack/pack-f395cbc22a4d241140dde389c51fe9caf0922763.idx","hash":"8b2bcbfae83aa49ae0261c38269068ec73ba314a","modified":1517399136375},{"_id":"themes/apollo/.git/refs/heads/master","hash":"e1ff663b08979644efba5f9911db684e916041b3","modified":1517399137136},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1517399137820},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1517399137821},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1517399137822},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1517399137830},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1517399137831},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1517399137832},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"fc5dda52cfbb10e27e2471e03f4606fb3d588225","modified":1517399137840},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1517399137841},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1517399137842},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"4a76ac41d25ed7baf8b99e77a526846c0467f9e3","modified":1517399137138},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1517399137130},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"4a76ac41d25ed7baf8b99e77a526846c0467f9e3","modified":1517399137129},{"_id":"themes/apollo/.git/objects/pack/pack-f395cbc22a4d241140dde389c51fe9caf0922763.pack","hash":"47a968d064ab1598c06c34684670e5347d34f2f6","modified":1517399136405},{"_id":"source/images/demo-ac.png","hash":"1eac7a0dd841ef6d118d229b4dba1f399c6aa1f7","modified":1489592092355},{"_id":"public/atom.xml","hash":"43da57cb93cdeff0e21450bf0f23ff80aeaed32c","modified":1517402562809},{"_id":"public/content.json","hash":"35032f1493c3f3cf8e360d7ac13f5988fddc1d03","modified":1517402562853},{"_id":"public/sitemap.xml","hash":"faf8b01e898200f741a7f41f460bc7901d85dbfa","modified":1517402562854},{"_id":"public/404.html","hash":"5f90ab01ee366e3bd0db099a818abd97db87252d","modified":1517402562881},{"_id":"public/person.html","hash":"d685ca4b92ad796c2803da1525d98121f4e7bc0f","modified":1517402562881},{"_id":"public/categories/index.html","hash":"9eaeae5290e1bffca93f62304119a66086c587d4","modified":1517402562881},{"_id":"public/tags/index.html","hash":"9eaeae5290e1bffca93f62304119a66086c587d4","modified":1517402562881},{"_id":"public/me/index.html","hash":"01878de48497a2c9f34f8df64cb3b9671c3c0e57","modified":1517402562881},{"_id":"public/tags/index-1.html","hash":"e2d8a637516c249ddc3030650864b53bd18872f2","modified":1517402562881},{"_id":"public/友链/index.html","hash":"f1379544fc34e8294bccf9bcc2af995f808b459e","modified":1517402562881},{"_id":"public/2018/01/31/初识Koa/index.html","hash":"c6fd136e4b1bc95789fccbf292d3e9dbb28337b5","modified":1517402562881},{"_id":"public/2018/01/31/手动一步一步搭建ss/index.html","hash":"2e992e976a0d346738f5fb46fd8e1e52d5d7b2eb","modified":1517402562882},{"_id":"public/2017/07/11/css变形/index.html","hash":"dfba7b625510cb760374fc092120b28caf07f40a","modified":1517402562882},{"_id":"public/2017/05/14/前后端渲染的对比/index.html","hash":"fd50004ee6798369d43abd936d158920a8fef013","modified":1517402562882},{"_id":"public/2017/04/02/ubuntu常见问题/index.html","hash":"859bbf021b8be2794c1c7b7f321284eaaf96395e","modified":1517402562882},{"_id":"public/2017/04/02/ubuntu常用软件部署/index.html","hash":"4b2e1bb968f8f19fc3eb58e487ddab77e721d3e6","modified":1517402562882},{"_id":"public/2017/03/03/centos-01/index.html","hash":"b2d6751454626718fae21df2c6345358bd2ea77f","modified":1517402562882},{"_id":"public/2017/01/10/nodeJS构建express框架开发简单应用/index.html","hash":"7d1fffbf54528a1f120c8826a9672458a70f0655","modified":1517402562882},{"_id":"public/2017/01/09/MongoDB简单学习/index.html","hash":"4ae91c31bba5492df5e3a6d48c6a2110316df453","modified":1517402562882},{"_id":"public/2016/11/26/数组方法梳理/index.html","hash":"b69131df218b7119bd8c1b25c182a2c90fe07408","modified":1517402562882},{"_id":"public/2016/11/20/原生框架封装之插件开发/index.html","hash":"14e2f66c12458e463e6196090d1ea2bdc430f3b5","modified":1517402562882},{"_id":"public/2016/11/18/框架封装练习3/index.html","hash":"5a8a41492c9340994c3fbceca00a5a7e5cbcf943","modified":1517402562882},{"_id":"public/2016/11/17/框架封装之Ajax/index.html","hash":"b6bd00457e1860a187ba91a0642c52561e57a574","modified":1517402562882},{"_id":"public/2016/11/17/原生框架封装练习2/index.html","hash":"7c025121312e9e0704effa07672acb5a2a53c172","modified":1517402562884},{"_id":"public/2016/11/15/原生框架封装练习01/index.html","hash":"2fa0aeab57594aae8c38f89dddc9794170e53103","modified":1517402562884},{"_id":"public/2016/10/10/js原型/index.html","hash":"b65a9166ccaff66cdba4b79fd2869cf4faf19953","modified":1517402562884},{"_id":"public/2016/09/11/canvas入门2/index.html","hash":"b11982106781d4217324f6e0add8023222e63cb7","modified":1517402562885},{"_id":"public/2016/09/10/canvas入门1/index.html","hash":"a737aa3344beff25f061faf6338c4ca6a693d28a","modified":1517402562885},{"_id":"public/2016/08/15/关于js中的静态方法和实例方法/index.html","hash":"7cfd023d51c4e21e26a3015a65cf7b61144e8081","modified":1517402562885},{"_id":"public/2016/07/20/AngularJS系列之模块化介绍/index.html","hash":"8fa4d6d45b46eaff01c90dfc22f7a4b05dee9ee4","modified":1517402562885},{"_id":"public/2016/07/11/AngularJS介绍/index.html","hash":"a7ac7fdde9fdfd942be492ee3b34090085f9352b","modified":1517402562885},{"_id":"public/2016/06/13/git应用之git工作原理/index.html","hash":"1054dcb6a56fc22d45a239cc0fa1817b6a35c1c7","modified":1517402562885},{"_id":"public/2016/05/20/git应用之版本控制/index.html","hash":"daf8576df665d730954153fa1ba0d421be75f436","modified":1517402562885},{"_id":"public/2016/05/15/git应用之git和github/index.html","hash":"812485b94ef90ca924d258bbe8b8d126fc99d995","modified":1517402562885},{"_id":"public/2016/05/14/git应用之vi编辑器/index.html","hash":"235863ef1628b37e9feb71d90cf095b2c5d5427c","modified":1517402562885},{"_id":"public/2016/05/13/AJAX学习之基本功/index.html","hash":"2b63065f2cb9ea451727b4d4d2830b83b88becd7","modified":1517402562885},{"_id":"public/2016/05/13/git应用之git常用操作/index.html","hash":"a262a06af485d7c7d7482d6de029803ae593a55e","modified":1517402562885},{"_id":"public/2016/05/13/git快速入门之bash/index.html","hash":"533b3aa2eee47892d822165a2248e13db8da187d","modified":1517402562885},{"_id":"public/2016/05/10/git应用之认识SSH/index.html","hash":"9d2ee012c4cd0c82db37356cfcd9d18f1e7af1fb","modified":1517402562885},{"_id":"public/2016/04/24/ajax是什么/index.html","hash":"2b471aa685df4aadc81f7e584253421808635067","modified":1517402562885},{"_id":"public/2016/04/24/hexo搭建博客常见问题/index.html","hash":"038792780374fcae95b4ea7eed1bace1c76785d2","modified":1517402562885},{"_id":"public/2016/03/18/ECMAScript发展史/index.html","hash":"9247c387708f9de34f5e204e97f7cc6f7ea75f4f","modified":1517402562885},{"_id":"public/2016/03/14/AJAX应用之HTTP/index.html","hash":"9c55e39cbe8d898d0fa439c45e97bb0bf9a22c22","modified":1517402562886},{"_id":"public/2016/03/10/hexo配置个人博客站点/index.html","hash":"990348ac40518efc8ce1f60296b9148ed9d53c82","modified":1517402562886},{"_id":"public/2016/01/14/markdown基本语法/index.html","hash":"0e373b46a1730543307b9d992bba4701500a9222","modified":1517402562886},{"_id":"public/2016/01/13/markdown2html/index.html","hash":"b10dad18a4a2664409330ddff0ebe06774e84775","modified":1517402562886},{"_id":"public/2015/08/14/PHP简单入门/index.html","hash":"50a7c63ae5ed82127cfcf8d28e27d73753b4b6d8","modified":1517402562886},{"_id":"public/index.html","hash":"86d73924a17faa2c65f6abb96bebe8228c10f8f9","modified":1517402562895},{"_id":"public/page/2/index.html","hash":"98234e393090fc28ed5c903c4c8a37ca639e69a6","modified":1517402562895},{"_id":"public/page/3/index.html","hash":"e7816dbecd1ea9f40dc634e1d3c17321b6e026df","modified":1517402562895},{"_id":"public/archives/index.html","hash":"a867076b0a113ef13244731b45239ed6c4b90c39","modified":1517402562886},{"_id":"public/archives/page/2/index.html","hash":"f7a9702832ad0266d55e5001254d3d20a86450e2","modified":1517402562886},{"_id":"public/archives/2015/index.html","hash":"0ea61723f4a590138e78527f611ba67eeec26bcc","modified":1517402562886},{"_id":"public/archives/2015/08/index.html","hash":"0ea61723f4a590138e78527f611ba67eeec26bcc","modified":1517402562886},{"_id":"public/archives/2016/index.html","hash":"b880e21deeb6b7a32057bdab9fdf3cc856c0b107","modified":1517402562886},{"_id":"public/archives/2016/page/2/index.html","hash":"a64a757a2e81dcf0b9c87946621ef7317cd3c184","modified":1517402562886},{"_id":"public/archives/2016/01/index.html","hash":"45c7996fd3b61b899f944935a491c52e53366bf8","modified":1517402562886},{"_id":"public/archives/2016/03/index.html","hash":"f3d38c61920a55c622a6915b026219464d2b48dd","modified":1517402562886},{"_id":"public/archives/2016/04/index.html","hash":"c14a66394a49145a20b6e920b5e6517f5c6891a7","modified":1517402562886},{"_id":"public/archives/2016/05/index.html","hash":"079d51ffdc66e2a764969c6a151ea0dcf4c5a3b6","modified":1517402562886},{"_id":"public/archives/2016/06/index.html","hash":"eb367463ac6cc44221984746685f5778bbb40211","modified":1517402562886},{"_id":"public/archives/2016/07/index.html","hash":"5efed750422f0ffea04d1c07731dd23b3becdb4a","modified":1517402562886},{"_id":"public/archives/2016/08/index.html","hash":"f3e8325f38809d89b6ab34fd487852837694c306","modified":1517402562886},{"_id":"public/archives/2016/09/index.html","hash":"477cb05a81230042b600842e7869b7e92e3f737b","modified":1517402562886},{"_id":"public/archives/2016/10/index.html","hash":"5cc45a677077ace193d4fad90c1f4f8c27d68a1e","modified":1517402562886},{"_id":"public/archives/2016/11/index.html","hash":"cd33ca6de0ab3c9ddbb6deccfae512933da5a387","modified":1517402562887},{"_id":"public/archives/2017/index.html","hash":"2a24ea0e0918615719eab360ccd82c87ea96f760","modified":1517402562887},{"_id":"public/archives/2017/01/index.html","hash":"b8cf81925d6948e88cf08ed2b256191dbed77a5b","modified":1517402562887},{"_id":"public/archives/2017/03/index.html","hash":"ac419fd6aacb70ff56a1cfc191f0dddf7ae9bc73","modified":1517402562887},{"_id":"public/archives/2017/04/index.html","hash":"3599a5e3ea271aea733d9d3df37071b8537b961b","modified":1517402562887},{"_id":"public/archives/2017/05/index.html","hash":"718b315217c5bdee3dd343a2deb9427b98784aa4","modified":1517402562887},{"_id":"public/archives/2017/07/index.html","hash":"49f13fb213e1c55439cb3de6ca7673d361b557b8","modified":1517402562887},{"_id":"public/archives/2018/index.html","hash":"ff88d141eb4b69c57bf9632a665efdd49221626d","modified":1517402562887},{"_id":"public/archives/2018/01/index.html","hash":"ff88d141eb4b69c57bf9632a665efdd49221626d","modified":1517402562887},{"_id":"public/tags/ajax/index.html","hash":"09ff6f5d934aa8208b6087fde14cae5c1f699b77","modified":1517402562887},{"_id":"public/tags/基本功/index.html","hash":"92923d02a8da5136aac043ce3d3115621431c588","modified":1517402562888},{"_id":"public/tags/http/index.html","hash":"8dce7f1ed935a7ea8f8411032480839949a6371e","modified":1517402562888},{"_id":"public/tags/Angular/index.html","hash":"e6843c7bbfe4d673d71ee6e993e23f830d33cc78","modified":1517402562888},{"_id":"public/tags/JS/index.html","hash":"8c132726ad83423058a9958127859318ada1dcee","modified":1517402562888},{"_id":"public/tags/MongoDB/index.html","hash":"48113100cb6b2383433e51ba894203c065b883e2","modified":1517402562888},{"_id":"public/tags/NodeJS/index.html","hash":"48113100cb6b2383433e51ba894203c065b883e2","modified":1517402562888},{"_id":"public/tags/ECMA/index.html","hash":"2c4d42b8963574e8b17c43179e78aa1ef169bfde","modified":1517402562888},{"_id":"public/tags/canvas/index.html","hash":"ab965b890310171b1473a20ada98eeb618c2b9d4","modified":1517402562888},{"_id":"public/tags/画布/index.html","hash":"477cb05a81230042b600842e7869b7e92e3f737b","modified":1517402562888},{"_id":"public/tags/Canvas/index.html","hash":"948425a9620a7b5a051db4d050f3a199abfce7b9","modified":1517402562888},{"_id":"public/tags/centos/index.html","hash":"ac419fd6aacb70ff56a1cfc191f0dddf7ae9bc73","modified":1517402562889},{"_id":"public/tags/css3/index.html","hash":"49f13fb213e1c55439cb3de6ca7673d361b557b8","modified":1517402562889},{"_id":"public/tags/git/index.html","hash":"33553e1ed7f3728ef2c715bcd569b2fa05dbf864","modified":1517402562889},{"_id":"public/tags/版本控制/index.html","hash":"64fc771e0053fcdce5673e3993936521e8dc3f4a","modified":1517402562889},{"_id":"public/tags/工具/index.html","hash":"c7a716bf052aea9b88bc81cd23005d73a2c2a0b2","modified":1517402562889},{"_id":"public/tags/常用命令操作/index.html","hash":"bdea4e71700f548fea821bd041f720ab35ecd9d4","modified":1517402562889},{"_id":"public/tags/vi/index.html","hash":"799eb44154e4911757d46bd96a9ed8c14779c1af","modified":1517402562889},{"_id":"public/tags/vim/index.html","hash":"799eb44154e4911757d46bd96a9ed8c14779c1af","modified":1517402562892},{"_id":"public/tags/SSH/index.html","hash":"f17259e26020637032f958c999557a9f0f91a4f6","modified":1517402562892},{"_id":"public/tags/hexo-ubuntu/index.html","hash":"8c62169868432e73e2c89fa9a0204b33743ba1ea","modified":1517402562892},{"_id":"public/tags/markdown/index.html","hash":"45c7996fd3b61b899f944935a491c52e53366bf8","modified":1517402562892},{"_id":"public/tags/转换，html/index.html","hash":"07eda9ad3da075f6bd69a8ef88e2797950fd3c84","modified":1517402562892},{"_id":"public/tags/i5ting-toc/index.html","hash":"07eda9ad3da075f6bd69a8ef88e2797950fd3c84","modified":1517402562893},{"_id":"public/tags/NodeJS-express/index.html","hash":"3857811d2f0f4232a1880636675bca7a59ec26ad","modified":1517402562893},{"_id":"public/tags/语法/index.html","hash":"9e7840768191fa614cf227f628ae0cb288f72346","modified":1517402562893},{"_id":"public/tags/linux/index.html","hash":"d6a321a84b7147d58d827f8cd2afb61ab181217f","modified":1517402562894},{"_id":"public/tags/ubuntu/index.html","hash":"d6a321a84b7147d58d827f8cd2afb61ab181217f","modified":1517402562894},{"_id":"public/tags/shell/index.html","hash":"934391fca0685d120453e6ff67aaee1f8f6e6aeb","modified":1517402562894},{"_id":"public/tags/bash/index.html","hash":"934391fca0685d120453e6ff67aaee1f8f6e6aeb","modified":1517402562894},{"_id":"public/tags/js/index.html","hash":"7eff160c754adec55e66c817cbb0e5917275cf4f","modified":1517402562894},{"_id":"public/tags/静态方法/index.html","hash":"f3e8325f38809d89b6ab34fd487852837694c306","modified":1517402562894},{"_id":"public/tags/实例方法/index.html","hash":"f3e8325f38809d89b6ab34fd487852837694c306","modified":1517402562894},{"_id":"public/tags/函数/index.html","hash":"38c8d4dec5fc811a842eca6677832ffdc75451d8","modified":1517402562894},{"_id":"public/tags/服务端渲染/index.html","hash":"718b315217c5bdee3dd343a2deb9427b98784aa4","modified":1517402562894},{"_id":"public/tags/原生js实现jq，原生框架封装/index.html","hash":"47f932116fe2d9abc353d4b13c4888e152f79a88","modified":1517402562894},{"_id":"public/tags/原型/index.html","hash":"5cc45a677077ace193d4fad90c1f4f8c27d68a1e","modified":1517402562894},{"_id":"public/tags/原型链/index.html","hash":"5cc45a677077ace193d4fad90c1f4f8c27d68a1e","modified":1517402562894},{"_id":"public/tags/原生框架封装/index.html","hash":"e0d2865c966d0f4b942cc4794f46de3140563c56","modified":1517402562894},{"_id":"public/tags/js，jquery/index.html","hash":"05fb91ed57c7dc50eaa9112e4d57bc189526cb55","modified":1517402562895},{"_id":"public/tags/原生js实现jq/index.html","hash":"cc2ad20671eea95307667ea1845902036bbb06f8","modified":1517402562895},{"_id":"public/tags/hexo/index.html","hash":"71d944e58415160bdb4ec12b6afefa81ac8586a0","modified":1517402562895},{"_id":"public/tags/个人博客/index.html","hash":"71d944e58415160bdb4ec12b6afefa81ac8586a0","modified":1517402562895},{"_id":"public/tags/技术分享/index.html","hash":"71d944e58415160bdb4ec12b6afefa81ac8586a0","modified":1517402562895},{"_id":"public/tags/数组，js基础/index.html","hash":"465232b5460bc3631030b125fa93d53e398f5f0f","modified":1517402562895},{"_id":"public/tags/框架封装，ajax/index.html","hash":"ab4b6ef9c496cafde2ab9b2a74ac3c65c35f64ab","modified":1517402562895},{"_id":"public/tags/原生框架/index.html","hash":"628fda7be5823a231f5d89f646c367d773867505","modified":1517402562895},{"_id":"public/tags/JavaScript/index.html","hash":"628fda7be5823a231f5d89f646c367d773867505","modified":1517402562895},{"_id":"public/images/892d33e07a34f7d7cf93.jpg","hash":"684248c1bab6aac9ae3db74dceb95c45e32a9437","modified":1517402562914},{"_id":"public/images/avatar.jpg","hash":"b0954f70d022afa1d0f25a75340bce0a927aa44b","modified":1517402562914},{"_id":"public/images/clock.png","hash":"914bde8faa24a6c40c0330246742b3aaade877d8","modified":1517402562914},{"_id":"public/images/swiper.png","hash":"d25d781b5af087a62bd56dbd197c69afca29aa62","modified":1517402562914},{"_id":"public/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1517402562915},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1517402562915},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1517402562915},{"_id":"public/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1517402562915},{"_id":"public/favicon.jpg","hash":"0f66adae70f99ac7eaee6f4bec5c1a18bd52db13","modified":1517402562915},{"_id":"public/images/bg2.jpg","hash":"0bbaab4e56fea44e9a0ad920ddb62eab75a0bf2a","modified":1517402562949},{"_id":"public/images/vi.png","hash":"1b503a3f8bdf7c6aa7b1ed570935c9004b9b8241","modified":1517402562952},{"_id":"public/images/ea3c933f25c58df0caad9c00a53bcfc5.png","hash":"c814a9d2b729edf7a2b69a5cdd3c6b0063db6be1","modified":1517402562949},{"_id":"public/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1517402562969},{"_id":"public/images/bg.jpg","hash":"36b49a2f0183ac20207c44a8172e410e4d6865e6","modified":1517402562969},{"_id":"public/images/16146adf33a8603c.jpg","hash":"20b0a8b2d19184862defe2e4c4a101824b9c5469","modified":1517402563006},{"_id":"public/images/demo-ac.png","hash":"1eac7a0dd841ef6d118d229b4dba1f399c6aa1f7","modified":1517402563231}],"Category":[],"Data":[],"Page":[{"_content":"layout: false title: \"My Blog Name | 404\" ---\n<!DOCTYPE HTML>\n<html>\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n\n<body>\n    <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\">\n    </script>\n    <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n\n</html>","source":"404.html","raw":"layout: false title: \"My Blog Name | 404\" ---\n<!DOCTYPE HTML>\n<html>\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n\n<body>\n    <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\">\n    </script>\n    <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n\n</html>","date":"2017-03-16T17:49:35.755Z","updated":"2017-03-16T17:49:35.755Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjd30vvw10000581i61oji3wv","content":"layout: false title: \"My Blog Name | 404\" ---\n<!DOCTYPE HTML>\n<html>\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"robots\" content=\"all\">\n    <meta name=\"robots\" content=\"index,follow\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n\n<body>\n    <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n    </script>\n    <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n\n</html>","site":{"data":{}},"excerpt":"","more":"layout: false title: \"My Blog Name | 404\" ---\n<!DOCTYPE HTML>\n<html>\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"robots\" content=\"all\">\n    <meta name=\"robots\" content=\"index,follow\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n\n<body>\n    <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n    </script>\n    <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n\n</html>"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div>\n        啊是分开时间段放假啦\n    </div>\n</body>\n\n</html>","source":"person.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div>\n        啊是分开时间段放假啦\n    </div>\n</body>\n\n</html>","date":"2017-03-17T06:49:12.301Z","updated":"2017-03-17T06:49:12.301Z","path":"person.html","title":"","comments":1,"layout":"page","_id":"cjd30vvwm0001581i5hhrusvb","content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div>\n        啊是分开时间段放假啦\n    </div>\n</body>\n\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n    <div>\n        啊是分开时间段放假啦\n    </div>\n</body>\n\n</html>"},{"layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"layout: categories\ncomments: false\n---","date":"2017-03-16T16:56:56.845Z","updated":"2017-03-16T16:56:56.000Z","path":"categories/index.html","title":"","_id":"cjd30vw0g0003581i1b2kxpqm","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"layout: tags\ncomments: false\n---","date":"2017-03-16T16:55:45.670Z","updated":"2017-03-16T16:55:45.000Z","path":"tags/index.html","title":"","_id":"cjd30vx84004u581i10jy1b56","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"page","title":"王攀升","description":"关于我的介绍，让你更加了解我！","comments":1,"reward":false,"date":"2017-03-16T18:50:49.000Z","_content":"<!--##\t加速建设中。。。。。-->\n\n<!--<iframe src=\"../person.html\" width=\"600px\" height=\"800px\"></iframe>-->\n\n\n<style>\n\t#person {\n\t\twidth: 800px;\n\t\theight: 500px;\n\t\tborder: 1px solid #ccc;\n}\n</style>\n\n<div id=\"person\"></div>\n","source":"me/index.md","raw":"---\nlayout: page      # 必须\ntitle: 王攀升  # 必须，页面名称\ndescription: 关于我的介绍，让你更加了解我！       # 页面二级标题，描述性文字\ncomments: true    # 禁用评论，可选，默认开启\nreward: false       # 禁用打赏，可选，默认开启\ndate: 2017-03-17 02:50:49\n---\n<!--##\t加速建设中。。。。。-->\n\n<!--<iframe src=\"../person.html\" width=\"600px\" height=\"800px\"></iframe>-->\n\n\n<style>\n\t#person {\n\t\twidth: 800px;\n\t\theight: 500px;\n\t\tborder: 1px solid #ccc;\n}\n</style>\n\n<div id=\"person\"></div>\n","updated":"2017-03-17T08:03:01.282Z","path":"me/index.html","_id":"cjd30vx85004v581ip76sbnfh","content":"<!--##    加速建设中。。。。。-->\n<!--<iframe src=\"../person.html\" width=\"600px\" height=\"800px\"></iframe>-->\n<style>\n    #person {\n        width: 800px;\n        height: 500px;\n        border: 1px solid #ccc;\n}\n</style>\n\n<div id=\"person\"></div>\n","site":{"data":{}},"excerpt":"","more":"<!--##    加速建设中。。。。。-->\n<!--<iframe src=\"../person.html\" width=\"600px\" height=\"800px\"></iframe>-->\n<style>\n    #person {\n        width: 800px;\n        height: 500px;\n        border: 1px solid #ccc;\n}\n</style>\n\n<div id=\"person\"></div>\n"},{"title":"tags","date":"2017-03-16T16:55:08.000Z","_content":"","source":"tags/index-1.md","raw":"---\ntitle: tags\ndate: 2017-03-17 00:55:08\n---\n","updated":"2017-03-16T16:55:08.215Z","path":"tags/index-1.html","comments":1,"layout":"page","_id":"cjd30vx86004w581io3xflheh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","layout":"page","description":"前端好文和大牛博客推荐","comments":1,"reward":false,"date":"2017-03-16T19:23:45.000Z","_content":"[张鑫旭博客：http://www.zhangxinxu.com/](http://www.zhangxinxu.com/)\n[阮一峰博客：http://www.ruanyifeng.com/blog/](http://www.ruanyifeng.com/blog/)\n[51CTO.COM：http://www.51cto.com/](http://www.51cto.com/)\n","source":"友链/index.md","raw":"---\ntitle: 友情链接\nlayout: page      # 必须\ndescription: 前端好文和大牛博客推荐       # 页面二级标题，描述性文字\ncomments: true    # 禁用评论，可选，默认开启\nreward: false       # 禁用打赏，可选，默认开启\ndate: 2017-03-17 03:23:45\n---\n[张鑫旭博客：http://www.zhangxinxu.com/](http://www.zhangxinxu.com/)\n[阮一峰博客：http://www.ruanyifeng.com/blog/](http://www.ruanyifeng.com/blog/)\n[51CTO.COM：http://www.51cto.com/](http://www.51cto.com/)\n","updated":"2017-04-09T12:46:14.000Z","path":"友链/index.html","_id":"cjd30vx87004x581ipzj6ut7i","content":"<p><a href=\"http://www.zhangxinxu.com/\" target=\"_blank\" rel=\"noopener\">张鑫旭博客：http://www.zhangxinxu.com/</a><br><a href=\"http://www.ruanyifeng.com/blog/\" target=\"_blank\" rel=\"noopener\">阮一峰博客：http://www.ruanyifeng.com/blog/</a><br><a href=\"http://www.51cto.com/\" target=\"_blank\" rel=\"noopener\">51CTO.COM：http://www.51cto.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.zhangxinxu.com/\" target=\"_blank\" rel=\"noopener\">张鑫旭博客：http://www.zhangxinxu.com/</a><br><a href=\"http://www.ruanyifeng.com/blog/\" target=\"_blank\" rel=\"noopener\">阮一峰博客：http://www.ruanyifeng.com/blog/</a><br><a href=\"http://www.51cto.com/\" target=\"_blank\" rel=\"noopener\">51CTO.COM：http://www.51cto.com/</a></p>\n"}],"Post":[{"title":"AJAX应用之基本功","date":"2016-05-13T13:10:23.000Z","_content":"\n#\t静态资源和动态资源\n\n> 我们把开发好的html css js部署到服务器上，然后就可以访问了，我们称这些服务器上的文件为资源。\n\n##  我们把资源分为两类：\n\n> 实际上，我们开发都是在开发资源，开发好了部署到服务器上，然后客户端就可访问我的资源了。\n\n-  资源分为两类\n\n 1. 静态资源\n\n>\t可以通过浏览器直接打开，直接解析的我们称为静态资源。html,js,css.inage 我们可以理解为静态资源\n\n 2. 动态资源\n\n>\tphp，jsp，asp 我们可以理解为动态资源\n\n##  动态资源和静态资源的区别\n\n-  浏览器只认识静态资源。\n\n- 我的浏览器通过输入地址区访问呢服务器，实际上是去访问服务器上的资源。\n\n<!-- more -->\n\n- 服务器上有静态资源，也有动态资源。\n-  如果我的浏览器访问的是服务器上的动态资源，服务器会把动态资源转换称静态资源，然后在传给客户端浏览器。\n-  如果我的浏览器访问的是服务器上的静态资源，那么服务器会直接把静态资源传送给浏览器解析。\n- 动态资源是在服务端运行的，静态资源是在客户端运行的。\n\n\n-  php 就是在服务端运行的，用来处理服务端逻辑的。\n\n#  客户端与服务端进行交互\n\n##\t客户端发送请求有几种方式：\n\n1.  在地址栏输入地址发送请求\n\n2. 点击一个超链接，发送请求\n\n3.  表单提交也是属于发送请求\n\n-  发送请求是给服务器端进行提交，提交数据到服务器\n-  提交有两种常见的方式，一个是get，一个是post\n\n##  1. 什么是get提交\n\n>\t在地址栏输入地址发送请求，点击超链接也属于get提交\n 表单提交，`<form action=\"\" method=\"get\"></form>`默认是get方式提交。\n ?paraName=value&paraName=value&paraName=value\n\n##  2. 什么是post提交呢？\n\n>\t表单提交，可以设置称post方式提交， 会自动把数据发送到服务器\n\n##  3.  服务端\n  1.\t接收请求\n  $_GET $POST这两个变量得到的值是一个关联数组，\n  客户端的数据放在关联数组里面，需要根据key去获取里边的值\n  2.  处理请求\n  连接数据库，增删改查\n  3.  响应数据\n  echo根据处理请求的逻辑，给客户端不同的响应结果\n\n## 服务端接收到客户端的请求，一般要做那些处理？\n\n #### 1.用户登录\n \n  1.\t接收请求，接收用户名以及密码\n  2.  对接收到的用户名密码进行判断，\n      - 如果正确，则进行连接数据\n      -  如果不正确就提示错误\n\n#### 2.文件上传\n\n-   客户端：\n  1.\t必须是表单提交的\n  2.  表单提交里面必须有一个 input type=“file”\n  3.  必须是post方式提交的\n  4.  必须给表单设置一个属性，`enctype=\"multipart/form-data`\n\n-   服务端（php）\n  1.\t要接收客户端的数据， $_GET, $_POST ,不能接收文件上传的数据，文件上传的数据，我们应该用$_FILES 的变量去接收，接收的数据也是一个关联数组\n  2.  接收到这个数据之后，需要把这些数据保存到服务端硬盘上面。\n","source":"_posts/AJAX学习之基本功.md","raw":"---\ntitle: AJAX应用之基本功\ndate: 2016-05-13 21:10:23\ntags: [ajax,基本功]\n---\n\n#\t静态资源和动态资源\n\n> 我们把开发好的html css js部署到服务器上，然后就可以访问了，我们称这些服务器上的文件为资源。\n\n##  我们把资源分为两类：\n\n> 实际上，我们开发都是在开发资源，开发好了部署到服务器上，然后客户端就可访问我的资源了。\n\n-  资源分为两类\n\n 1. 静态资源\n\n>\t可以通过浏览器直接打开，直接解析的我们称为静态资源。html,js,css.inage 我们可以理解为静态资源\n\n 2. 动态资源\n\n>\tphp，jsp，asp 我们可以理解为动态资源\n\n##  动态资源和静态资源的区别\n\n-  浏览器只认识静态资源。\n\n- 我的浏览器通过输入地址区访问呢服务器，实际上是去访问服务器上的资源。\n\n<!-- more -->\n\n- 服务器上有静态资源，也有动态资源。\n-  如果我的浏览器访问的是服务器上的动态资源，服务器会把动态资源转换称静态资源，然后在传给客户端浏览器。\n-  如果我的浏览器访问的是服务器上的静态资源，那么服务器会直接把静态资源传送给浏览器解析。\n- 动态资源是在服务端运行的，静态资源是在客户端运行的。\n\n\n-  php 就是在服务端运行的，用来处理服务端逻辑的。\n\n#  客户端与服务端进行交互\n\n##\t客户端发送请求有几种方式：\n\n1.  在地址栏输入地址发送请求\n\n2. 点击一个超链接，发送请求\n\n3.  表单提交也是属于发送请求\n\n-  发送请求是给服务器端进行提交，提交数据到服务器\n-  提交有两种常见的方式，一个是get，一个是post\n\n##  1. 什么是get提交\n\n>\t在地址栏输入地址发送请求，点击超链接也属于get提交\n 表单提交，`<form action=\"\" method=\"get\"></form>`默认是get方式提交。\n ?paraName=value&paraName=value&paraName=value\n\n##  2. 什么是post提交呢？\n\n>\t表单提交，可以设置称post方式提交， 会自动把数据发送到服务器\n\n##  3.  服务端\n  1.\t接收请求\n  $_GET $POST这两个变量得到的值是一个关联数组，\n  客户端的数据放在关联数组里面，需要根据key去获取里边的值\n  2.  处理请求\n  连接数据库，增删改查\n  3.  响应数据\n  echo根据处理请求的逻辑，给客户端不同的响应结果\n\n## 服务端接收到客户端的请求，一般要做那些处理？\n\n #### 1.用户登录\n \n  1.\t接收请求，接收用户名以及密码\n  2.  对接收到的用户名密码进行判断，\n      - 如果正确，则进行连接数据\n      -  如果不正确就提示错误\n\n#### 2.文件上传\n\n-   客户端：\n  1.\t必须是表单提交的\n  2.  表单提交里面必须有一个 input type=“file”\n  3.  必须是post方式提交的\n  4.  必须给表单设置一个属性，`enctype=\"multipart/form-data`\n\n-   服务端（php）\n  1.\t要接收客户端的数据， $_GET, $_POST ,不能接收文件上传的数据，文件上传的数据，我们应该用$_FILES 的变量去接收，接收的数据也是一个关联数组\n  2.  接收到这个数据之后，需要把这些数据保存到服务端硬盘上面。\n","slug":"AJAX学习之基本功","published":1,"updated":"2018-01-31T12:33:40.454Z","_id":"cjd30vvzs0002581ie4pdv1d7","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"静态资源和动态资源\"><a href=\"#静态资源和动态资源\" class=\"headerlink\" title=\"静态资源和动态资源\"></a>静态资源和动态资源</h1><blockquote>\n<p>我们把开发好的html css js部署到服务器上，然后就可以访问了，我们称这些服务器上的文件为资源。</p>\n</blockquote>\n<h2 id=\"我们把资源分为两类：\"><a href=\"#我们把资源分为两类：\" class=\"headerlink\" title=\"我们把资源分为两类：\"></a>我们把资源分为两类：</h2><blockquote>\n<p>实际上，我们开发都是在开发资源，开发好了部署到服务器上，然后客户端就可访问我的资源了。</p>\n</blockquote>\n<ul>\n<li><p>资源分为两类</p>\n<ol>\n<li>静态资源</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>   可以通过浏览器直接打开，直接解析的我们称为静态资源。html,js,css.inage 我们可以理解为静态资源</p>\n</blockquote>\n<ol>\n<li>动态资源</li>\n</ol>\n<blockquote>\n<p>   php，jsp，asp 我们可以理解为动态资源</p>\n</blockquote>\n<h2 id=\"动态资源和静态资源的区别\"><a href=\"#动态资源和静态资源的区别\" class=\"headerlink\" title=\"动态资源和静态资源的区别\"></a>动态资源和静态资源的区别</h2><ul>\n<li><p>浏览器只认识静态资源。</p>\n</li>\n<li><p>我的浏览器通过输入地址区访问呢服务器，实际上是去访问服务器上的资源。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>服务器上有静态资源，也有动态资源。</li>\n<li>如果我的浏览器访问的是服务器上的动态资源，服务器会把动态资源转换称静态资源，然后在传给客户端浏览器。</li>\n<li>如果我的浏览器访问的是服务器上的静态资源，那么服务器会直接把静态资源传送给浏览器解析。</li>\n<li>动态资源是在服务端运行的，静态资源是在客户端运行的。</li>\n</ul>\n<ul>\n<li>php 就是在服务端运行的，用来处理服务端逻辑的。</li>\n</ul>\n<h1 id=\"客户端与服务端进行交互\"><a href=\"#客户端与服务端进行交互\" class=\"headerlink\" title=\"客户端与服务端进行交互\"></a>客户端与服务端进行交互</h1><h2 id=\"客户端发送请求有几种方式：\"><a href=\"#客户端发送请求有几种方式：\" class=\"headerlink\" title=\"客户端发送请求有几种方式：\"></a>客户端发送请求有几种方式：</h2><ol>\n<li><p>在地址栏输入地址发送请求</p>\n</li>\n<li><p>点击一个超链接，发送请求</p>\n</li>\n<li><p>表单提交也是属于发送请求</p>\n</li>\n</ol>\n<ul>\n<li>发送请求是给服务器端进行提交，提交数据到服务器</li>\n<li>提交有两种常见的方式，一个是get，一个是post</li>\n</ul>\n<h2 id=\"1-什么是get提交\"><a href=\"#1-什么是get提交\" class=\"headerlink\" title=\"1. 什么是get提交\"></a>1. 什么是get提交</h2><blockquote>\n<p>   在地址栏输入地址发送请求，点击超链接也属于get提交<br> 表单提交，<code>&lt;form action=&quot;&quot; method=&quot;get&quot;&gt;&lt;/form&gt;</code>默认是get方式提交。<br> ?paraName=value&amp;paraName=value&amp;paraName=value</p>\n</blockquote>\n<h2 id=\"2-什么是post提交呢？\"><a href=\"#2-什么是post提交呢？\" class=\"headerlink\" title=\"2. 什么是post提交呢？\"></a>2. 什么是post提交呢？</h2><blockquote>\n<p>   表单提交，可以设置称post方式提交， 会自动把数据发送到服务器</p>\n</blockquote>\n<h2 id=\"3-服务端\"><a href=\"#3-服务端\" class=\"headerlink\" title=\"3.  服务端\"></a>3.  服务端</h2><ol>\n<li>接收请求<br>$_GET $POST这两个变量得到的值是一个关联数组，<br>客户端的数据放在关联数组里面，需要根据key去获取里边的值</li>\n<li>处理请求<br>连接数据库，增删改查</li>\n<li>响应数据<br>echo根据处理请求的逻辑，给客户端不同的响应结果</li>\n</ol>\n<h2 id=\"服务端接收到客户端的请求，一般要做那些处理？\"><a href=\"#服务端接收到客户端的请求，一般要做那些处理？\" class=\"headerlink\" title=\"服务端接收到客户端的请求，一般要做那些处理？\"></a>服务端接收到客户端的请求，一般要做那些处理？</h2><h4 id=\"1-用户登录\"><a href=\"#1-用户登录\" class=\"headerlink\" title=\"1.用户登录\"></a>1.用户登录</h4><ol>\n<li>接收请求，接收用户名以及密码</li>\n<li>对接收到的用户名密码进行判断，<ul>\n<li>如果正确，则进行连接数据</li>\n<li>如果不正确就提示错误</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"2-文件上传\"><a href=\"#2-文件上传\" class=\"headerlink\" title=\"2.文件上传\"></a>2.文件上传</h4><ul>\n<li><p>客户端：</p>\n<ol>\n<li>必须是表单提交的</li>\n<li>表单提交里面必须有一个 input type=“file”</li>\n<li>必须是post方式提交的</li>\n<li>必须给表单设置一个属性，<code>enctype=&quot;multipart/form-data</code></li>\n</ol>\n</li>\n<li><p>服务端（php）</p>\n<ol>\n<li>要接收客户端的数据， $_GET, $_POST ,不能接收文件上传的数据，文件上传的数据，我们应该用$_FILES 的变量去接收，接收的数据也是一个关联数组</li>\n<li>接收到这个数据之后，需要把这些数据保存到服务端硬盘上面。</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"静态资源和动态资源\"><a href=\"#静态资源和动态资源\" class=\"headerlink\" title=\"静态资源和动态资源\"></a>静态资源和动态资源</h1><blockquote>\n<p>我们把开发好的html css js部署到服务器上，然后就可以访问了，我们称这些服务器上的文件为资源。</p>\n</blockquote>\n<h2 id=\"我们把资源分为两类：\"><a href=\"#我们把资源分为两类：\" class=\"headerlink\" title=\"我们把资源分为两类：\"></a>我们把资源分为两类：</h2><blockquote>\n<p>实际上，我们开发都是在开发资源，开发好了部署到服务器上，然后客户端就可访问我的资源了。</p>\n</blockquote>\n<ul>\n<li><p>资源分为两类</p>\n<ol>\n<li>静态资源</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>   可以通过浏览器直接打开，直接解析的我们称为静态资源。html,js,css.inage 我们可以理解为静态资源</p>\n</blockquote>\n<ol>\n<li>动态资源</li>\n</ol>\n<blockquote>\n<p>   php，jsp，asp 我们可以理解为动态资源</p>\n</blockquote>\n<h2 id=\"动态资源和静态资源的区别\"><a href=\"#动态资源和静态资源的区别\" class=\"headerlink\" title=\"动态资源和静态资源的区别\"></a>动态资源和静态资源的区别</h2><ul>\n<li><p>浏览器只认识静态资源。</p>\n</li>\n<li><p>我的浏览器通过输入地址区访问呢服务器，实际上是去访问服务器上的资源。</p>\n</li>\n</ul>","more":"<ul>\n<li>服务器上有静态资源，也有动态资源。</li>\n<li>如果我的浏览器访问的是服务器上的动态资源，服务器会把动态资源转换称静态资源，然后在传给客户端浏览器。</li>\n<li>如果我的浏览器访问的是服务器上的静态资源，那么服务器会直接把静态资源传送给浏览器解析。</li>\n<li>动态资源是在服务端运行的，静态资源是在客户端运行的。</li>\n</ul>\n<ul>\n<li>php 就是在服务端运行的，用来处理服务端逻辑的。</li>\n</ul>\n<h1 id=\"客户端与服务端进行交互\"><a href=\"#客户端与服务端进行交互\" class=\"headerlink\" title=\"客户端与服务端进行交互\"></a>客户端与服务端进行交互</h1><h2 id=\"客户端发送请求有几种方式：\"><a href=\"#客户端发送请求有几种方式：\" class=\"headerlink\" title=\"客户端发送请求有几种方式：\"></a>客户端发送请求有几种方式：</h2><ol>\n<li><p>在地址栏输入地址发送请求</p>\n</li>\n<li><p>点击一个超链接，发送请求</p>\n</li>\n<li><p>表单提交也是属于发送请求</p>\n</li>\n</ol>\n<ul>\n<li>发送请求是给服务器端进行提交，提交数据到服务器</li>\n<li>提交有两种常见的方式，一个是get，一个是post</li>\n</ul>\n<h2 id=\"1-什么是get提交\"><a href=\"#1-什么是get提交\" class=\"headerlink\" title=\"1. 什么是get提交\"></a>1. 什么是get提交</h2><blockquote>\n<p>   在地址栏输入地址发送请求，点击超链接也属于get提交<br> 表单提交，<code>&lt;form action=&quot;&quot; method=&quot;get&quot;&gt;&lt;/form&gt;</code>默认是get方式提交。<br> ?paraName=value&amp;paraName=value&amp;paraName=value</p>\n</blockquote>\n<h2 id=\"2-什么是post提交呢？\"><a href=\"#2-什么是post提交呢？\" class=\"headerlink\" title=\"2. 什么是post提交呢？\"></a>2. 什么是post提交呢？</h2><blockquote>\n<p>   表单提交，可以设置称post方式提交， 会自动把数据发送到服务器</p>\n</blockquote>\n<h2 id=\"3-服务端\"><a href=\"#3-服务端\" class=\"headerlink\" title=\"3.  服务端\"></a>3.  服务端</h2><ol>\n<li>接收请求<br>$_GET $POST这两个变量得到的值是一个关联数组，<br>客户端的数据放在关联数组里面，需要根据key去获取里边的值</li>\n<li>处理请求<br>连接数据库，增删改查</li>\n<li>响应数据<br>echo根据处理请求的逻辑，给客户端不同的响应结果</li>\n</ol>\n<h2 id=\"服务端接收到客户端的请求，一般要做那些处理？\"><a href=\"#服务端接收到客户端的请求，一般要做那些处理？\" class=\"headerlink\" title=\"服务端接收到客户端的请求，一般要做那些处理？\"></a>服务端接收到客户端的请求，一般要做那些处理？</h2><h4 id=\"1-用户登录\"><a href=\"#1-用户登录\" class=\"headerlink\" title=\"1.用户登录\"></a>1.用户登录</h4><ol>\n<li>接收请求，接收用户名以及密码</li>\n<li>对接收到的用户名密码进行判断，<ul>\n<li>如果正确，则进行连接数据</li>\n<li>如果不正确就提示错误</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"2-文件上传\"><a href=\"#2-文件上传\" class=\"headerlink\" title=\"2.文件上传\"></a>2.文件上传</h4><ul>\n<li><p>客户端：</p>\n<ol>\n<li>必须是表单提交的</li>\n<li>表单提交里面必须有一个 input type=“file”</li>\n<li>必须是post方式提交的</li>\n<li>必须给表单设置一个属性，<code>enctype=&quot;multipart/form-data</code></li>\n</ol>\n</li>\n<li><p>服务端（php）</p>\n<ol>\n<li>要接收客户端的数据， $_GET, $_POST ,不能接收文件上传的数据，文件上传的数据，我们应该用$_FILES 的变量去接收，接收的数据也是一个关联数组</li>\n<li>接收到这个数据之后，需要把这些数据保存到服务端硬盘上面。</li>\n</ol>\n</li>\n</ul>"},{"title":"AJAX应用之HTTP","date":"2016-03-14T11:42:23.000Z","_content":"\n#\thttp 协议。\n\n>\t协议就是约束，http协议是w3c制定的，用来约束客户端浏览器与web服务器进行通讯的数据格式,http 协议是基于请求，响应的协议。客户端浏览器给服务器发送一个请求，服务器给客户端一个响应\n\n##\thttp协议的数据格式分为两部分\n-\t客户端发送到服务器的请求，称为请求的数据格式。\n-\t服务器响应给客户端的数据，为响应的数据格式.\n\n-\t请求的数据格式，是客户端发送给服务器的，分为四个部分\n\t1.\t请求首行\n\t2.\t请求头\n\t3.\t请求空行\n\t4.\t请求体\n\n###\t1.\tget请求数据格式\n\n-\t请求首行\n\t```\n\tGET /day08/code/01http/01get.html HTTP/1.1\n\t[GET 告诉服务器提交方式]\n\t[/day08/code/01http/01get.html 告诉服务器，我要去请求的资源的地址]\n\t[HTTP/1.1 协议的版本] 有两个版本，\n\t1.0\n\t1.1\n\t```\n\n-\t请求头 \n\t```\n\tHost\t127.0.0.1\t【请求头的名称，请求头的值】\n\tCache-Control\tmax-age=0\t这个做缓存控制的.\n\tUpgrade-Insecure-Requests\t1   没有用过.\n\tUser-Agent\tMozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36 \t这个是告诉服务器，我客户端浏览器的版本，操作系统的版本\n\tAccept\ttext/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\t接收，告诉服务器，我客户端可以接收那些数据格式.\n\tReferer\thttp://127.0.0.1/day08/code/01http/\n\tAccept-Encoding\tgzip, deflate, sdch   接收的压缩格式. gzip\n\tAccept-Language\tzh-CN,zh;q=0.8\t\t接收的语言\n\tIf-None-Match\t\"7700000000217a-96-548afe60e947a\"\n\tIf-Modified-Since\tFri, 17 Feb 2017 01:33:19 GMT\n\t```\n\n###\t2.\tpost 请求的数据格式的介绍\n\n-\t请求首行\n\t```\n\tPOST /day08/code/01http/02post.php HTTP/1.1\n\t```\n<!-- more -->\n-\t请求头\n\t```\n    Host: 127.0.0.1\n    内容长度，指的 请求体的长度\n    Content-Length: 21\n    缓存的\n    Cache-Control: max-age=0\n    请求的站点的主域名\n    Origin: http://127.0.0.1\n    Upgrade-Insecure-Requests: 1\n    告诉服务器客户端浏览器的版本，操作系统的版本.\n    User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36\n    //这个是post 提交独有第一个请求头，如果发送到服务器的数据有中文，会吧中文进行编码\n    在发送给服务器，服务器得到数据会自动解码.\n    Content-Type: application/x-www-form-urlencoded\n    //接收的数据格式\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n    告诉服务器，请求来自于那个页面\n    Referer: http://127.0.0.1/day08/code/01http/02post.html\n    接收压缩格式\n    Accept-Encoding: gzip, deflate\n    接收的语言\n    Accept-Language: zh-CN,zh;q=0.8\n    请求空行 [用来将请求头跟请求体进行一个区分，方便服务器解析数据]\n    ```\n-   请求体[客户端发送到服务器的数据.]\n    ```\n    username=dasfadsfdafs\n    ```\n\n### 3.  get  跟post 的区别：\n\n1.  get 提交请求的数据都在地址栏中，相对来不安全。\n\n2.  get 请求的数据都请求地址的后面，对请求的数据的大小由限制，限制大概1kb\n\n3.  get 没有请求体\n\n4.  ost 请求的数据在请求体当中，相对来说安全\n\n5.  ost 请求的数据大小没有限制。文件上传，这个必须是post 方式提交\n\n6.  ost 提交有一个特殊的请求头:`Content-Type:application/x-www-form-urlencoded`\n可以对请求的数据包含中文的数据进行编码.\n\n7.  get 的请求没有没有请求体，也会少一些请求头，所以它传递到服务端的数据要少一些。性能要高一些。\n\n### 4.  服务器响应给客户端的数据也分为四个部分\n\n1.  响应首行\n2.  响应头\n3.  响应空行\n4.  响应体\n\n####    1. 响应首行\n```\n协议的版本\n200 状态吗 代表ok\nHTTP/1.1 200 OK\n```\n\n-   实际上我们开发的过程当中还有很多的状态吗\n404 代表请求的资源没有找到，以后假设出现404\n500 代表服务器内部错误\n405 代表请求的方式不支持,如果我的一个php接收post 方式的数据 $_POST\n然后你以get 方式去请求，就会出现405\n304 请求的资源没有发生改变. 这个是用来做缓存用的.\n当我第一次访问http://127.0.0.1/day08/code/01http/01get.html\n这个页面，服务器会给我一个响应头.\nLast-Modified:Fri, 17 Feb 2017 01:33:19 GMT\n告诉客户端浏览器，这个文件的最后修改时间.\n\n当我再次去访问http://127.0.0.1/day08/code/01http/01get.html\n会给服务器协议这样的一个请求头\nIf-Modified-Since:Fri, 17 Feb 2017 01:33:19 GMT\n这个时候服务器就会给客户端一个304 的状态吗，你请求的这个资源\nhttp://127.0.0.1/day08/code/01http/01get.html 没有做任何的修改\n客户端浏览器得到是304，它就会从本地去读取页面\n\n\n####    2.  响应头 \n告诉客户端服务器端的时间.\nDate: Fri, 17 Feb 2017 01:35:58 GMT\n告诉客户端服务器的版本\nServer: Apache/2.2.21 (Win32) PHP/5.3.10\n文件的最后修改时间\nLast-Modified: Fri, 17 Feb 2017 01:33:19 GMT\n\nETag: \"7700000000217a-96-548afe60e947a\"\nAccept-Ranges: bytes\n内容的长度\nContent-Length: 150\n//内容类型，告诉客户端浏览器，我给你返回的是一个文本，html 格式的文本,\n客户端浏览器得到这个，就会以html 的方式去解析.\nContent-Type: text/html;\nheader(\"Content-Type:text/html;charset=utf-8\")\n####    3.  响应空行\n####    4.  响应体\n\n客户端发送到服务器的时候有一个请求头叫做\nUser-Agent:告诉服务器客户端浏览器的版本，操作系统的版本.\n\n####    5.  响应的头，Refresh 的响应头\n服务器给客户端，如果客户端得到这个响应头，它会自动跳转页面.\n\n\nReferer 的头，告诉服务器，请求来自于那个页面.\n    1:广告流量统计，统计到我的网站在那个网站上面打的广告更加有效果。\n\n    2：防盗链，bs 架构，我们可以看到后台的链接，一个连接对应一个资源。\n 互联网上创业，有些软件做功能，有些软件做内容。\n     一个连接对应一个资源 ，视频行业，最砸钱，谁有视频的资源。视频的资源\n 现在都要买版权，都要收费。\n\n     www.kuaibo.com ，进入到快播的一个页面，\n 快播视频播放，我就可以引入优酷上面的一个视频资源。\n    这个时候会给优酷发送一个请求，就会优酷携带一个请求头\n    Referer:www.kuaibo.com\n    我在优酷的后台我就可以判断，如果你请求的Referer 的值不是来自于优酷自己的站点\n我让你跳转优酷的首页，看看广告.\n\n    http 协议 里面面试的时候一些重点的东西：\n            1:get 跟post 的区别\n            2:请求的数据格式，\n                    特殊的请求头\n                    post 提交有一个特殊的请求头\n                    Content-Type:\"application/-w-form-data\"\n            3:响应的数据格式。\n                    你知道哪些常见的状态吗\n                    200\n                    404\n                    405\n                    500\n                    304   请求的资源没有发生任何改变，浏览器从缓存里面去找\n                    302   请求重定向\n\n                    http://www.tieba.com\n\n                    这个地址会给我一个302 的状态吗\n                    它还会给以location 的地址\n\n                    302\n                    Location:http://tieba.baidu.com  //响应头：地址\n\n     你在请求开发的过程当成碰到什么乱码问题没有\n            1：客户端的数据发送到服务器，\n                   1:如果说有中文，我们一般使用post 方式提交\n\n                    //使用js 对魔兽.exe 进行编码. utf-8\n                    //服务器根据这个去进行解码. 以utf-8 去解码\n                   2:<a href=\"adsfadsf.php?fileName=\"魔兽.exe\">问价下载 </a>\n            2：服务器的数据响应给客户端。\n\n                  1： 当前文件采用的是什么编码\n                  2:  然后 给客户端一个响应头 Content-Type:text/html;charset=当前文件的编码\n\n\n\n\n\n\n\n","source":"_posts/AJAX应用之HTTP.md","raw":"---\ntitle: AJAX应用之HTTP\ndate: 2016-03-14 19:42:23\ntags: [ajax,http]\n---\n\n#\thttp 协议。\n\n>\t协议就是约束，http协议是w3c制定的，用来约束客户端浏览器与web服务器进行通讯的数据格式,http 协议是基于请求，响应的协议。客户端浏览器给服务器发送一个请求，服务器给客户端一个响应\n\n##\thttp协议的数据格式分为两部分\n-\t客户端发送到服务器的请求，称为请求的数据格式。\n-\t服务器响应给客户端的数据，为响应的数据格式.\n\n-\t请求的数据格式，是客户端发送给服务器的，分为四个部分\n\t1.\t请求首行\n\t2.\t请求头\n\t3.\t请求空行\n\t4.\t请求体\n\n###\t1.\tget请求数据格式\n\n-\t请求首行\n\t```\n\tGET /day08/code/01http/01get.html HTTP/1.1\n\t[GET 告诉服务器提交方式]\n\t[/day08/code/01http/01get.html 告诉服务器，我要去请求的资源的地址]\n\t[HTTP/1.1 协议的版本] 有两个版本，\n\t1.0\n\t1.1\n\t```\n\n-\t请求头 \n\t```\n\tHost\t127.0.0.1\t【请求头的名称，请求头的值】\n\tCache-Control\tmax-age=0\t这个做缓存控制的.\n\tUpgrade-Insecure-Requests\t1   没有用过.\n\tUser-Agent\tMozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36 \t这个是告诉服务器，我客户端浏览器的版本，操作系统的版本\n\tAccept\ttext/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\t接收，告诉服务器，我客户端可以接收那些数据格式.\n\tReferer\thttp://127.0.0.1/day08/code/01http/\n\tAccept-Encoding\tgzip, deflate, sdch   接收的压缩格式. gzip\n\tAccept-Language\tzh-CN,zh;q=0.8\t\t接收的语言\n\tIf-None-Match\t\"7700000000217a-96-548afe60e947a\"\n\tIf-Modified-Since\tFri, 17 Feb 2017 01:33:19 GMT\n\t```\n\n###\t2.\tpost 请求的数据格式的介绍\n\n-\t请求首行\n\t```\n\tPOST /day08/code/01http/02post.php HTTP/1.1\n\t```\n<!-- more -->\n-\t请求头\n\t```\n    Host: 127.0.0.1\n    内容长度，指的 请求体的长度\n    Content-Length: 21\n    缓存的\n    Cache-Control: max-age=0\n    请求的站点的主域名\n    Origin: http://127.0.0.1\n    Upgrade-Insecure-Requests: 1\n    告诉服务器客户端浏览器的版本，操作系统的版本.\n    User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36\n    //这个是post 提交独有第一个请求头，如果发送到服务器的数据有中文，会吧中文进行编码\n    在发送给服务器，服务器得到数据会自动解码.\n    Content-Type: application/x-www-form-urlencoded\n    //接收的数据格式\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n    告诉服务器，请求来自于那个页面\n    Referer: http://127.0.0.1/day08/code/01http/02post.html\n    接收压缩格式\n    Accept-Encoding: gzip, deflate\n    接收的语言\n    Accept-Language: zh-CN,zh;q=0.8\n    请求空行 [用来将请求头跟请求体进行一个区分，方便服务器解析数据]\n    ```\n-   请求体[客户端发送到服务器的数据.]\n    ```\n    username=dasfadsfdafs\n    ```\n\n### 3.  get  跟post 的区别：\n\n1.  get 提交请求的数据都在地址栏中，相对来不安全。\n\n2.  get 请求的数据都请求地址的后面，对请求的数据的大小由限制，限制大概1kb\n\n3.  get 没有请求体\n\n4.  ost 请求的数据在请求体当中，相对来说安全\n\n5.  ost 请求的数据大小没有限制。文件上传，这个必须是post 方式提交\n\n6.  ost 提交有一个特殊的请求头:`Content-Type:application/x-www-form-urlencoded`\n可以对请求的数据包含中文的数据进行编码.\n\n7.  get 的请求没有没有请求体，也会少一些请求头，所以它传递到服务端的数据要少一些。性能要高一些。\n\n### 4.  服务器响应给客户端的数据也分为四个部分\n\n1.  响应首行\n2.  响应头\n3.  响应空行\n4.  响应体\n\n####    1. 响应首行\n```\n协议的版本\n200 状态吗 代表ok\nHTTP/1.1 200 OK\n```\n\n-   实际上我们开发的过程当中还有很多的状态吗\n404 代表请求的资源没有找到，以后假设出现404\n500 代表服务器内部错误\n405 代表请求的方式不支持,如果我的一个php接收post 方式的数据 $_POST\n然后你以get 方式去请求，就会出现405\n304 请求的资源没有发生改变. 这个是用来做缓存用的.\n当我第一次访问http://127.0.0.1/day08/code/01http/01get.html\n这个页面，服务器会给我一个响应头.\nLast-Modified:Fri, 17 Feb 2017 01:33:19 GMT\n告诉客户端浏览器，这个文件的最后修改时间.\n\n当我再次去访问http://127.0.0.1/day08/code/01http/01get.html\n会给服务器协议这样的一个请求头\nIf-Modified-Since:Fri, 17 Feb 2017 01:33:19 GMT\n这个时候服务器就会给客户端一个304 的状态吗，你请求的这个资源\nhttp://127.0.0.1/day08/code/01http/01get.html 没有做任何的修改\n客户端浏览器得到是304，它就会从本地去读取页面\n\n\n####    2.  响应头 \n告诉客户端服务器端的时间.\nDate: Fri, 17 Feb 2017 01:35:58 GMT\n告诉客户端服务器的版本\nServer: Apache/2.2.21 (Win32) PHP/5.3.10\n文件的最后修改时间\nLast-Modified: Fri, 17 Feb 2017 01:33:19 GMT\n\nETag: \"7700000000217a-96-548afe60e947a\"\nAccept-Ranges: bytes\n内容的长度\nContent-Length: 150\n//内容类型，告诉客户端浏览器，我给你返回的是一个文本，html 格式的文本,\n客户端浏览器得到这个，就会以html 的方式去解析.\nContent-Type: text/html;\nheader(\"Content-Type:text/html;charset=utf-8\")\n####    3.  响应空行\n####    4.  响应体\n\n客户端发送到服务器的时候有一个请求头叫做\nUser-Agent:告诉服务器客户端浏览器的版本，操作系统的版本.\n\n####    5.  响应的头，Refresh 的响应头\n服务器给客户端，如果客户端得到这个响应头，它会自动跳转页面.\n\n\nReferer 的头，告诉服务器，请求来自于那个页面.\n    1:广告流量统计，统计到我的网站在那个网站上面打的广告更加有效果。\n\n    2：防盗链，bs 架构，我们可以看到后台的链接，一个连接对应一个资源。\n 互联网上创业，有些软件做功能，有些软件做内容。\n     一个连接对应一个资源 ，视频行业，最砸钱，谁有视频的资源。视频的资源\n 现在都要买版权，都要收费。\n\n     www.kuaibo.com ，进入到快播的一个页面，\n 快播视频播放，我就可以引入优酷上面的一个视频资源。\n    这个时候会给优酷发送一个请求，就会优酷携带一个请求头\n    Referer:www.kuaibo.com\n    我在优酷的后台我就可以判断，如果你请求的Referer 的值不是来自于优酷自己的站点\n我让你跳转优酷的首页，看看广告.\n\n    http 协议 里面面试的时候一些重点的东西：\n            1:get 跟post 的区别\n            2:请求的数据格式，\n                    特殊的请求头\n                    post 提交有一个特殊的请求头\n                    Content-Type:\"application/-w-form-data\"\n            3:响应的数据格式。\n                    你知道哪些常见的状态吗\n                    200\n                    404\n                    405\n                    500\n                    304   请求的资源没有发生任何改变，浏览器从缓存里面去找\n                    302   请求重定向\n\n                    http://www.tieba.com\n\n                    这个地址会给我一个302 的状态吗\n                    它还会给以location 的地址\n\n                    302\n                    Location:http://tieba.baidu.com  //响应头：地址\n\n     你在请求开发的过程当成碰到什么乱码问题没有\n            1：客户端的数据发送到服务器，\n                   1:如果说有中文，我们一般使用post 方式提交\n\n                    //使用js 对魔兽.exe 进行编码. utf-8\n                    //服务器根据这个去进行解码. 以utf-8 去解码\n                   2:<a href=\"adsfadsf.php?fileName=\"魔兽.exe\">问价下载 </a>\n            2：服务器的数据响应给客户端。\n\n                  1： 当前文件采用的是什么编码\n                  2:  然后 给客户端一个响应头 Content-Type:text/html;charset=当前文件的编码\n\n\n\n\n\n\n\n","slug":"AJAX应用之HTTP","published":1,"updated":"2018-01-31T12:33:52.695Z","_id":"cjd30vw0i0004581iyead7qp5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"http-协议。\"><a href=\"#http-协议。\" class=\"headerlink\" title=\"http 协议。\"></a>http 协议。</h1><blockquote>\n<p>   协议就是约束，http协议是w3c制定的，用来约束客户端浏览器与web服务器进行通讯的数据格式,http 协议是基于请求，响应的协议。客户端浏览器给服务器发送一个请求，服务器给客户端一个响应</p>\n</blockquote>\n<h2 id=\"http协议的数据格式分为两部分\"><a href=\"#http协议的数据格式分为两部分\" class=\"headerlink\" title=\"http协议的数据格式分为两部分\"></a>http协议的数据格式分为两部分</h2><ul>\n<li>客户端发送到服务器的请求，称为请求的数据格式。</li>\n<li><p>服务器响应给客户端的数据，为响应的数据格式.</p>\n</li>\n<li><p>请求的数据格式，是客户端发送给服务器的，分为四个部分</p>\n<ol>\n<li>请求首行</li>\n<li>请求头</li>\n<li>请求空行</li>\n<li>请求体</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"1-get请求数据格式\"><a href=\"#1-get请求数据格式\" class=\"headerlink\" title=\"1.    get请求数据格式\"></a>1.    get请求数据格式</h3><ul>\n<li><p>请求首行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /day08/code/01http/01get.html HTTP/1.1</span><br><span class=\"line\">[GET 告诉服务器提交方式]</span><br><span class=\"line\">[/day08/code/01http/01get.html 告诉服务器，我要去请求的资源的地址]</span><br><span class=\"line\">[HTTP/1.1 协议的版本] 有两个版本，</span><br><span class=\"line\">1.0</span><br><span class=\"line\">1.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>请求头 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host\t127.0.0.1\t【请求头的名称，请求头的值】</span><br><span class=\"line\">Cache-Control\tmax-age=0\t这个做缓存控制的.</span><br><span class=\"line\">Upgrade-Insecure-Requests\t1   没有用过.</span><br><span class=\"line\">User-Agent\tMozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36 \t这个是告诉服务器，我客户端浏览器的版本，操作系统的版本</span><br><span class=\"line\">Accept\ttext/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\t接收，告诉服务器，我客户端可以接收那些数据格式.</span><br><span class=\"line\">Referer\thttp://127.0.0.1/day08/code/01http/</span><br><span class=\"line\">Accept-Encoding\tgzip, deflate, sdch   接收的压缩格式. gzip</span><br><span class=\"line\">Accept-Language\tzh-CN,zh;q=0.8\t\t接收的语言</span><br><span class=\"line\">If-None-Match\t&quot;7700000000217a-96-548afe60e947a&quot;</span><br><span class=\"line\">If-Modified-Since\tFri, 17 Feb 2017 01:33:19 GMT</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-post-请求的数据格式的介绍\"><a href=\"#2-post-请求的数据格式的介绍\" class=\"headerlink\" title=\"2.    post 请求的数据格式的介绍\"></a>2.    post 请求的数据格式的介绍</h3><ul>\n<li>请求首行<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /day08/code/01http/02post.php HTTP/1.1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>请求头</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host: 127.0.0.1</span><br><span class=\"line\">内容长度，指的 请求体的长度</span><br><span class=\"line\">Content-Length: 21</span><br><span class=\"line\">缓存的</span><br><span class=\"line\">Cache-Control: max-age=0</span><br><span class=\"line\">请求的站点的主域名</span><br><span class=\"line\">Origin: http://127.0.0.1</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">告诉服务器客户端浏览器的版本，操作系统的版本.</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36</span><br><span class=\"line\">//这个是post 提交独有第一个请求头，如果发送到服务器的数据有中文，会吧中文进行编码</span><br><span class=\"line\">在发送给服务器，服务器得到数据会自动解码.</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">//接收的数据格式</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class=\"line\">告诉服务器，请求来自于那个页面</span><br><span class=\"line\">Referer: http://127.0.0.1/day08/code/01http/02post.html</span><br><span class=\"line\">接收压缩格式</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">接收的语言</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8</span><br><span class=\"line\">请求空行 [用来将请求头跟请求体进行一个区分，方便服务器解析数据]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>请求体[客户端发送到服务器的数据.]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username=dasfadsfdafs</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-get-跟post-的区别：\"><a href=\"#3-get-跟post-的区别：\" class=\"headerlink\" title=\"3.  get  跟post 的区别：\"></a>3.  get  跟post 的区别：</h3><ol>\n<li><p>get 提交请求的数据都在地址栏中，相对来不安全。</p>\n</li>\n<li><p>get 请求的数据都请求地址的后面，对请求的数据的大小由限制，限制大概1kb</p>\n</li>\n<li><p>get 没有请求体</p>\n</li>\n<li><p>ost 请求的数据在请求体当中，相对来说安全</p>\n</li>\n<li><p>ost 请求的数据大小没有限制。文件上传，这个必须是post 方式提交</p>\n</li>\n<li><p>ost 提交有一个特殊的请求头:<code>Content-Type:application/x-www-form-urlencoded</code><br>可以对请求的数据包含中文的数据进行编码.</p>\n</li>\n<li><p>get 的请求没有没有请求体，也会少一些请求头，所以它传递到服务端的数据要少一些。性能要高一些。</p>\n</li>\n</ol>\n<h3 id=\"4-服务器响应给客户端的数据也分为四个部分\"><a href=\"#4-服务器响应给客户端的数据也分为四个部分\" class=\"headerlink\" title=\"4.  服务器响应给客户端的数据也分为四个部分\"></a>4.  服务器响应给客户端的数据也分为四个部分</h3><ol>\n<li>响应首行</li>\n<li>响应头</li>\n<li>响应空行</li>\n<li>响应体</li>\n</ol>\n<h4 id=\"1-响应首行\"><a href=\"#1-响应首行\" class=\"headerlink\" title=\"1. 响应首行\"></a>1. 响应首行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">协议的版本</span><br><span class=\"line\">200 状态吗 代表ok</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure>\n<ul>\n<li>实际上我们开发的过程当中还有很多的状态吗<br>404 代表请求的资源没有找到，以后假设出现404<br>500 代表服务器内部错误<br>405 代表请求的方式不支持,如果我的一个php接收post 方式的数据 $_POST<br>然后你以get 方式去请求，就会出现405<br>304 请求的资源没有发生改变. 这个是用来做缓存用的.<br>当我第一次访问<a href=\"http://127.0.0.1/day08/code/01http/01get.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/day08/code/01http/01get.html</a><br>这个页面，服务器会给我一个响应头.<br>Last-Modified:Fri, 17 Feb 2017 01:33:19 GMT<br>告诉客户端浏览器，这个文件的最后修改时间.</li>\n</ul>\n<p>当我再次去访问<a href=\"http://127.0.0.1/day08/code/01http/01get.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/day08/code/01http/01get.html</a><br>会给服务器协议这样的一个请求头<br>If-Modified-Since:Fri, 17 Feb 2017 01:33:19 GMT<br>这个时候服务器就会给客户端一个304 的状态吗，你请求的这个资源<br><a href=\"http://127.0.0.1/day08/code/01http/01get.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/day08/code/01http/01get.html</a> 没有做任何的修改<br>客户端浏览器得到是304，它就会从本地去读取页面</p>\n<h4 id=\"2-响应头\"><a href=\"#2-响应头\" class=\"headerlink\" title=\"2.  响应头\"></a>2.  响应头</h4><p>告诉客户端服务器端的时间.<br>Date: Fri, 17 Feb 2017 01:35:58 GMT<br>告诉客户端服务器的版本<br>Server: Apache/2.2.21 (Win32) PHP/5.3.10<br>文件的最后修改时间<br>Last-Modified: Fri, 17 Feb 2017 01:33:19 GMT</p>\n<p>ETag: “7700000000217a-96-548afe60e947a”<br>Accept-Ranges: bytes<br>内容的长度<br>Content-Length: 150<br>//内容类型，告诉客户端浏览器，我给你返回的是一个文本，html 格式的文本,<br>客户端浏览器得到这个，就会以html 的方式去解析.<br>Content-Type: text/html;<br>header(“Content-Type:text/html;charset=utf-8”)</p>\n<h4 id=\"3-响应空行\"><a href=\"#3-响应空行\" class=\"headerlink\" title=\"3.  响应空行\"></a>3.  响应空行</h4><h4 id=\"4-响应体\"><a href=\"#4-响应体\" class=\"headerlink\" title=\"4.  响应体\"></a>4.  响应体</h4><p>客户端发送到服务器的时候有一个请求头叫做<br>User-Agent:告诉服务器客户端浏览器的版本，操作系统的版本.</p>\n<h4 id=\"5-响应的头，Refresh-的响应头\"><a href=\"#5-响应的头，Refresh-的响应头\" class=\"headerlink\" title=\"5.  响应的头，Refresh 的响应头\"></a>5.  响应的头，Refresh 的响应头</h4><p>服务器给客户端，如果客户端得到这个响应头，它会自动跳转页面.</p>\n<p>Referer 的头，告诉服务器，请求来自于那个页面.<br>    1:广告流量统计，统计到我的网站在那个网站上面打的广告更加有效果。</p>\n<pre><code>2：防盗链，bs 架构，我们可以看到后台的链接，一个连接对应一个资源。\n</code></pre><p> 互联网上创业，有些软件做功能，有些软件做内容。<br>     一个连接对应一个资源 ，视频行业，最砸钱，谁有视频的资源。视频的资源<br> 现在都要买版权，都要收费。</p>\n<pre><code>www.kuaibo.com ，进入到快播的一个页面，\n</code></pre><p> 快播视频播放，我就可以引入优酷上面的一个视频资源。<br>    这个时候会给优酷发送一个请求，就会优酷携带一个请求头<br>    Referer:www.kuaibo.com<br>    我在优酷的后台我就可以判断，如果你请求的Referer 的值不是来自于优酷自己的站点<br>我让你跳转优酷的首页，看看广告.</p>\n<pre><code>http 协议 里面面试的时候一些重点的东西：\n        1:get 跟post 的区别\n        2:请求的数据格式，\n                特殊的请求头\n                post 提交有一个特殊的请求头\n                Content-Type:&quot;application/-w-form-data&quot;\n        3:响应的数据格式。\n                你知道哪些常见的状态吗\n                200\n                404\n                405\n                500\n                304   请求的资源没有发生任何改变，浏览器从缓存里面去找\n                302   请求重定向\n\n                http://www.tieba.com\n\n                这个地址会给我一个302 的状态吗\n                它还会给以location 的地址\n\n                302\n                Location:http://tieba.baidu.com  //响应头：地址\n\n 你在请求开发的过程当成碰到什么乱码问题没有\n        1：客户端的数据发送到服务器，\n               1:如果说有中文，我们一般使用post 方式提交\n\n                //使用js 对魔兽.exe 进行编码. utf-8\n                //服务器根据这个去进行解码. 以utf-8 去解码\n               2:&lt;a href=&quot;adsfadsf.php?fileName=&quot;魔兽.exe&quot;&gt;问价下载 &lt;/a&gt;\n        2：服务器的数据响应给客户端。\n\n              1： 当前文件采用的是什么编码\n              2:  然后 给客户端一个响应头 Content-Type:text/html;charset=当前文件的编码\n</code></pre>","site":{"data":{}},"excerpt":"<h1 id=\"http-协议。\"><a href=\"#http-协议。\" class=\"headerlink\" title=\"http 协议。\"></a>http 协议。</h1><blockquote>\n<p>   协议就是约束，http协议是w3c制定的，用来约束客户端浏览器与web服务器进行通讯的数据格式,http 协议是基于请求，响应的协议。客户端浏览器给服务器发送一个请求，服务器给客户端一个响应</p>\n</blockquote>\n<h2 id=\"http协议的数据格式分为两部分\"><a href=\"#http协议的数据格式分为两部分\" class=\"headerlink\" title=\"http协议的数据格式分为两部分\"></a>http协议的数据格式分为两部分</h2><ul>\n<li>客户端发送到服务器的请求，称为请求的数据格式。</li>\n<li><p>服务器响应给客户端的数据，为响应的数据格式.</p>\n</li>\n<li><p>请求的数据格式，是客户端发送给服务器的，分为四个部分</p>\n<ol>\n<li>请求首行</li>\n<li>请求头</li>\n<li>请求空行</li>\n<li>请求体</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"1-get请求数据格式\"><a href=\"#1-get请求数据格式\" class=\"headerlink\" title=\"1.    get请求数据格式\"></a>1.    get请求数据格式</h3><ul>\n<li><p>请求首行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /day08/code/01http/01get.html HTTP/1.1</span><br><span class=\"line\">[GET 告诉服务器提交方式]</span><br><span class=\"line\">[/day08/code/01http/01get.html 告诉服务器，我要去请求的资源的地址]</span><br><span class=\"line\">[HTTP/1.1 协议的版本] 有两个版本，</span><br><span class=\"line\">1.0</span><br><span class=\"line\">1.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>请求头 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host\t127.0.0.1\t【请求头的名称，请求头的值】</span><br><span class=\"line\">Cache-Control\tmax-age=0\t这个做缓存控制的.</span><br><span class=\"line\">Upgrade-Insecure-Requests\t1   没有用过.</span><br><span class=\"line\">User-Agent\tMozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36 \t这个是告诉服务器，我客户端浏览器的版本，操作系统的版本</span><br><span class=\"line\">Accept\ttext/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\t接收，告诉服务器，我客户端可以接收那些数据格式.</span><br><span class=\"line\">Referer\thttp://127.0.0.1/day08/code/01http/</span><br><span class=\"line\">Accept-Encoding\tgzip, deflate, sdch   接收的压缩格式. gzip</span><br><span class=\"line\">Accept-Language\tzh-CN,zh;q=0.8\t\t接收的语言</span><br><span class=\"line\">If-None-Match\t&quot;7700000000217a-96-548afe60e947a&quot;</span><br><span class=\"line\">If-Modified-Since\tFri, 17 Feb 2017 01:33:19 GMT</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-post-请求的数据格式的介绍\"><a href=\"#2-post-请求的数据格式的介绍\" class=\"headerlink\" title=\"2.    post 请求的数据格式的介绍\"></a>2.    post 请求的数据格式的介绍</h3><ul>\n<li>请求首行<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /day08/code/01http/02post.php HTTP/1.1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>请求头</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host: 127.0.0.1</span><br><span class=\"line\">内容长度，指的 请求体的长度</span><br><span class=\"line\">Content-Length: 21</span><br><span class=\"line\">缓存的</span><br><span class=\"line\">Cache-Control: max-age=0</span><br><span class=\"line\">请求的站点的主域名</span><br><span class=\"line\">Origin: http://127.0.0.1</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">告诉服务器客户端浏览器的版本，操作系统的版本.</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36</span><br><span class=\"line\">//这个是post 提交独有第一个请求头，如果发送到服务器的数据有中文，会吧中文进行编码</span><br><span class=\"line\">在发送给服务器，服务器得到数据会自动解码.</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">//接收的数据格式</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class=\"line\">告诉服务器，请求来自于那个页面</span><br><span class=\"line\">Referer: http://127.0.0.1/day08/code/01http/02post.html</span><br><span class=\"line\">接收压缩格式</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">接收的语言</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8</span><br><span class=\"line\">请求空行 [用来将请求头跟请求体进行一个区分，方便服务器解析数据]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>请求体[客户端发送到服务器的数据.]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username=dasfadsfdafs</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-get-跟post-的区别：\"><a href=\"#3-get-跟post-的区别：\" class=\"headerlink\" title=\"3.  get  跟post 的区别：\"></a>3.  get  跟post 的区别：</h3><ol>\n<li><p>get 提交请求的数据都在地址栏中，相对来不安全。</p>\n</li>\n<li><p>get 请求的数据都请求地址的后面，对请求的数据的大小由限制，限制大概1kb</p>\n</li>\n<li><p>get 没有请求体</p>\n</li>\n<li><p>ost 请求的数据在请求体当中，相对来说安全</p>\n</li>\n<li><p>ost 请求的数据大小没有限制。文件上传，这个必须是post 方式提交</p>\n</li>\n<li><p>ost 提交有一个特殊的请求头:<code>Content-Type:application/x-www-form-urlencoded</code><br>可以对请求的数据包含中文的数据进行编码.</p>\n</li>\n<li><p>get 的请求没有没有请求体，也会少一些请求头，所以它传递到服务端的数据要少一些。性能要高一些。</p>\n</li>\n</ol>\n<h3 id=\"4-服务器响应给客户端的数据也分为四个部分\"><a href=\"#4-服务器响应给客户端的数据也分为四个部分\" class=\"headerlink\" title=\"4.  服务器响应给客户端的数据也分为四个部分\"></a>4.  服务器响应给客户端的数据也分为四个部分</h3><ol>\n<li>响应首行</li>\n<li>响应头</li>\n<li>响应空行</li>\n<li>响应体</li>\n</ol>\n<h4 id=\"1-响应首行\"><a href=\"#1-响应首行\" class=\"headerlink\" title=\"1. 响应首行\"></a>1. 响应首行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">协议的版本</span><br><span class=\"line\">200 状态吗 代表ok</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure>\n<ul>\n<li>实际上我们开发的过程当中还有很多的状态吗<br>404 代表请求的资源没有找到，以后假设出现404<br>500 代表服务器内部错误<br>405 代表请求的方式不支持,如果我的一个php接收post 方式的数据 $_POST<br>然后你以get 方式去请求，就会出现405<br>304 请求的资源没有发生改变. 这个是用来做缓存用的.<br>当我第一次访问<a href=\"http://127.0.0.1/day08/code/01http/01get.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/day08/code/01http/01get.html</a><br>这个页面，服务器会给我一个响应头.<br>Last-Modified:Fri, 17 Feb 2017 01:33:19 GMT<br>告诉客户端浏览器，这个文件的最后修改时间.</li>\n</ul>\n<p>当我再次去访问<a href=\"http://127.0.0.1/day08/code/01http/01get.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/day08/code/01http/01get.html</a><br>会给服务器协议这样的一个请求头<br>If-Modified-Since:Fri, 17 Feb 2017 01:33:19 GMT<br>这个时候服务器就会给客户端一个304 的状态吗，你请求的这个资源<br><a href=\"http://127.0.0.1/day08/code/01http/01get.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/day08/code/01http/01get.html</a> 没有做任何的修改<br>客户端浏览器得到是304，它就会从本地去读取页面</p>\n<h4 id=\"2-响应头\"><a href=\"#2-响应头\" class=\"headerlink\" title=\"2.  响应头\"></a>2.  响应头</h4><p>告诉客户端服务器端的时间.<br>Date: Fri, 17 Feb 2017 01:35:58 GMT<br>告诉客户端服务器的版本<br>Server: Apache/2.2.21 (Win32) PHP/5.3.10<br>文件的最后修改时间<br>Last-Modified: Fri, 17 Feb 2017 01:33:19 GMT</p>\n<p>ETag: “7700000000217a-96-548afe60e947a”<br>Accept-Ranges: bytes<br>内容的长度<br>Content-Length: 150<br>//内容类型，告诉客户端浏览器，我给你返回的是一个文本，html 格式的文本,<br>客户端浏览器得到这个，就会以html 的方式去解析.<br>Content-Type: text/html;<br>header(“Content-Type:text/html;charset=utf-8”)</p>\n<h4 id=\"3-响应空行\"><a href=\"#3-响应空行\" class=\"headerlink\" title=\"3.  响应空行\"></a>3.  响应空行</h4><h4 id=\"4-响应体\"><a href=\"#4-响应体\" class=\"headerlink\" title=\"4.  响应体\"></a>4.  响应体</h4><p>客户端发送到服务器的时候有一个请求头叫做<br>User-Agent:告诉服务器客户端浏览器的版本，操作系统的版本.</p>\n<h4 id=\"5-响应的头，Refresh-的响应头\"><a href=\"#5-响应的头，Refresh-的响应头\" class=\"headerlink\" title=\"5.  响应的头，Refresh 的响应头\"></a>5.  响应的头，Refresh 的响应头</h4><p>服务器给客户端，如果客户端得到这个响应头，它会自动跳转页面.</p>\n<p>Referer 的头，告诉服务器，请求来自于那个页面.<br>    1:广告流量统计，统计到我的网站在那个网站上面打的广告更加有效果。</p>\n<pre><code>2：防盗链，bs 架构，我们可以看到后台的链接，一个连接对应一个资源。\n</code></pre><p> 互联网上创业，有些软件做功能，有些软件做内容。<br>     一个连接对应一个资源 ，视频行业，最砸钱，谁有视频的资源。视频的资源<br> 现在都要买版权，都要收费。</p>\n<pre><code>www.kuaibo.com ，进入到快播的一个页面，\n</code></pre><p> 快播视频播放，我就可以引入优酷上面的一个视频资源。<br>    这个时候会给优酷发送一个请求，就会优酷携带一个请求头<br>    Referer:www.kuaibo.com<br>    我在优酷的后台我就可以判断，如果你请求的Referer 的值不是来自于优酷自己的站点<br>我让你跳转优酷的首页，看看广告.</p>\n<pre><code>http 协议 里面面试的时候一些重点的东西：\n        1:get 跟post 的区别\n        2:请求的数据格式，\n                特殊的请求头\n                post 提交有一个特殊的请求头\n                Content-Type:&quot;application/-w-form-data&quot;\n        3:响应的数据格式。\n                你知道哪些常见的状态吗\n                200\n                404\n                405\n                500\n                304   请求的资源没有发生任何改变，浏览器从缓存里面去找\n                302   请求重定向\n\n                http://www.tieba.com\n\n                这个地址会给我一个302 的状态吗\n                它还会给以location 的地址\n\n                302\n                Location:http://tieba.baidu.com  //响应头：地址\n\n 你在请求开发的过程当成碰到什么乱码问题没有\n        1：客户端的数据发送到服务器，\n               1:如果说有中文，我们一般使用post 方式提交\n\n                //使用js 对魔兽.exe 进行编码. utf-8\n                //服务器根据这个去进行解码. 以utf-8 去解码\n               2:&lt;a href=&quot;adsfadsf.php?fileName=&quot;魔兽.exe&quot;&gt;问价下载 &lt;/a&gt;\n        2：服务器的数据响应给客户端。\n\n              1： 当前文件采用的是什么编码\n              2:  然后 给客户端一个响应头 Content-Type:text/html;charset=当前文件的编码\n</code></pre>"},{"title":"AngularJS系列之模块化介绍","date":"2016-07-20T05:07:39.000Z","_content":"## 模块化介绍\n\n* 通过AngularJS构建应用时，是以模块化的方式组织的，即将整个应用划分成若干个模块，每个模块都各有其职责，最终组合成一个整体。\n* 采用模块化的组织方式，可以最大程度的实现代码的复用，可以像搭积木一样进行开发。\n\n## 定义应用\n\n* 通过为任一HTML标签添加ng-app属性，可以指定一个应用，表示此标签所包裹的内容都属于应用的一部分。\n\n  ```angular2html\n  <!--为html标签添加ng-app表明整个文档都是应用-->\n  <!--ng-app属性可以不赋值，但是要关联相应模块时则必须赋值-->\n  <html lang=\"zh-CN\" ng-app=\"App\"></html>\n  ```\n## 定义模块\n\n* AngularJS提供了一个全局对象angular，在此全局对象下存在若干方法，其中angular.module()方法用来定义一个模块。\n  \n  ```javascript\n  //通过module方法定义模块\n  //需要传递两个参数，第一个表示模块的名字，\n  // 第二个表示此模块依赖的其它模块\n  var app = angular.module(\"app\",[]);\n  ```\n  注：应用本质也是一个模块（一个比较大的模块）；\n  \n## 定义控制器\n\n<!-- more -->\n* 控制器（Controller）作为连接模型（model）和视图（view）的桥梁存在，所以当我们定义好了控制器以后，也就定义好了模型和视图。\n\n  ```javascript\n  //app是一个模型实例对象\n  //通过这个实例对象定义控制器，需要两个参数\n  //第一个参数表示控制器名称，\n  //第二个参数是一个数组，这个数组除最后一个单元是函数外，其余都是字符串，标明此控制器的依赖关系\n  app.controller('studentController',['$scope',function($scope) {\n    //模型（model）\n    $scope = [\n      {name: \"李白\", sex: '男', age: \"23\"},\n      {name: '华仔', sex: '男', age: '34'}\n    ]\n  }])\n  ```\n  \n* 模型数据时要展示到视图上的，所以需要将控制器关联到视图上，通过为HTML标签添加ng-controller属性并赋值相应的控制器的名称，就确立了关联关系，\n\n  ```html\n  <!--添加ng-controller属性，并赋值为相应的控制器名称-->\n   <table ng-controller=\"StudentController\">\n   <tr>\n   <th>姓名</th>\n   <th>性别</th>\n   <th>年龄</th>\n   </tr>\n   <tr ng-repeat=\"student in students\">\n   <td>{{student.name}}</td>\n   <td>{{student.sex}}</td>\n   <td>{{student.age}}</td>\n   </tr>\n  </table>\n  ```\n\n* 以上为AngularJS最基本的MVC工作模式。","source":"_posts/AngularJS系列之模块化介绍.md","raw":"---\ntitle: AngularJS系列之模块化介绍\ndate: 2016-07-20 13:07:39\ntags:\n---\n## 模块化介绍\n\n* 通过AngularJS构建应用时，是以模块化的方式组织的，即将整个应用划分成若干个模块，每个模块都各有其职责，最终组合成一个整体。\n* 采用模块化的组织方式，可以最大程度的实现代码的复用，可以像搭积木一样进行开发。\n\n## 定义应用\n\n* 通过为任一HTML标签添加ng-app属性，可以指定一个应用，表示此标签所包裹的内容都属于应用的一部分。\n\n  ```angular2html\n  <!--为html标签添加ng-app表明整个文档都是应用-->\n  <!--ng-app属性可以不赋值，但是要关联相应模块时则必须赋值-->\n  <html lang=\"zh-CN\" ng-app=\"App\"></html>\n  ```\n## 定义模块\n\n* AngularJS提供了一个全局对象angular，在此全局对象下存在若干方法，其中angular.module()方法用来定义一个模块。\n  \n  ```javascript\n  //通过module方法定义模块\n  //需要传递两个参数，第一个表示模块的名字，\n  // 第二个表示此模块依赖的其它模块\n  var app = angular.module(\"app\",[]);\n  ```\n  注：应用本质也是一个模块（一个比较大的模块）；\n  \n## 定义控制器\n\n<!-- more -->\n* 控制器（Controller）作为连接模型（model）和视图（view）的桥梁存在，所以当我们定义好了控制器以后，也就定义好了模型和视图。\n\n  ```javascript\n  //app是一个模型实例对象\n  //通过这个实例对象定义控制器，需要两个参数\n  //第一个参数表示控制器名称，\n  //第二个参数是一个数组，这个数组除最后一个单元是函数外，其余都是字符串，标明此控制器的依赖关系\n  app.controller('studentController',['$scope',function($scope) {\n    //模型（model）\n    $scope = [\n      {name: \"李白\", sex: '男', age: \"23\"},\n      {name: '华仔', sex: '男', age: '34'}\n    ]\n  }])\n  ```\n  \n* 模型数据时要展示到视图上的，所以需要将控制器关联到视图上，通过为HTML标签添加ng-controller属性并赋值相应的控制器的名称，就确立了关联关系，\n\n  ```html\n  <!--添加ng-controller属性，并赋值为相应的控制器名称-->\n   <table ng-controller=\"StudentController\">\n   <tr>\n   <th>姓名</th>\n   <th>性别</th>\n   <th>年龄</th>\n   </tr>\n   <tr ng-repeat=\"student in students\">\n   <td>{{student.name}}</td>\n   <td>{{student.sex}}</td>\n   <td>{{student.age}}</td>\n   </tr>\n  </table>\n  ```\n\n* 以上为AngularJS最基本的MVC工作模式。","slug":"AngularJS系列之模块化介绍","published":1,"updated":"2018-01-31T12:39:09.799Z","_id":"cjd30vw210006581i8g3n99xj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"模块化介绍\"><a href=\"#模块化介绍\" class=\"headerlink\" title=\"模块化介绍\"></a>模块化介绍</h2><ul>\n<li>通过AngularJS构建应用时，是以模块化的方式组织的，即将整个应用划分成若干个模块，每个模块都各有其职责，最终组合成一个整体。</li>\n<li>采用模块化的组织方式，可以最大程度的实现代码的复用，可以像搭积木一样进行开发。</li>\n</ul>\n<h2 id=\"定义应用\"><a href=\"#定义应用\" class=\"headerlink\" title=\"定义应用\"></a>定义应用</h2><ul>\n<li><p>通过为任一HTML标签添加ng-app属性，可以指定一个应用，表示此标签所包裹的内容都属于应用的一部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--为html标签添加ng-app表明整个文档都是应用--&gt;</span><br><span class=\"line\">&lt;!--ng-app属性可以不赋值，但是要关联相应模块时则必须赋值--&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh-CN&quot; ng-app=&quot;App&quot;&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"定义模块\"><a href=\"#定义模块\" class=\"headerlink\" title=\"定义模块\"></a>定义模块</h2><ul>\n<li><p>AngularJS提供了一个全局对象angular，在此全局对象下存在若干方法，其中angular.module()方法用来定义一个模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过module方法定义模块</span></span><br><span class=\"line\"><span class=\"comment\">//需要传递两个参数，第一个表示模块的名字，</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个表示此模块依赖的其它模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">\"app\"</span>,[]);</span><br></pre></td></tr></table></figure>\n<p>注：应用本质也是一个模块（一个比较大的模块）；</p>\n</li>\n</ul>\n<h2 id=\"定义控制器\"><a href=\"#定义控制器\" class=\"headerlink\" title=\"定义控制器\"></a>定义控制器</h2><a id=\"more\"></a>\n<ul>\n<li><p>控制器（Controller）作为连接模型（model）和视图（view）的桥梁存在，所以当我们定义好了控制器以后，也就定义好了模型和视图。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//app是一个模型实例对象</span></span><br><span class=\"line\"><span class=\"comment\">//通过这个实例对象定义控制器，需要两个参数</span></span><br><span class=\"line\"><span class=\"comment\">//第一个参数表示控制器名称，</span></span><br><span class=\"line\"><span class=\"comment\">//第二个参数是一个数组，这个数组除最后一个单元是函数外，其余都是字符串，标明此控制器的依赖关系</span></span><br><span class=\"line\">app.controller(<span class=\"string\">'studentController'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//模型（model）</span></span><br><span class=\"line\">  $scope = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"李白\"</span>, <span class=\"attr\">sex</span>: <span class=\"string\">'男'</span>, <span class=\"attr\">age</span>: <span class=\"string\">\"23\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">'华仔'</span>, <span class=\"attr\">sex</span>: <span class=\"string\">'男'</span>, <span class=\"attr\">age</span>: <span class=\"string\">'34'</span>&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>模型数据时要展示到视图上的，所以需要将控制器关联到视图上，通过为HTML标签添加ng-controller属性并赋值相应的控制器的名称，就确立了关联关系，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--添加ng-controller属性，并赋值为相应的控制器名称--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"StudentController\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>性别<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>年龄<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"student in students\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;student.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;student.sex&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;student.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以上为AngularJS最基本的MVC工作模式。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"模块化介绍\"><a href=\"#模块化介绍\" class=\"headerlink\" title=\"模块化介绍\"></a>模块化介绍</h2><ul>\n<li>通过AngularJS构建应用时，是以模块化的方式组织的，即将整个应用划分成若干个模块，每个模块都各有其职责，最终组合成一个整体。</li>\n<li>采用模块化的组织方式，可以最大程度的实现代码的复用，可以像搭积木一样进行开发。</li>\n</ul>\n<h2 id=\"定义应用\"><a href=\"#定义应用\" class=\"headerlink\" title=\"定义应用\"></a>定义应用</h2><ul>\n<li><p>通过为任一HTML标签添加ng-app属性，可以指定一个应用，表示此标签所包裹的内容都属于应用的一部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--为html标签添加ng-app表明整个文档都是应用--&gt;</span><br><span class=\"line\">&lt;!--ng-app属性可以不赋值，但是要关联相应模块时则必须赋值--&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh-CN&quot; ng-app=&quot;App&quot;&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"定义模块\"><a href=\"#定义模块\" class=\"headerlink\" title=\"定义模块\"></a>定义模块</h2><ul>\n<li><p>AngularJS提供了一个全局对象angular，在此全局对象下存在若干方法，其中angular.module()方法用来定义一个模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过module方法定义模块</span></span><br><span class=\"line\"><span class=\"comment\">//需要传递两个参数，第一个表示模块的名字，</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个表示此模块依赖的其它模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">\"app\"</span>,[]);</span><br></pre></td></tr></table></figure>\n<p>注：应用本质也是一个模块（一个比较大的模块）；</p>\n</li>\n</ul>\n<h2 id=\"定义控制器\"><a href=\"#定义控制器\" class=\"headerlink\" title=\"定义控制器\"></a>定义控制器</h2>","more":"<ul>\n<li><p>控制器（Controller）作为连接模型（model）和视图（view）的桥梁存在，所以当我们定义好了控制器以后，也就定义好了模型和视图。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//app是一个模型实例对象</span></span><br><span class=\"line\"><span class=\"comment\">//通过这个实例对象定义控制器，需要两个参数</span></span><br><span class=\"line\"><span class=\"comment\">//第一个参数表示控制器名称，</span></span><br><span class=\"line\"><span class=\"comment\">//第二个参数是一个数组，这个数组除最后一个单元是函数外，其余都是字符串，标明此控制器的依赖关系</span></span><br><span class=\"line\">app.controller(<span class=\"string\">'studentController'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//模型（model）</span></span><br><span class=\"line\">  $scope = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"李白\"</span>, <span class=\"attr\">sex</span>: <span class=\"string\">'男'</span>, <span class=\"attr\">age</span>: <span class=\"string\">\"23\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">'华仔'</span>, <span class=\"attr\">sex</span>: <span class=\"string\">'男'</span>, <span class=\"attr\">age</span>: <span class=\"string\">'34'</span>&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>模型数据时要展示到视图上的，所以需要将控制器关联到视图上，通过为HTML标签添加ng-controller属性并赋值相应的控制器的名称，就确立了关联关系，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--添加ng-controller属性，并赋值为相应的控制器名称--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"StudentController\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>性别<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>年龄<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"student in students\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;student.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;student.sex&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;student.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以上为AngularJS最基本的MVC工作模式。</p>\n</li>\n</ul>"},{"title":"AngularJS系列之简单介绍","date":"2016-07-11T04:45:49.000Z","_content":"AngularJS是Google公司开发维护的MVC前端框架；客服了HTMl在构建应用上的不足，降低了开发成本。\n## 特点\n\n* jQuery更准确的说只是一个类库（类库指的是一系列函数的集合）以DOM作为驱动（核心），而AngularJS则是一个框架（诸多类库的集合）以数据和逻辑作为驱动（核心）。\n* 框架对开发流程和模式做了约束，开发者遵照约束进行开发，更注重的实际的业务逻辑。\n* AngularJS有诸多特性，最为核心的就是：模块化，双向数据绑定，语义化标签，依赖注入等。\n* 类似的框架的还有 BackBone，KnockoutJS，vue，Rect等，\n\n## MVC\n\n<!-- more -->\n* MVC是一种开发模式，有模型（Model），视图（View），控制器（Controller），三部分组成，采用这种开发模式为合理组织代码提供了方便，降低了代码间的耦合度，功能结构清晰可见。\n1. 模型（Model）：一般用来处理数据（读取/设置），具体指操作数据库，\n2. 视图（View）：一般用来展示数据，比如通过HTML展示，\n3. 控制器（Controller）：一般用作连接模型和属兔的桥梁。\n\n* MVC被引入到前端开发中，由于受到技术的限制，便有了 一些细节的调整，于是出现了MVC的衍生版（子集）如：MVVM，MVW，MVP，MV*等；","source":"_posts/AngularJS介绍.md","raw":"---\ntitle: AngularJS系列之简单介绍\ndate: 2016-07-11 12:45:49\ntags: [Angular,JS]\n---\nAngularJS是Google公司开发维护的MVC前端框架；客服了HTMl在构建应用上的不足，降低了开发成本。\n## 特点\n\n* jQuery更准确的说只是一个类库（类库指的是一系列函数的集合）以DOM作为驱动（核心），而AngularJS则是一个框架（诸多类库的集合）以数据和逻辑作为驱动（核心）。\n* 框架对开发流程和模式做了约束，开发者遵照约束进行开发，更注重的实际的业务逻辑。\n* AngularJS有诸多特性，最为核心的就是：模块化，双向数据绑定，语义化标签，依赖注入等。\n* 类似的框架的还有 BackBone，KnockoutJS，vue，Rect等，\n\n## MVC\n\n<!-- more -->\n* MVC是一种开发模式，有模型（Model），视图（View），控制器（Controller），三部分组成，采用这种开发模式为合理组织代码提供了方便，降低了代码间的耦合度，功能结构清晰可见。\n1. 模型（Model）：一般用来处理数据（读取/设置），具体指操作数据库，\n2. 视图（View）：一般用来展示数据，比如通过HTML展示，\n3. 控制器（Controller）：一般用作连接模型和属兔的桥梁。\n\n* MVC被引入到前端开发中，由于受到技术的限制，便有了 一些细节的调整，于是出现了MVC的衍生版（子集）如：MVVM，MVW，MVP，MV*等；","slug":"AngularJS介绍","published":1,"updated":"2018-01-31T12:39:09.799Z","_id":"cjd30vw2r0007581ig4lo0w1i","comments":1,"layout":"post","photos":[],"link":"","content":"<p>AngularJS是Google公司开发维护的MVC前端框架；客服了HTMl在构建应用上的不足，降低了开发成本。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>jQuery更准确的说只是一个类库（类库指的是一系列函数的集合）以DOM作为驱动（核心），而AngularJS则是一个框架（诸多类库的集合）以数据和逻辑作为驱动（核心）。</li>\n<li>框架对开发流程和模式做了约束，开发者遵照约束进行开发，更注重的实际的业务逻辑。</li>\n<li>AngularJS有诸多特性，最为核心的就是：模块化，双向数据绑定，语义化标签，依赖注入等。</li>\n<li>类似的框架的还有 BackBone，KnockoutJS，vue，Rect等，</li>\n</ul>\n<h2 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h2><a id=\"more\"></a>\n<ul>\n<li>MVC是一种开发模式，有模型（Model），视图（View），控制器（Controller），三部分组成，采用这种开发模式为合理组织代码提供了方便，降低了代码间的耦合度，功能结构清晰可见。</li>\n</ul>\n<ol>\n<li>模型（Model）：一般用来处理数据（读取/设置），具体指操作数据库，</li>\n<li>视图（View）：一般用来展示数据，比如通过HTML展示，</li>\n<li>控制器（Controller）：一般用作连接模型和属兔的桥梁。</li>\n</ol>\n<ul>\n<li>MVC被引入到前端开发中，由于受到技术的限制，便有了 一些细节的调整，于是出现了MVC的衍生版（子集）如：MVVM，MVW，MVP，MV*等；</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>AngularJS是Google公司开发维护的MVC前端框架；客服了HTMl在构建应用上的不足，降低了开发成本。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>jQuery更准确的说只是一个类库（类库指的是一系列函数的集合）以DOM作为驱动（核心），而AngularJS则是一个框架（诸多类库的集合）以数据和逻辑作为驱动（核心）。</li>\n<li>框架对开发流程和模式做了约束，开发者遵照约束进行开发，更注重的实际的业务逻辑。</li>\n<li>AngularJS有诸多特性，最为核心的就是：模块化，双向数据绑定，语义化标签，依赖注入等。</li>\n<li>类似的框架的还有 BackBone，KnockoutJS，vue，Rect等，</li>\n</ul>\n<h2 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h2>","more":"<ul>\n<li>MVC是一种开发模式，有模型（Model），视图（View），控制器（Controller），三部分组成，采用这种开发模式为合理组织代码提供了方便，降低了代码间的耦合度，功能结构清晰可见。</li>\n</ul>\n<ol>\n<li>模型（Model）：一般用来处理数据（读取/设置），具体指操作数据库，</li>\n<li>视图（View）：一般用来展示数据，比如通过HTML展示，</li>\n<li>控制器（Controller）：一般用作连接模型和属兔的桥梁。</li>\n</ol>\n<ul>\n<li>MVC被引入到前端开发中，由于受到技术的限制，便有了 一些细节的调整，于是出现了MVC的衍生版（子集）如：MVVM，MVW，MVP，MV*等；</li>\n</ul>"},{"title":"MongoDB数据库配合NodeJS简单使用","date":"2017-01-09T11:11:15.000Z","_content":"\n\n\n\n\n## 关于 MongoDB\n\n>   我们一般把数据库分为关系型数据库和非关系型数据库，MongoDB就是属于非关系型数据库的一种。\n\n- 官网：https://www.mongodb.com/\n- 下载地址：https://www.mongodb.com/download-center?jmp=nav\n\n## 环境安装\n- https://www.smartftp.com/support/kb/the-program-cant-start-because-api-ms-win-crt-runtime-l1-1-0dll-is-missing-f2702.html?lang=zh-CN\n- http://stackoverflow.com/questions/33265663/api-ms-win-crt-runtime-l1-1-0-dll-is-missing-when-opening-microsoft-office-file\n\n\n## 启动和关闭 MongoDB 数据库服务程序\nmongod.exe 是我们要启动的服务器文件\nmongo的客户端去连我们的服务器\n- 打开终端，输入 `mongod` 回车\n  + `mongod` 命令用来启动 MongoDB 数据服务\n  + MongoDB 服务默认将 C:/data/db 目录作为数据目录\n  + 所以你需要先在 C:/ 根目录新建一个目录：C:/data/db\n  + 当你执行 mongod 命令的时候，默认会去使用 c:/data/db 目录作为数据存储目录\n  + 如果你不想使用 c:/data/db 目录\n  + mongod --dbpath=路径\n\n- 32位操作系统启动 MongoDB\n  + http://jingyan.baidu.com/article/76a7e409e1bb49fc3b6e1516.html\n  + `mongod --dbpath 数据存储路径 --journal --storageEngine=mmapv1`\n  mongod --dbpath C:/data/db --journal --storageEngine=mmapv1`\n\n<!-- more -->\n\n## 基础概念\n\n### 数据库\n\n1. 什么是数据？\n\n\n> 数据是信息的表现形式和载体，可以是符号、文字、数字、语音、图像、视频等。通俗一点，数据就是信息，例如，个人信息、账户信息、家庭信息、企业信息、财务信息等等。\n\n\n2. 什么是数据库（Database，DB）？\n\n>  数据库是按照数据结构来组织、存储和管理数据的仓库。\n\n\n3. 为什么要使用数据库？\n\n>    我们需要使用数据库来存储我们网站的数据，然后通过增删改查进行数据交互，数据库，为我们提供了存储数据的仓库。\n\n4. 什么是数据库管理系统（DataBase Management System，DBMS）？\n\n>  数据库管理系统（DataBase Management System，DBMS）是为管理数据库而设计的大型电脑软件管理系统.例如，Oracle、Microsoft SQL Server、Access、MySQL、PostgreSQL、db2等等.我们可以简称这些数据库管理系统为数据库，虽然这种叫法不是很严谨，但是一般人都听的懂。\n\n5. 数据库的分类\n\n- 关系型数据库 sql语言\n\n> 关系数据库管理系统(Relational Database Management System)，\n是将数据组织为相关的行和列的系统，而管理关系数据库的计算机软件就是关系数据库管理系统，常用的数据库软件有Oracle、SQL Server、MySQL等。\n\n- 非关系型数据库 nosql\n  + 内存数据库 redis\n  + 面向文档数据库 mongodb\n\n\n\n##  文档 document\n\n> 文档是MongoDB中最基本的单元，里边包含多个键值对。\n\n```json\n{name:\"zhangsan\",age:12}\n{name:\"lisi\"}\n```\n\n##  集合 collection\n\n> 集合就是一组文档，特点是动态模式，集合中每一个文档都有可能不一样。但是在实际开发中，最好我们保存一样格式的文档。\n\n\n##  常用指令\n\n####  1.  列出所有的数据库\n\n```bash\nshow dbs\n```\n\n####  2.  进入或者新建数据库user\n\n```bash\nuse user\n//如果已经有了user数据库，就会进入user数据库\n//如果没有user数据库，就会自动新建数据库，如果数据库中没有任何文档，则用show dbs不会显示该仓库\n```\n\n####  3.  新建文档\n\n```bash\ndb.user.insert({name:\"wang\"})\n//在user集合中添加一条文档数据\n```\n\n####  4.  查看user集合中的文档\n\n```bash\ndb.user.find()\n\n```\n\n####    5.  更新文档内容\n\n```bash\ndb.user.update({name:\"wang\"},{$set:{name:\"ang\"}})\n```\n\n####    6.  删除文档\n\n```bash\ndb.user.remove({name:\"wang\"})\n//如果不传入参数，则会直接删除集合\n```\n\n### 7.  删除数据库\n\n```bash\nuse user\ndb.dropDatabase()\n```\n\n##  js链接MongoDb\n\n>  mongodb包提供的方法api和monggodb的命令基本一样，我们可以在nodejs中使用mongodb数据库进行增删改查操作。\n\n- api地址：http://mongodb.github.io/node-mongodb-native/2.2/api","source":"_posts/MongoDB简单学习.md","raw":"---\ntitle: MongoDB数据库配合NodeJS简单使用\ntags: [MongoDB,NodeJS]\ndate: 2017-01-09 19:11:15\n---\n\n\n\n\n\n## 关于 MongoDB\n\n>   我们一般把数据库分为关系型数据库和非关系型数据库，MongoDB就是属于非关系型数据库的一种。\n\n- 官网：https://www.mongodb.com/\n- 下载地址：https://www.mongodb.com/download-center?jmp=nav\n\n## 环境安装\n- https://www.smartftp.com/support/kb/the-program-cant-start-because-api-ms-win-crt-runtime-l1-1-0dll-is-missing-f2702.html?lang=zh-CN\n- http://stackoverflow.com/questions/33265663/api-ms-win-crt-runtime-l1-1-0-dll-is-missing-when-opening-microsoft-office-file\n\n\n## 启动和关闭 MongoDB 数据库服务程序\nmongod.exe 是我们要启动的服务器文件\nmongo的客户端去连我们的服务器\n- 打开终端，输入 `mongod` 回车\n  + `mongod` 命令用来启动 MongoDB 数据服务\n  + MongoDB 服务默认将 C:/data/db 目录作为数据目录\n  + 所以你需要先在 C:/ 根目录新建一个目录：C:/data/db\n  + 当你执行 mongod 命令的时候，默认会去使用 c:/data/db 目录作为数据存储目录\n  + 如果你不想使用 c:/data/db 目录\n  + mongod --dbpath=路径\n\n- 32位操作系统启动 MongoDB\n  + http://jingyan.baidu.com/article/76a7e409e1bb49fc3b6e1516.html\n  + `mongod --dbpath 数据存储路径 --journal --storageEngine=mmapv1`\n  mongod --dbpath C:/data/db --journal --storageEngine=mmapv1`\n\n<!-- more -->\n\n## 基础概念\n\n### 数据库\n\n1. 什么是数据？\n\n\n> 数据是信息的表现形式和载体，可以是符号、文字、数字、语音、图像、视频等。通俗一点，数据就是信息，例如，个人信息、账户信息、家庭信息、企业信息、财务信息等等。\n\n\n2. 什么是数据库（Database，DB）？\n\n>  数据库是按照数据结构来组织、存储和管理数据的仓库。\n\n\n3. 为什么要使用数据库？\n\n>    我们需要使用数据库来存储我们网站的数据，然后通过增删改查进行数据交互，数据库，为我们提供了存储数据的仓库。\n\n4. 什么是数据库管理系统（DataBase Management System，DBMS）？\n\n>  数据库管理系统（DataBase Management System，DBMS）是为管理数据库而设计的大型电脑软件管理系统.例如，Oracle、Microsoft SQL Server、Access、MySQL、PostgreSQL、db2等等.我们可以简称这些数据库管理系统为数据库，虽然这种叫法不是很严谨，但是一般人都听的懂。\n\n5. 数据库的分类\n\n- 关系型数据库 sql语言\n\n> 关系数据库管理系统(Relational Database Management System)，\n是将数据组织为相关的行和列的系统，而管理关系数据库的计算机软件就是关系数据库管理系统，常用的数据库软件有Oracle、SQL Server、MySQL等。\n\n- 非关系型数据库 nosql\n  + 内存数据库 redis\n  + 面向文档数据库 mongodb\n\n\n\n##  文档 document\n\n> 文档是MongoDB中最基本的单元，里边包含多个键值对。\n\n```json\n{name:\"zhangsan\",age:12}\n{name:\"lisi\"}\n```\n\n##  集合 collection\n\n> 集合就是一组文档，特点是动态模式，集合中每一个文档都有可能不一样。但是在实际开发中，最好我们保存一样格式的文档。\n\n\n##  常用指令\n\n####  1.  列出所有的数据库\n\n```bash\nshow dbs\n```\n\n####  2.  进入或者新建数据库user\n\n```bash\nuse user\n//如果已经有了user数据库，就会进入user数据库\n//如果没有user数据库，就会自动新建数据库，如果数据库中没有任何文档，则用show dbs不会显示该仓库\n```\n\n####  3.  新建文档\n\n```bash\ndb.user.insert({name:\"wang\"})\n//在user集合中添加一条文档数据\n```\n\n####  4.  查看user集合中的文档\n\n```bash\ndb.user.find()\n\n```\n\n####    5.  更新文档内容\n\n```bash\ndb.user.update({name:\"wang\"},{$set:{name:\"ang\"}})\n```\n\n####    6.  删除文档\n\n```bash\ndb.user.remove({name:\"wang\"})\n//如果不传入参数，则会直接删除集合\n```\n\n### 7.  删除数据库\n\n```bash\nuse user\ndb.dropDatabase()\n```\n\n##  js链接MongoDb\n\n>  mongodb包提供的方法api和monggodb的命令基本一样，我们可以在nodejs中使用mongodb数据库进行增删改查操作。\n\n- api地址：http://mongodb.github.io/node-mongodb-native/2.2/api","slug":"MongoDB简单学习","published":1,"updated":"2018-01-31T12:39:09.846Z","_id":"cjd30vw2z0008581iuhm0oaa9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"关于-MongoDB\"><a href=\"#关于-MongoDB\" class=\"headerlink\" title=\"关于 MongoDB\"></a>关于 MongoDB</h2><blockquote>\n<p>  我们一般把数据库分为关系型数据库和非关系型数据库，MongoDB就是属于非关系型数据库的一种。</p>\n</blockquote>\n<ul>\n<li>官网：<a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/</a></li>\n<li>下载地址：<a href=\"https://www.mongodb.com/download-center?jmp=nav\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/download-center?jmp=nav</a></li>\n</ul>\n<h2 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h2><ul>\n<li><a href=\"https://www.smartftp.com/support/kb/the-program-cant-start-because-api-ms-win-crt-runtime-l1-1-0dll-is-missing-f2702.html?lang=zh-CN\" target=\"_blank\" rel=\"noopener\">https://www.smartftp.com/support/kb/the-program-cant-start-because-api-ms-win-crt-runtime-l1-1-0dll-is-missing-f2702.html?lang=zh-CN</a></li>\n<li><a href=\"http://stackoverflow.com/questions/33265663/api-ms-win-crt-runtime-l1-1-0-dll-is-missing-when-opening-microsoft-office-file\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/33265663/api-ms-win-crt-runtime-l1-1-0-dll-is-missing-when-opening-microsoft-office-file</a></li>\n</ul>\n<h2 id=\"启动和关闭-MongoDB-数据库服务程序\"><a href=\"#启动和关闭-MongoDB-数据库服务程序\" class=\"headerlink\" title=\"启动和关闭 MongoDB 数据库服务程序\"></a>启动和关闭 MongoDB 数据库服务程序</h2><p>mongod.exe 是我们要启动的服务器文件<br>mongo的客户端去连我们的服务器</p>\n<ul>\n<li><p>打开终端，输入 <code>mongod</code> 回车</p>\n<ul>\n<li><code>mongod</code> 命令用来启动 MongoDB 数据服务</li>\n<li>MongoDB 服务默认将 C:/data/db 目录作为数据目录</li>\n<li>所以你需要先在 C:/ 根目录新建一个目录：C:/data/db</li>\n<li>当你执行 mongod 命令的时候，默认会去使用 c:/data/db 目录作为数据存储目录</li>\n<li>如果你不想使用 c:/data/db 目录</li>\n<li>mongod –dbpath=路径</li>\n</ul>\n</li>\n<li><p>32位操作系统启动 MongoDB</p>\n<ul>\n<li><a href=\"http://jingyan.baidu.com/article/76a7e409e1bb49fc3b6e1516.html\" target=\"_blank\" rel=\"noopener\">http://jingyan.baidu.com/article/76a7e409e1bb49fc3b6e1516.html</a></li>\n<li><code>mongod --dbpath 数据存储路径 --journal --storageEngine=mmapv1</code><br>mongod –dbpath C:/data/db –journal –storageEngine=mmapv1`</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ol>\n<li>什么是数据？</li>\n</ol>\n<blockquote>\n<p>数据是信息的表现形式和载体，可以是符号、文字、数字、语音、图像、视频等。通俗一点，数据就是信息，例如，个人信息、账户信息、家庭信息、企业信息、财务信息等等。</p>\n</blockquote>\n<ol>\n<li>什么是数据库（Database，DB）？</li>\n</ol>\n<blockquote>\n<p> 数据库是按照数据结构来组织、存储和管理数据的仓库。</p>\n</blockquote>\n<ol>\n<li>为什么要使用数据库？</li>\n</ol>\n<blockquote>\n<p>   我们需要使用数据库来存储我们网站的数据，然后通过增删改查进行数据交互，数据库，为我们提供了存储数据的仓库。</p>\n</blockquote>\n<ol>\n<li>什么是数据库管理系统（DataBase Management System，DBMS）？</li>\n</ol>\n<blockquote>\n<p> 数据库管理系统（DataBase Management System，DBMS）是为管理数据库而设计的大型电脑软件管理系统.例如，Oracle、Microsoft SQL Server、Access、MySQL、PostgreSQL、db2等等.我们可以简称这些数据库管理系统为数据库，虽然这种叫法不是很严谨，但是一般人都听的懂。</p>\n</blockquote>\n<ol>\n<li>数据库的分类</li>\n</ol>\n<ul>\n<li>关系型数据库 sql语言</li>\n</ul>\n<blockquote>\n<p>关系数据库管理系统(Relational Database Management System)，<br>是将数据组织为相关的行和列的系统，而管理关系数据库的计算机软件就是关系数据库管理系统，常用的数据库软件有Oracle、SQL Server、MySQL等。</p>\n</blockquote>\n<ul>\n<li>非关系型数据库 nosql<ul>\n<li>内存数据库 redis</li>\n<li>面向文档数据库 mongodb</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文档-document\"><a href=\"#文档-document\" class=\"headerlink\" title=\"文档 document\"></a>文档 document</h2><blockquote>\n<p>文档是MongoDB中最基本的单元，里边包含多个键值对。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;name:\"zhangsan\",age:12&#125;</span><br><span class=\"line\">&#123;name:\"lisi\"&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"集合-collection\"><a href=\"#集合-collection\" class=\"headerlink\" title=\"集合 collection\"></a>集合 collection</h2><blockquote>\n<p>集合就是一组文档，特点是动态模式，集合中每一个文档都有可能不一样。但是在实际开发中，最好我们保存一样格式的文档。</p>\n</blockquote>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><h4 id=\"1-列出所有的数据库\"><a href=\"#1-列出所有的数据库\" class=\"headerlink\" title=\"1.  列出所有的数据库\"></a>1.  列出所有的数据库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show dbs</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-进入或者新建数据库user\"><a href=\"#2-进入或者新建数据库user\" class=\"headerlink\" title=\"2.  进入或者新建数据库user\"></a>2.  进入或者新建数据库user</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use user</span><br><span class=\"line\">//如果已经有了user数据库，就会进入user数据库</span><br><span class=\"line\">//如果没有user数据库，就会自动新建数据库，如果数据库中没有任何文档，则用show dbs不会显示该仓库</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-新建文档\"><a href=\"#3-新建文档\" class=\"headerlink\" title=\"3.  新建文档\"></a>3.  新建文档</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.insert(&#123;name:<span class=\"string\">\"wang\"</span>&#125;)</span><br><span class=\"line\">//在user集合中添加一条文档数据</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-查看user集合中的文档\"><a href=\"#4-查看user集合中的文档\" class=\"headerlink\" title=\"4.  查看user集合中的文档\"></a>4.  查看user集合中的文档</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.find()</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-更新文档内容\"><a href=\"#5-更新文档内容\" class=\"headerlink\" title=\"5.  更新文档内容\"></a>5.  更新文档内容</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.update(&#123;name:<span class=\"string\">\"wang\"</span>&#125;,&#123;<span class=\"variable\">$set</span>:&#123;name:<span class=\"string\">\"ang\"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-删除文档\"><a href=\"#6-删除文档\" class=\"headerlink\" title=\"6.  删除文档\"></a>6.  删除文档</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.remove(&#123;name:<span class=\"string\">\"wang\"</span>&#125;)</span><br><span class=\"line\">//如果不传入参数，则会直接删除集合</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-删除数据库\"><a href=\"#7-删除数据库\" class=\"headerlink\" title=\"7.  删除数据库\"></a>7.  删除数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use user</span><br><span class=\"line\">db.dropDatabase()</span><br></pre></td></tr></table></figure>\n<h2 id=\"js链接MongoDb\"><a href=\"#js链接MongoDb\" class=\"headerlink\" title=\"js链接MongoDb\"></a>js链接MongoDb</h2><blockquote>\n<p> mongodb包提供的方法api和monggodb的命令基本一样，我们可以在nodejs中使用mongodb数据库进行增删改查操作。</p>\n</blockquote>\n<ul>\n<li>api地址：<a href=\"http://mongodb.github.io/node-mongodb-native/2.2/api\" target=\"_blank\" rel=\"noopener\">http://mongodb.github.io/node-mongodb-native/2.2/api</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"关于-MongoDB\"><a href=\"#关于-MongoDB\" class=\"headerlink\" title=\"关于 MongoDB\"></a>关于 MongoDB</h2><blockquote>\n<p>  我们一般把数据库分为关系型数据库和非关系型数据库，MongoDB就是属于非关系型数据库的一种。</p>\n</blockquote>\n<ul>\n<li>官网：<a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/</a></li>\n<li>下载地址：<a href=\"https://www.mongodb.com/download-center?jmp=nav\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/download-center?jmp=nav</a></li>\n</ul>\n<h2 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h2><ul>\n<li><a href=\"https://www.smartftp.com/support/kb/the-program-cant-start-because-api-ms-win-crt-runtime-l1-1-0dll-is-missing-f2702.html?lang=zh-CN\" target=\"_blank\" rel=\"noopener\">https://www.smartftp.com/support/kb/the-program-cant-start-because-api-ms-win-crt-runtime-l1-1-0dll-is-missing-f2702.html?lang=zh-CN</a></li>\n<li><a href=\"http://stackoverflow.com/questions/33265663/api-ms-win-crt-runtime-l1-1-0-dll-is-missing-when-opening-microsoft-office-file\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/33265663/api-ms-win-crt-runtime-l1-1-0-dll-is-missing-when-opening-microsoft-office-file</a></li>\n</ul>\n<h2 id=\"启动和关闭-MongoDB-数据库服务程序\"><a href=\"#启动和关闭-MongoDB-数据库服务程序\" class=\"headerlink\" title=\"启动和关闭 MongoDB 数据库服务程序\"></a>启动和关闭 MongoDB 数据库服务程序</h2><p>mongod.exe 是我们要启动的服务器文件<br>mongo的客户端去连我们的服务器</p>\n<ul>\n<li><p>打开终端，输入 <code>mongod</code> 回车</p>\n<ul>\n<li><code>mongod</code> 命令用来启动 MongoDB 数据服务</li>\n<li>MongoDB 服务默认将 C:/data/db 目录作为数据目录</li>\n<li>所以你需要先在 C:/ 根目录新建一个目录：C:/data/db</li>\n<li>当你执行 mongod 命令的时候，默认会去使用 c:/data/db 目录作为数据存储目录</li>\n<li>如果你不想使用 c:/data/db 目录</li>\n<li>mongod –dbpath=路径</li>\n</ul>\n</li>\n<li><p>32位操作系统启动 MongoDB</p>\n<ul>\n<li><a href=\"http://jingyan.baidu.com/article/76a7e409e1bb49fc3b6e1516.html\" target=\"_blank\" rel=\"noopener\">http://jingyan.baidu.com/article/76a7e409e1bb49fc3b6e1516.html</a></li>\n<li><code>mongod --dbpath 数据存储路径 --journal --storageEngine=mmapv1</code><br>mongod –dbpath C:/data/db –journal –storageEngine=mmapv1`</li>\n</ul>\n</li>\n</ul>","more":"<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ol>\n<li>什么是数据？</li>\n</ol>\n<blockquote>\n<p>数据是信息的表现形式和载体，可以是符号、文字、数字、语音、图像、视频等。通俗一点，数据就是信息，例如，个人信息、账户信息、家庭信息、企业信息、财务信息等等。</p>\n</blockquote>\n<ol>\n<li>什么是数据库（Database，DB）？</li>\n</ol>\n<blockquote>\n<p> 数据库是按照数据结构来组织、存储和管理数据的仓库。</p>\n</blockquote>\n<ol>\n<li>为什么要使用数据库？</li>\n</ol>\n<blockquote>\n<p>   我们需要使用数据库来存储我们网站的数据，然后通过增删改查进行数据交互，数据库，为我们提供了存储数据的仓库。</p>\n</blockquote>\n<ol>\n<li>什么是数据库管理系统（DataBase Management System，DBMS）？</li>\n</ol>\n<blockquote>\n<p> 数据库管理系统（DataBase Management System，DBMS）是为管理数据库而设计的大型电脑软件管理系统.例如，Oracle、Microsoft SQL Server、Access、MySQL、PostgreSQL、db2等等.我们可以简称这些数据库管理系统为数据库，虽然这种叫法不是很严谨，但是一般人都听的懂。</p>\n</blockquote>\n<ol>\n<li>数据库的分类</li>\n</ol>\n<ul>\n<li>关系型数据库 sql语言</li>\n</ul>\n<blockquote>\n<p>关系数据库管理系统(Relational Database Management System)，<br>是将数据组织为相关的行和列的系统，而管理关系数据库的计算机软件就是关系数据库管理系统，常用的数据库软件有Oracle、SQL Server、MySQL等。</p>\n</blockquote>\n<ul>\n<li>非关系型数据库 nosql<ul>\n<li>内存数据库 redis</li>\n<li>面向文档数据库 mongodb</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文档-document\"><a href=\"#文档-document\" class=\"headerlink\" title=\"文档 document\"></a>文档 document</h2><blockquote>\n<p>文档是MongoDB中最基本的单元，里边包含多个键值对。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;name:\"zhangsan\",age:12&#125;</span><br><span class=\"line\">&#123;name:\"lisi\"&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"集合-collection\"><a href=\"#集合-collection\" class=\"headerlink\" title=\"集合 collection\"></a>集合 collection</h2><blockquote>\n<p>集合就是一组文档，特点是动态模式，集合中每一个文档都有可能不一样。但是在实际开发中，最好我们保存一样格式的文档。</p>\n</blockquote>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><h4 id=\"1-列出所有的数据库\"><a href=\"#1-列出所有的数据库\" class=\"headerlink\" title=\"1.  列出所有的数据库\"></a>1.  列出所有的数据库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show dbs</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-进入或者新建数据库user\"><a href=\"#2-进入或者新建数据库user\" class=\"headerlink\" title=\"2.  进入或者新建数据库user\"></a>2.  进入或者新建数据库user</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use user</span><br><span class=\"line\">//如果已经有了user数据库，就会进入user数据库</span><br><span class=\"line\">//如果没有user数据库，就会自动新建数据库，如果数据库中没有任何文档，则用show dbs不会显示该仓库</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-新建文档\"><a href=\"#3-新建文档\" class=\"headerlink\" title=\"3.  新建文档\"></a>3.  新建文档</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.insert(&#123;name:<span class=\"string\">\"wang\"</span>&#125;)</span><br><span class=\"line\">//在user集合中添加一条文档数据</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-查看user集合中的文档\"><a href=\"#4-查看user集合中的文档\" class=\"headerlink\" title=\"4.  查看user集合中的文档\"></a>4.  查看user集合中的文档</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.find()</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-更新文档内容\"><a href=\"#5-更新文档内容\" class=\"headerlink\" title=\"5.  更新文档内容\"></a>5.  更新文档内容</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.update(&#123;name:<span class=\"string\">\"wang\"</span>&#125;,&#123;<span class=\"variable\">$set</span>:&#123;name:<span class=\"string\">\"ang\"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-删除文档\"><a href=\"#6-删除文档\" class=\"headerlink\" title=\"6.  删除文档\"></a>6.  删除文档</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.remove(&#123;name:<span class=\"string\">\"wang\"</span>&#125;)</span><br><span class=\"line\">//如果不传入参数，则会直接删除集合</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-删除数据库\"><a href=\"#7-删除数据库\" class=\"headerlink\" title=\"7.  删除数据库\"></a>7.  删除数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use user</span><br><span class=\"line\">db.dropDatabase()</span><br></pre></td></tr></table></figure>\n<h2 id=\"js链接MongoDb\"><a href=\"#js链接MongoDb\" class=\"headerlink\" title=\"js链接MongoDb\"></a>js链接MongoDb</h2><blockquote>\n<p> mongodb包提供的方法api和monggodb的命令基本一样，我们可以在nodejs中使用mongodb数据库进行增删改查操作。</p>\n</blockquote>\n<ul>\n<li>api地址：<a href=\"http://mongodb.github.io/node-mongodb-native/2.2/api\" target=\"_blank\" rel=\"noopener\">http://mongodb.github.io/node-mongodb-native/2.2/api</a></li>\n</ul>"},{"title":"ECMAScript发展史","date":"2016-03-18T01:59:57.000Z","_content":" \n\n-\tECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会）通过ECMA-262标准化的脚本程序设计语言。这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，但实际上后两者是ECMA-262标准的实现和扩展。\n###\t目录\n1.\t历史\n2.\t版本\n3.\t方言\n4.\t对应版本\n5.\t参考文献\n6.\t参见\n7.\t外部链接\n###\t1.\t历史\n\n1995年12月，升阳公司与网景公司公司一起引入了JavaScript[1]。1996年3月，网景公司发表了支持JavaScript的网景导航者 2.0。由于JavaScript作为网页的客户端脚本语言非常成功，微软于1996年8月引入了Internet Explorer 3.0，这个软件支持一个“约”与JavaScript相容的JScript[2]。\n1996年11月，网景公司将JavaScript提交给欧洲计算机制造商协会进行标准化。ECMA-262的第一个版本于1997年6月被Ecma组织采纳。\nECMAScript是由ECMA-262标准化的脚本语言的名称。JavaScript和JScript与ECMAScript相容，但包含超出ECMAScript的功能。\n\n<!-- more -->\n###\t3.\t版本\n\n-\t至今为止有七个ECMA-262版本发表。\n\n\n-\t1\t|\t1997年6月\t\t|\t首版\t\t\t|\n-\t2\t|\t1998年6月\t\t|\t格式修正，以使得其形式与ISO/IEC16262国际标准一致|\n-\t3\t|\t1999年12月\t|\t强大的正则表达式，更好的词法作用域链处理，新的控制指令，异常处理，错误定义更加明确，数据输出的格式化及其它改变|\n-\t4\t|\t放弃\t\t\t|\t由于关于语言的复杂性出现分歧,第4版本被放弃,其中的部分成为了第5版本及Harmony的基础。|\n-\t5\t|\t2009年12月[4]\t|\t新增“严格模式（strict mode）”，一个子集用作提供更彻底的错误检查,以避免结构出错。澄清了许多第3版本的模糊规范,and accommodates behaviour of real-world implementations that differed consistently from that specification。增加了部分新功能,如getters及setters,支持JSON以及在物件属性上更完整的反射。|\n-\t6\t|\t2015年6月\t\t|\t多个新的概念和语言特性。ECMAScript Harmony将会以“ECMAScript 6”发布。|\n-\t7\t|\t2016年6月[9]\t|\t多个新的概念和语言特性\n|\t\t|\t\t\t\t  |\t  2004年6月Ecma组织发表了ECMA-357标准，它是ECMAScript的一个扩延，也被称为E4X（ECMAScript for XML）。|\n\n","source":"_posts/ECMAScript发展史.md","raw":"---\ntitle: ECMAScript发展史\ntags: [ECMA]\ndate: 2016-03-18 09:59:57\n---\n \n\n-\tECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会）通过ECMA-262标准化的脚本程序设计语言。这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，但实际上后两者是ECMA-262标准的实现和扩展。\n###\t目录\n1.\t历史\n2.\t版本\n3.\t方言\n4.\t对应版本\n5.\t参考文献\n6.\t参见\n7.\t外部链接\n###\t1.\t历史\n\n1995年12月，升阳公司与网景公司公司一起引入了JavaScript[1]。1996年3月，网景公司发表了支持JavaScript的网景导航者 2.0。由于JavaScript作为网页的客户端脚本语言非常成功，微软于1996年8月引入了Internet Explorer 3.0，这个软件支持一个“约”与JavaScript相容的JScript[2]。\n1996年11月，网景公司将JavaScript提交给欧洲计算机制造商协会进行标准化。ECMA-262的第一个版本于1997年6月被Ecma组织采纳。\nECMAScript是由ECMA-262标准化的脚本语言的名称。JavaScript和JScript与ECMAScript相容，但包含超出ECMAScript的功能。\n\n<!-- more -->\n###\t3.\t版本\n\n-\t至今为止有七个ECMA-262版本发表。\n\n\n-\t1\t|\t1997年6月\t\t|\t首版\t\t\t|\n-\t2\t|\t1998年6月\t\t|\t格式修正，以使得其形式与ISO/IEC16262国际标准一致|\n-\t3\t|\t1999年12月\t|\t强大的正则表达式，更好的词法作用域链处理，新的控制指令，异常处理，错误定义更加明确，数据输出的格式化及其它改变|\n-\t4\t|\t放弃\t\t\t|\t由于关于语言的复杂性出现分歧,第4版本被放弃,其中的部分成为了第5版本及Harmony的基础。|\n-\t5\t|\t2009年12月[4]\t|\t新增“严格模式（strict mode）”，一个子集用作提供更彻底的错误检查,以避免结构出错。澄清了许多第3版本的模糊规范,and accommodates behaviour of real-world implementations that differed consistently from that specification。增加了部分新功能,如getters及setters,支持JSON以及在物件属性上更完整的反射。|\n-\t6\t|\t2015年6月\t\t|\t多个新的概念和语言特性。ECMAScript Harmony将会以“ECMAScript 6”发布。|\n-\t7\t|\t2016年6月[9]\t|\t多个新的概念和语言特性\n|\t\t|\t\t\t\t  |\t  2004年6月Ecma组织发表了ECMA-357标准，它是ECMAScript的一个扩延，也被称为E4X（ECMAScript for XML）。|\n\n","slug":"ECMAScript发展史","published":1,"updated":"2018-01-31T12:42:33.003Z","_id":"cjd30vw3a000a581ij8g70kpz","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会）通过ECMA-262标准化的脚本程序设计语言。这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，但实际上后两者是ECMA-262标准的实现和扩展。<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3></li>\n</ul>\n<ol>\n<li>历史</li>\n<li>版本</li>\n<li>方言</li>\n<li>对应版本</li>\n<li>参考文献</li>\n<li>参见</li>\n<li>外部链接<h3 id=\"1-历史\"><a href=\"#1-历史\" class=\"headerlink\" title=\"1.    历史\"></a>1.    历史</h3></li>\n</ol>\n<p>1995年12月，升阳公司与网景公司公司一起引入了JavaScript[1]。1996年3月，网景公司发表了支持JavaScript的网景导航者 2.0。由于JavaScript作为网页的客户端脚本语言非常成功，微软于1996年8月引入了Internet Explorer 3.0，这个软件支持一个“约”与JavaScript相容的JScript[2]。<br>1996年11月，网景公司将JavaScript提交给欧洲计算机制造商协会进行标准化。ECMA-262的第一个版本于1997年6月被Ecma组织采纳。<br>ECMAScript是由ECMA-262标准化的脚本语言的名称。JavaScript和JScript与ECMAScript相容，但包含超出ECMAScript的功能。</p>\n<a id=\"more\"></a>\n<h3 id=\"3-版本\"><a href=\"#3-版本\" class=\"headerlink\" title=\"3.    版本\"></a>3.    版本</h3><ul>\n<li>至今为止有七个ECMA-262版本发表。</li>\n</ul>\n<ul>\n<li>1    |    1997年6月        |    首版            |</li>\n<li>2    |    1998年6月        |    格式修正，以使得其形式与ISO/IEC16262国际标准一致|</li>\n<li>3    |    1999年12月    |    强大的正则表达式，更好的词法作用域链处理，新的控制指令，异常处理，错误定义更加明确，数据输出的格式化及其它改变|</li>\n<li>4    |    放弃            |    由于关于语言的复杂性出现分歧,第4版本被放弃,其中的部分成为了第5版本及Harmony的基础。|</li>\n<li>5    |    2009年12月[4]    |    新增“严格模式（strict mode）”，一个子集用作提供更彻底的错误检查,以避免结构出错。澄清了许多第3版本的模糊规范,and accommodates behaviour of real-world implementations that differed consistently from that specification。增加了部分新功能,如getters及setters,支持JSON以及在物件属性上更完整的反射。|</li>\n<li>6    |    2015年6月        |    多个新的概念和语言特性。ECMAScript Harmony将会以“ECMAScript 6”发布。|</li>\n<li>7    |    2016年6月[9]    |    多个新的概念和语言特性<br>|        |                  |      2004年6月Ecma组织发表了ECMA-357标准，它是ECMAScript的一个扩延，也被称为E4X（ECMAScript for XML）。|</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会）通过ECMA-262标准化的脚本程序设计语言。这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，但实际上后两者是ECMA-262标准的实现和扩展。<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3></li>\n</ul>\n<ol>\n<li>历史</li>\n<li>版本</li>\n<li>方言</li>\n<li>对应版本</li>\n<li>参考文献</li>\n<li>参见</li>\n<li>外部链接<h3 id=\"1-历史\"><a href=\"#1-历史\" class=\"headerlink\" title=\"1.    历史\"></a>1.    历史</h3></li>\n</ol>\n<p>1995年12月，升阳公司与网景公司公司一起引入了JavaScript[1]。1996年3月，网景公司发表了支持JavaScript的网景导航者 2.0。由于JavaScript作为网页的客户端脚本语言非常成功，微软于1996年8月引入了Internet Explorer 3.0，这个软件支持一个“约”与JavaScript相容的JScript[2]。<br>1996年11月，网景公司将JavaScript提交给欧洲计算机制造商协会进行标准化。ECMA-262的第一个版本于1997年6月被Ecma组织采纳。<br>ECMAScript是由ECMA-262标准化的脚本语言的名称。JavaScript和JScript与ECMAScript相容，但包含超出ECMAScript的功能。</p>","more":"<h3 id=\"3-版本\"><a href=\"#3-版本\" class=\"headerlink\" title=\"3.    版本\"></a>3.    版本</h3><ul>\n<li>至今为止有七个ECMA-262版本发表。</li>\n</ul>\n<ul>\n<li>1    |    1997年6月        |    首版            |</li>\n<li>2    |    1998年6月        |    格式修正，以使得其形式与ISO/IEC16262国际标准一致|</li>\n<li>3    |    1999年12月    |    强大的正则表达式，更好的词法作用域链处理，新的控制指令，异常处理，错误定义更加明确，数据输出的格式化及其它改变|</li>\n<li>4    |    放弃            |    由于关于语言的复杂性出现分歧,第4版本被放弃,其中的部分成为了第5版本及Harmony的基础。|</li>\n<li>5    |    2009年12月[4]    |    新增“严格模式（strict mode）”，一个子集用作提供更彻底的错误检查,以避免结构出错。澄清了许多第3版本的模糊规范,and accommodates behaviour of real-world implementations that differed consistently from that specification。增加了部分新功能,如getters及setters,支持JSON以及在物件属性上更完整的反射。|</li>\n<li>6    |    2015年6月        |    多个新的概念和语言特性。ECMAScript Harmony将会以“ECMAScript 6”发布。|</li>\n<li>7    |    2016年6月[9]    |    多个新的概念和语言特性<br>|        |                  |      2004年6月Ecma组织发表了ECMA-357标准，它是ECMAScript的一个扩延，也被称为E4X（ECMAScript for XML）。|</li>\n</ul>"},{"title":"PHP简单入门","date":"2015-08-14T11:52:11.000Z","_content":" \n\n##\tphp基础\n\n-\t定义变量\n\n\t-\t变量使用$开头，不能以数字开头，\n\t-\t大小写敏感(区分大小写)\n\n-\tphp代码必须写在`<?php 代码  ?>`,\n\n-\t在第一行加上下面这行代码可以防止中文乱码问题\n\n\t```php\n\theader(\"Content-Type:text/html;charset=utf-8\");\n\t```\n-\tphp变量的类型：\t字符串，整型，浮点型，布尔类型，数组\n\n<!--more-->\n\n-\t函数\t\n\t-\t与js基本一致\n\t-\t函数的形参可以设置一个默认值。\n\t```\n\tfunction foo($username = \"zs\") {\n\t\techo \"你好\".$username;\n\t}\n\tfoo();\n\t```\n\n<!-- more -->\n\n##\t数组\n\n-\tphp里面有两种类型的数组，普通数组和关联数组\n\n1.\t普通数组\n\n\t-\t定义\n\t```\n\t$arr1 = array(\"zs\",\"ls\");\n\t```\n\t-\t数组没有length属性，\n\t-\t遍历数组,使用for循环，可以得到数组的长度\n\t-\tphp有一个函数可以获取数组的长度，count($arr);\n\n2.\t关联数组\n\t\n\t-\t以键值对的方式进行存储的数组，我们叫做关联数组，\n\t```php\n\t$array = array(\"key\" => \"value\");\n\t$array[\"key];\n\t//通过key可以获取值\n\t```\n3.\t二维数组\n\n\t-\t数组里边还有数组\n\n## 输出打印\t\n-\tphp提供了三个用来输出的方法\n\n1.\techo \"\"; \t用来输出字符串的\n\n2.\tprint_r();\t用来输出数组或者对象的。\n\n3.\tvar_dump();\t这个也是用来输出数组里面的详细信息\n\n##\tphp常见函数方法\n\n1.\tcount();\t得到数组长度\n\n2.\tin_array();\t\n\t-\t判断数组中是否存在某个元素，这个是用在普通数组当中的\n\n3.\tarray_key_exists();\t\n\t-\t检测数组中是否存在某个key，这个用在关联数组中\n\n4.\tfile_get_contents();\t\n\t-\t读取文件里边的内容，读取出来的是字符串，\n\n5.\tmove_upload_file();\t移动上传的文件\n\n\n##\t表单处理\n\n-\tname属性 是用来提供给服务端接收数据而设置的\n\n-\taction属性 设置接收数据的处理程序\n\n-\tmethod属性\t设置发送数据的方式\n\n-\t当上传文件时，必须设置 `enctype=\"multipart/form-data\"`,且只能使用post方式\n\n-\t$_GET\t接收get传来的数据\n\n-\t$_POST\t接收post传来数据\n\n-\t$_FILES\t接收上传的文件\n\n##\tget和post提交\n\n1.\tget\n\n\t-\t点击超链接，表单提交默认方式就是get，地址栏输入地址，\n\n\t-\t传递到服务端的都是参数，参数值，可以传递多个参数参数值\n\t-\t第一个必须是？ 参数名=参数值\n\t-\t可以发送多个参数到服务器\n\t-\t假设我要发送多个数据，\n\t-\t第二个参数之前添加&字符\n\t```\n\t<a href=\"01.php?username=zs&age=12\"></a>\n\t```\n\t-\t在php要对请求进行处理，处理我们分为三个步骤，\n\n\t1.\t接收请求，接收客户端传递到服务端的数据，\n\t\t-\t如果客户端是get方式提交，用$_GET去接收数据，对应的值是一个数组，是一个关联数组。\n\t2.\t处理请求：\t接收到数据之后具体做什么，就是要使用php去操作了。\n\t3.\t响应处理，给客户端一个响应\n\n2.\tpost提交\n\n\t-\t表单提交一般都是使用post\n\t```\n\t<!--post 提交，我需要表单提交，设置成post-->\n    <form action=\"02post.php\" method=\"post\">\n        用户名:<input type=\"text\" name=\"username\">\n        <input type=\"submit\" value=\"post 提交\">\n    </form>\n\t```\n\t- 服务端处理\n\t1.\t接收请求\n\t```\n\t$username = $_POST[\"username\"];\n\t```\n\t2.\t处理请求\n\t-\tphp后端处理数据\n\t3.\t完成响应\n\t-\t返回信息到客户端\n\n##\t文件上传\n\n####\t前端页面\n\n-\t必须满足以下条件才可以上传文件\n\n1.\t必须是表单提交\n\n2.\t表单里面必须有 input type=\"file\"\n\n3.\t必须是post方式提交\n\n4.\t必须设置 `enctype=\"multipart/form-data\"`属性\n\n","source":"_posts/PHP简单入门.md","raw":"---\ntitle: PHP简单入门\ndate: 2015-08-14 19:52:11\ntags:\n---\n \n\n##\tphp基础\n\n-\t定义变量\n\n\t-\t变量使用$开头，不能以数字开头，\n\t-\t大小写敏感(区分大小写)\n\n-\tphp代码必须写在`<?php 代码  ?>`,\n\n-\t在第一行加上下面这行代码可以防止中文乱码问题\n\n\t```php\n\theader(\"Content-Type:text/html;charset=utf-8\");\n\t```\n-\tphp变量的类型：\t字符串，整型，浮点型，布尔类型，数组\n\n<!--more-->\n\n-\t函数\t\n\t-\t与js基本一致\n\t-\t函数的形参可以设置一个默认值。\n\t```\n\tfunction foo($username = \"zs\") {\n\t\techo \"你好\".$username;\n\t}\n\tfoo();\n\t```\n\n<!-- more -->\n\n##\t数组\n\n-\tphp里面有两种类型的数组，普通数组和关联数组\n\n1.\t普通数组\n\n\t-\t定义\n\t```\n\t$arr1 = array(\"zs\",\"ls\");\n\t```\n\t-\t数组没有length属性，\n\t-\t遍历数组,使用for循环，可以得到数组的长度\n\t-\tphp有一个函数可以获取数组的长度，count($arr);\n\n2.\t关联数组\n\t\n\t-\t以键值对的方式进行存储的数组，我们叫做关联数组，\n\t```php\n\t$array = array(\"key\" => \"value\");\n\t$array[\"key];\n\t//通过key可以获取值\n\t```\n3.\t二维数组\n\n\t-\t数组里边还有数组\n\n## 输出打印\t\n-\tphp提供了三个用来输出的方法\n\n1.\techo \"\"; \t用来输出字符串的\n\n2.\tprint_r();\t用来输出数组或者对象的。\n\n3.\tvar_dump();\t这个也是用来输出数组里面的详细信息\n\n##\tphp常见函数方法\n\n1.\tcount();\t得到数组长度\n\n2.\tin_array();\t\n\t-\t判断数组中是否存在某个元素，这个是用在普通数组当中的\n\n3.\tarray_key_exists();\t\n\t-\t检测数组中是否存在某个key，这个用在关联数组中\n\n4.\tfile_get_contents();\t\n\t-\t读取文件里边的内容，读取出来的是字符串，\n\n5.\tmove_upload_file();\t移动上传的文件\n\n\n##\t表单处理\n\n-\tname属性 是用来提供给服务端接收数据而设置的\n\n-\taction属性 设置接收数据的处理程序\n\n-\tmethod属性\t设置发送数据的方式\n\n-\t当上传文件时，必须设置 `enctype=\"multipart/form-data\"`,且只能使用post方式\n\n-\t$_GET\t接收get传来的数据\n\n-\t$_POST\t接收post传来数据\n\n-\t$_FILES\t接收上传的文件\n\n##\tget和post提交\n\n1.\tget\n\n\t-\t点击超链接，表单提交默认方式就是get，地址栏输入地址，\n\n\t-\t传递到服务端的都是参数，参数值，可以传递多个参数参数值\n\t-\t第一个必须是？ 参数名=参数值\n\t-\t可以发送多个参数到服务器\n\t-\t假设我要发送多个数据，\n\t-\t第二个参数之前添加&字符\n\t```\n\t<a href=\"01.php?username=zs&age=12\"></a>\n\t```\n\t-\t在php要对请求进行处理，处理我们分为三个步骤，\n\n\t1.\t接收请求，接收客户端传递到服务端的数据，\n\t\t-\t如果客户端是get方式提交，用$_GET去接收数据，对应的值是一个数组，是一个关联数组。\n\t2.\t处理请求：\t接收到数据之后具体做什么，就是要使用php去操作了。\n\t3.\t响应处理，给客户端一个响应\n\n2.\tpost提交\n\n\t-\t表单提交一般都是使用post\n\t```\n\t<!--post 提交，我需要表单提交，设置成post-->\n    <form action=\"02post.php\" method=\"post\">\n        用户名:<input type=\"text\" name=\"username\">\n        <input type=\"submit\" value=\"post 提交\">\n    </form>\n\t```\n\t- 服务端处理\n\t1.\t接收请求\n\t```\n\t$username = $_POST[\"username\"];\n\t```\n\t2.\t处理请求\n\t-\tphp后端处理数据\n\t3.\t完成响应\n\t-\t返回信息到客户端\n\n##\t文件上传\n\n####\t前端页面\n\n-\t必须满足以下条件才可以上传文件\n\n1.\t必须是表单提交\n\n2.\t表单里面必须有 input type=\"file\"\n\n3.\t必须是post方式提交\n\n4.\t必须设置 `enctype=\"multipart/form-data\"`属性\n\n","slug":"PHP简单入门","published":1,"updated":"2018-01-31T12:42:33.017Z","_id":"cjd30vw3r000b581iv641462a","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"php基础\"><a href=\"#php基础\" class=\"headerlink\" title=\"php基础\"></a>php基础</h2><ul>\n<li><p>定义变量</p>\n<ul>\n<li>变量使用$开头，不能以数字开头，</li>\n<li>大小写敏感(区分大小写)</li>\n</ul>\n</li>\n<li><p>php代码必须写在<code>&lt;?php 代码  ?&gt;</code>,</p>\n</li>\n<li><p>在第一行加上下面这行代码可以防止中文乱码问题</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header(<span class=\"string\">\"Content-Type:text/html;charset=utf-8\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>php变量的类型：    字符串，整型，浮点型，布尔类型，数组</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>函数    <ul>\n<li>与js基本一致</li>\n<li>函数的形参可以设置一个默认值。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo($username = &quot;zs&quot;) &#123;</span><br><span class=\"line\">\techo &quot;你好&quot;.$username;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<!-- more -->\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><ul>\n<li>php里面有两种类型的数组，普通数组和关联数组</li>\n</ul>\n<ol>\n<li><p>普通数组</p>\n<ul>\n<li><p>定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr1 = array(&quot;zs&quot;,&quot;ls&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组没有length属性，</p>\n</li>\n<li>遍历数组,使用for循环，可以得到数组的长度</li>\n<li>php有一个函数可以获取数组的长度，count($arr);</li>\n</ul>\n</li>\n<li><p>关联数组</p>\n<ul>\n<li>以键值对的方式进行存储的数组，我们叫做关联数组，<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"string\">\"key\"</span> =&gt; <span class=\"string\">\"value\"</span>);</span><br><span class=\"line\">$array[<span class=\"string\">\"key];</span></span><br><span class=\"line\"><span class=\"string\">//通过key可以获取值</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>二维数组</p>\n<ul>\n<li>数组里边还有数组</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"输出打印\"><a href=\"#输出打印\" class=\"headerlink\" title=\"输出打印\"></a>输出打印</h2><ul>\n<li>php提供了三个用来输出的方法</li>\n</ul>\n<ol>\n<li><p>echo “”;     用来输出字符串的</p>\n</li>\n<li><p>print_r();    用来输出数组或者对象的。</p>\n</li>\n<li><p>var_dump();    这个也是用来输出数组里面的详细信息</p>\n</li>\n</ol>\n<h2 id=\"php常见函数方法\"><a href=\"#php常见函数方法\" class=\"headerlink\" title=\"php常见函数方法\"></a>php常见函数方法</h2><ol>\n<li><p>count();    得到数组长度</p>\n</li>\n<li><p>in_array();    </p>\n<ul>\n<li>判断数组中是否存在某个元素，这个是用在普通数组当中的</li>\n</ul>\n</li>\n<li><p>array_key_exists();    </p>\n<ul>\n<li>检测数组中是否存在某个key，这个用在关联数组中</li>\n</ul>\n</li>\n<li><p>file_get_contents();    </p>\n<ul>\n<li>读取文件里边的内容，读取出来的是字符串，</li>\n</ul>\n</li>\n<li><p>move_upload_file();    移动上传的文件</p>\n</li>\n</ol>\n<h2 id=\"表单处理\"><a href=\"#表单处理\" class=\"headerlink\" title=\"表单处理\"></a>表单处理</h2><ul>\n<li><p>name属性 是用来提供给服务端接收数据而设置的</p>\n</li>\n<li><p>action属性 设置接收数据的处理程序</p>\n</li>\n<li><p>method属性    设置发送数据的方式</p>\n</li>\n<li><p>当上传文件时，必须设置 <code>enctype=&quot;multipart/form-data&quot;</code>,且只能使用post方式</p>\n</li>\n<li><p>$_GET    接收get传来的数据</p>\n</li>\n<li><p>$_POST    接收post传来数据</p>\n</li>\n<li><p>$_FILES    接收上传的文件</p>\n</li>\n</ul>\n<h2 id=\"get和post提交\"><a href=\"#get和post提交\" class=\"headerlink\" title=\"get和post提交\"></a>get和post提交</h2><ol>\n<li><p>get</p>\n<ul>\n<li><p>点击超链接，表单提交默认方式就是get，地址栏输入地址，</p>\n</li>\n<li><p>传递到服务端的都是参数，参数值，可以传递多个参数参数值</p>\n</li>\n<li>第一个必须是？ 参数名=参数值</li>\n<li>可以发送多个参数到服务器</li>\n<li>假设我要发送多个数据，</li>\n<li><p>第二个参数之前添加&amp;字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;01.php?username=zs&amp;age=12&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在php要对请求进行处理，处理我们分为三个步骤，</p>\n</li>\n</ul>\n<ol>\n<li>接收请求，接收客户端传递到服务端的数据，<ul>\n<li>如果客户端是get方式提交，用$_GET去接收数据，对应的值是一个数组，是一个关联数组。</li>\n</ul>\n</li>\n<li>处理请求：    接收到数据之后具体做什么，就是要使用php去操作了。</li>\n<li>响应处理，给客户端一个响应</li>\n</ol>\n</li>\n<li><p>post提交</p>\n<ul>\n<li><p>表单提交一般都是使用post</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--post 提交，我需要表单提交，设置成post--&gt;</span><br><span class=\"line\">   &lt;form action=&quot;02post.php&quot; method=&quot;post&quot;&gt;</span><br><span class=\"line\">       用户名:&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class=\"line\">       &lt;input type=&quot;submit&quot; value=&quot;post 提交&quot;&gt;</span><br><span class=\"line\">   &lt;/form&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>服务端处理</p>\n</li>\n</ul>\n<ol>\n<li><p>接收请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$username = $_POST[&quot;username&quot;];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>处理请求</p>\n</li>\n</ol>\n<ul>\n<li>php后端处理数据</li>\n</ul>\n<ol>\n<li>完成响应</li>\n</ol>\n<ul>\n<li>返回信息到客户端</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><h4 id=\"前端页面\"><a href=\"#前端页面\" class=\"headerlink\" title=\"前端页面\"></a>前端页面</h4><ul>\n<li>必须满足以下条件才可以上传文件</li>\n</ul>\n<ol>\n<li><p>必须是表单提交</p>\n</li>\n<li><p>表单里面必须有 input type=”file”</p>\n</li>\n<li><p>必须是post方式提交</p>\n</li>\n<li><p>必须设置 <code>enctype=&quot;multipart/form-data&quot;</code>属性</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"php基础\"><a href=\"#php基础\" class=\"headerlink\" title=\"php基础\"></a>php基础</h2><ul>\n<li><p>定义变量</p>\n<ul>\n<li>变量使用$开头，不能以数字开头，</li>\n<li>大小写敏感(区分大小写)</li>\n</ul>\n</li>\n<li><p>php代码必须写在<code>&lt;?php 代码  ?&gt;</code>,</p>\n</li>\n<li><p>在第一行加上下面这行代码可以防止中文乱码问题</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header(<span class=\"string\">\"Content-Type:text/html;charset=utf-8\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>php变量的类型：    字符串，整型，浮点型，布尔类型，数组</p>\n</li>\n</ul>","more":"<ul>\n<li>函数    <ul>\n<li>与js基本一致</li>\n<li>函数的形参可以设置一个默认值。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo($username = &quot;zs&quot;) &#123;</span><br><span class=\"line\">\techo &quot;你好&quot;.$username;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<!-- more -->\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><ul>\n<li>php里面有两种类型的数组，普通数组和关联数组</li>\n</ul>\n<ol>\n<li><p>普通数组</p>\n<ul>\n<li><p>定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr1 = array(&quot;zs&quot;,&quot;ls&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组没有length属性，</p>\n</li>\n<li>遍历数组,使用for循环，可以得到数组的长度</li>\n<li>php有一个函数可以获取数组的长度，count($arr);</li>\n</ul>\n</li>\n<li><p>关联数组</p>\n<ul>\n<li>以键值对的方式进行存储的数组，我们叫做关联数组，<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"string\">\"key\"</span> =&gt; <span class=\"string\">\"value\"</span>);</span><br><span class=\"line\">$array[<span class=\"string\">\"key];</span></span><br><span class=\"line\"><span class=\"string\">//通过key可以获取值</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>二维数组</p>\n<ul>\n<li>数组里边还有数组</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"输出打印\"><a href=\"#输出打印\" class=\"headerlink\" title=\"输出打印\"></a>输出打印</h2><ul>\n<li>php提供了三个用来输出的方法</li>\n</ul>\n<ol>\n<li><p>echo “”;     用来输出字符串的</p>\n</li>\n<li><p>print_r();    用来输出数组或者对象的。</p>\n</li>\n<li><p>var_dump();    这个也是用来输出数组里面的详细信息</p>\n</li>\n</ol>\n<h2 id=\"php常见函数方法\"><a href=\"#php常见函数方法\" class=\"headerlink\" title=\"php常见函数方法\"></a>php常见函数方法</h2><ol>\n<li><p>count();    得到数组长度</p>\n</li>\n<li><p>in_array();    </p>\n<ul>\n<li>判断数组中是否存在某个元素，这个是用在普通数组当中的</li>\n</ul>\n</li>\n<li><p>array_key_exists();    </p>\n<ul>\n<li>检测数组中是否存在某个key，这个用在关联数组中</li>\n</ul>\n</li>\n<li><p>file_get_contents();    </p>\n<ul>\n<li>读取文件里边的内容，读取出来的是字符串，</li>\n</ul>\n</li>\n<li><p>move_upload_file();    移动上传的文件</p>\n</li>\n</ol>\n<h2 id=\"表单处理\"><a href=\"#表单处理\" class=\"headerlink\" title=\"表单处理\"></a>表单处理</h2><ul>\n<li><p>name属性 是用来提供给服务端接收数据而设置的</p>\n</li>\n<li><p>action属性 设置接收数据的处理程序</p>\n</li>\n<li><p>method属性    设置发送数据的方式</p>\n</li>\n<li><p>当上传文件时，必须设置 <code>enctype=&quot;multipart/form-data&quot;</code>,且只能使用post方式</p>\n</li>\n<li><p>$_GET    接收get传来的数据</p>\n</li>\n<li><p>$_POST    接收post传来数据</p>\n</li>\n<li><p>$_FILES    接收上传的文件</p>\n</li>\n</ul>\n<h2 id=\"get和post提交\"><a href=\"#get和post提交\" class=\"headerlink\" title=\"get和post提交\"></a>get和post提交</h2><ol>\n<li><p>get</p>\n<ul>\n<li><p>点击超链接，表单提交默认方式就是get，地址栏输入地址，</p>\n</li>\n<li><p>传递到服务端的都是参数，参数值，可以传递多个参数参数值</p>\n</li>\n<li>第一个必须是？ 参数名=参数值</li>\n<li>可以发送多个参数到服务器</li>\n<li>假设我要发送多个数据，</li>\n<li><p>第二个参数之前添加&amp;字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;01.php?username=zs&amp;age=12&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在php要对请求进行处理，处理我们分为三个步骤，</p>\n</li>\n</ul>\n<ol>\n<li>接收请求，接收客户端传递到服务端的数据，<ul>\n<li>如果客户端是get方式提交，用$_GET去接收数据，对应的值是一个数组，是一个关联数组。</li>\n</ul>\n</li>\n<li>处理请求：    接收到数据之后具体做什么，就是要使用php去操作了。</li>\n<li>响应处理，给客户端一个响应</li>\n</ol>\n</li>\n<li><p>post提交</p>\n<ul>\n<li><p>表单提交一般都是使用post</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--post 提交，我需要表单提交，设置成post--&gt;</span><br><span class=\"line\">   &lt;form action=&quot;02post.php&quot; method=&quot;post&quot;&gt;</span><br><span class=\"line\">       用户名:&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class=\"line\">       &lt;input type=&quot;submit&quot; value=&quot;post 提交&quot;&gt;</span><br><span class=\"line\">   &lt;/form&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>服务端处理</p>\n</li>\n</ul>\n<ol>\n<li><p>接收请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$username = $_POST[&quot;username&quot;];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>处理请求</p>\n</li>\n</ol>\n<ul>\n<li>php后端处理数据</li>\n</ul>\n<ol>\n<li>完成响应</li>\n</ol>\n<ul>\n<li>返回信息到客户端</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><h4 id=\"前端页面\"><a href=\"#前端页面\" class=\"headerlink\" title=\"前端页面\"></a>前端页面</h4><ul>\n<li>必须满足以下条件才可以上传文件</li>\n</ul>\n<ol>\n<li><p>必须是表单提交</p>\n</li>\n<li><p>表单里面必须有 input type=”file”</p>\n</li>\n<li><p>必须是post方式提交</p>\n</li>\n<li><p>必须设置 <code>enctype=&quot;multipart/form-data&quot;</code>属性</p>\n</li>\n</ol>"},{"title":"什么是ajax","date":"2016-04-24T09:16:19.000Z","_content":" >  什么是ajax\n\n##  1. 同步交互\n   客户端请求服务器，服务器接收到请求，处理请求，然后给客户端一个响应，\n响应的数据会把原来的页面给覆盖。我们把这种交互成为同步交互.\n##  2.  异步交互\n    客户端请求服务器,服务器接收到请求，处理请求，然后给客户端一个响应，\n响应的数据不会把原来的页面给覆盖。我们把这种交互成为异步交互.\n\n**异步交互实际上就是页面不刷新，就可以动态的去获取服务端的数据**\n\n它是怎么做到的，为什么能够去获取到服务端的数据，它的原理是什么.\n通过XMLHttpRequest 对象去发送http 请求.\n\n###  XMLHttpRequest 交互的几个步骤\n\n1.  创建这样的一个对象\n2.  我要跟服务端建立一个连接\n3.  我要在连接上面发送数据\n4.  接收服务端返回的数据\n\n页面不刷新，就完成了跟服务器端的数据交互.\n\n####    我假设以后我们做登录是同步交互，还是做异步交互.\n<form action=\"login.php\">\n    昵称：<input type=\"text\" name=\"username\" id=\"username\" >\n    <span id=\"message\"></span>\n    <br><br>\n    密码：<input type=\"password\" name=\"password\"><br><br>\n    <input type=\"submit\" value=\"登录\">\n</form>\n\n-    如果我是做同步登录\n\n肯定是服务器得到我的请求，决定给我输出什么样的数据。\n\n-   如果是做异步登录\n\n<!-- more -->\n给登录按钮添加点击事件，然后获取到用户名，以及密码\n然后通过XMLHttpRequest 对象发送请求给服务器，服务器返回数据\n返回了数据之后，然后接收到数据，\n我肯定是登陆成功，还是失败，然后由客户端来完成跳转\nwindow.location.href=\"\";\n\n##  ajax运行过程\n\n我们做ajax 开发，客户端发送一个请求给服务器，服务器返回数据。\n返回了数据之后，我通过js 得到数据，得到了数据之后，我把这个数据渲染到页面上面.\n\n##  xml和json\n如果跟服务器进行交互，如果传递的数据格式非常大，非常多的情况下，我们一般给传递是数据规定一个格式.\n\n这个格式有两种，目前市场上面，一种是xml 的数据格式，还有一种是json 的数据格式.\nxml 跟这个json 都是数据格式。\n\n####      xml\n>   xml 到底是什么样的数据格式\n\nxml 是 **可扩展的标记语言**，html是**超文本标记语言**，都是由**标记**，**标签**组成，\n-   xml \n    -   它里面的标签是自定义的，<person></person>\n    -   主要是用来做软件的配置文件，用来做数据的传输，xml 一般自己写解析\n-   xml 里面的标记的语法：\n       -    第一：第一行必须是文档申明  <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n       -    第二：必须有且仅有一个根元素\n       -    第三：标签可以嵌套，不能交叉嵌套   `<persons><person></person></persons>`\n-   html \n    -   里面的标记 是w3c 指定的需要按照w3c 指定的规范去编写\n    -   主要是用来做界面显示的，浏览器解析.\n\n-   一般每一门语言对xml，以及json 都有解决方案\n","source":"_posts/ajax是什么.md","raw":"---\ntitle: 什么是ajax\ntags: [ajax]\ndate: 2016-04-24 17:16:19\n---\n >  什么是ajax\n\n##  1. 同步交互\n   客户端请求服务器，服务器接收到请求，处理请求，然后给客户端一个响应，\n响应的数据会把原来的页面给覆盖。我们把这种交互成为同步交互.\n##  2.  异步交互\n    客户端请求服务器,服务器接收到请求，处理请求，然后给客户端一个响应，\n响应的数据不会把原来的页面给覆盖。我们把这种交互成为异步交互.\n\n**异步交互实际上就是页面不刷新，就可以动态的去获取服务端的数据**\n\n它是怎么做到的，为什么能够去获取到服务端的数据，它的原理是什么.\n通过XMLHttpRequest 对象去发送http 请求.\n\n###  XMLHttpRequest 交互的几个步骤\n\n1.  创建这样的一个对象\n2.  我要跟服务端建立一个连接\n3.  我要在连接上面发送数据\n4.  接收服务端返回的数据\n\n页面不刷新，就完成了跟服务器端的数据交互.\n\n####    我假设以后我们做登录是同步交互，还是做异步交互.\n<form action=\"login.php\">\n    昵称：<input type=\"text\" name=\"username\" id=\"username\" >\n    <span id=\"message\"></span>\n    <br><br>\n    密码：<input type=\"password\" name=\"password\"><br><br>\n    <input type=\"submit\" value=\"登录\">\n</form>\n\n-    如果我是做同步登录\n\n肯定是服务器得到我的请求，决定给我输出什么样的数据。\n\n-   如果是做异步登录\n\n<!-- more -->\n给登录按钮添加点击事件，然后获取到用户名，以及密码\n然后通过XMLHttpRequest 对象发送请求给服务器，服务器返回数据\n返回了数据之后，然后接收到数据，\n我肯定是登陆成功，还是失败，然后由客户端来完成跳转\nwindow.location.href=\"\";\n\n##  ajax运行过程\n\n我们做ajax 开发，客户端发送一个请求给服务器，服务器返回数据。\n返回了数据之后，我通过js 得到数据，得到了数据之后，我把这个数据渲染到页面上面.\n\n##  xml和json\n如果跟服务器进行交互，如果传递的数据格式非常大，非常多的情况下，我们一般给传递是数据规定一个格式.\n\n这个格式有两种，目前市场上面，一种是xml 的数据格式，还有一种是json 的数据格式.\nxml 跟这个json 都是数据格式。\n\n####      xml\n>   xml 到底是什么样的数据格式\n\nxml 是 **可扩展的标记语言**，html是**超文本标记语言**，都是由**标记**，**标签**组成，\n-   xml \n    -   它里面的标签是自定义的，<person></person>\n    -   主要是用来做软件的配置文件，用来做数据的传输，xml 一般自己写解析\n-   xml 里面的标记的语法：\n       -    第一：第一行必须是文档申明  <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n       -    第二：必须有且仅有一个根元素\n       -    第三：标签可以嵌套，不能交叉嵌套   `<persons><person></person></persons>`\n-   html \n    -   里面的标记 是w3c 指定的需要按照w3c 指定的规范去编写\n    -   主要是用来做界面显示的，浏览器解析.\n\n-   一般每一门语言对xml，以及json 都有解决方案\n","slug":"ajax是什么","published":1,"updated":"2018-01-31T12:39:09.799Z","_id":"cjd30vw4d000d581ixwlhol9a","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p> 什么是ajax</p>\n</blockquote>\n<h2 id=\"1-同步交互\"><a href=\"#1-同步交互\" class=\"headerlink\" title=\"1. 同步交互\"></a>1. 同步交互</h2><p>   客户端请求服务器，服务器接收到请求，处理请求，然后给客户端一个响应，<br>响应的数据会把原来的页面给覆盖。我们把这种交互成为同步交互.</p>\n<h2 id=\"2-异步交互\"><a href=\"#2-异步交互\" class=\"headerlink\" title=\"2.  异步交互\"></a>2.  异步交互</h2><pre><code>客户端请求服务器,服务器接收到请求，处理请求，然后给客户端一个响应，\n</code></pre><p>响应的数据不会把原来的页面给覆盖。我们把这种交互成为异步交互.</p>\n<p><strong>异步交互实际上就是页面不刷新，就可以动态的去获取服务端的数据</strong></p>\n<p>它是怎么做到的，为什么能够去获取到服务端的数据，它的原理是什么.<br>通过XMLHttpRequest 对象去发送http 请求.</p>\n<h3 id=\"XMLHttpRequest-交互的几个步骤\"><a href=\"#XMLHttpRequest-交互的几个步骤\" class=\"headerlink\" title=\"XMLHttpRequest 交互的几个步骤\"></a>XMLHttpRequest 交互的几个步骤</h3><ol>\n<li>创建这样的一个对象</li>\n<li>我要跟服务端建立一个连接</li>\n<li>我要在连接上面发送数据</li>\n<li>接收服务端返回的数据</li>\n</ol>\n<p>页面不刷新，就完成了跟服务器端的数据交互.</p>\n<h4 id=\"我假设以后我们做登录是同步交互，还是做异步交互\"><a href=\"#我假设以后我们做登录是同步交互，还是做异步交互\" class=\"headerlink\" title=\"我假设以后我们做登录是同步交互，还是做异步交互.\"></a>我假设以后我们做登录是同步交互，还是做异步交互.</h4><form action=\"login.php\"><br>    昵称：<input type=\"text\" name=\"username\" id=\"username\"><br>    <span id=\"message\"></span><br>    <br><br><br>    密码：<input type=\"password\" name=\"password\"><br><br><br>    <input type=\"submit\" value=\"登录\"><br></form>\n\n<ul>\n<li>如果我是做同步登录</li>\n</ul>\n<p>肯定是服务器得到我的请求，决定给我输出什么样的数据。</p>\n<ul>\n<li>如果是做异步登录</li>\n</ul>\n<a id=\"more\"></a>\n<p>给登录按钮添加点击事件，然后获取到用户名，以及密码<br>然后通过XMLHttpRequest 对象发送请求给服务器，服务器返回数据<br>返回了数据之后，然后接收到数据，<br>我肯定是登陆成功，还是失败，然后由客户端来完成跳转<br>window.location.href=””;</p>\n<h2 id=\"ajax运行过程\"><a href=\"#ajax运行过程\" class=\"headerlink\" title=\"ajax运行过程\"></a>ajax运行过程</h2><p>我们做ajax 开发，客户端发送一个请求给服务器，服务器返回数据。<br>返回了数据之后，我通过js 得到数据，得到了数据之后，我把这个数据渲染到页面上面.</p>\n<h2 id=\"xml和json\"><a href=\"#xml和json\" class=\"headerlink\" title=\"xml和json\"></a>xml和json</h2><p>如果跟服务器进行交互，如果传递的数据格式非常大，非常多的情况下，我们一般给传递是数据规定一个格式.</p>\n<p>这个格式有两种，目前市场上面，一种是xml 的数据格式，还有一种是json 的数据格式.<br>xml 跟这个json 都是数据格式。</p>\n<h4 id=\"xml\"><a href=\"#xml\" class=\"headerlink\" title=\"xml\"></a>xml</h4><blockquote>\n<p>  xml 到底是什么样的数据格式</p>\n</blockquote>\n<p>xml 是 <strong>可扩展的标记语言</strong>，html是<strong>超文本标记语言</strong>，都是由<strong>标记</strong>，<strong>标签</strong>组成，</p>\n<ul>\n<li>xml <ul>\n<li>它里面的标签是自定义的，<person></person></li>\n<li>主要是用来做软件的配置文件，用来做数据的传输，xml 一般自己写解析</li>\n</ul>\n</li>\n<li>xml 里面的标记的语法：<ul>\n<li>第一：第一行必须是文档申明  &lt;?xml version=”1.0” encoding=”utf-8” ?&gt;</li>\n<li>第二：必须有且仅有一个根元素</li>\n<li>第三：标签可以嵌套，不能交叉嵌套   <code>&lt;persons&gt;&lt;person&gt;&lt;/person&gt;&lt;/persons&gt;</code></li>\n</ul>\n</li>\n<li><p>html </p>\n<ul>\n<li>里面的标记 是w3c 指定的需要按照w3c 指定的规范去编写</li>\n<li>主要是用来做界面显示的，浏览器解析.</li>\n</ul>\n</li>\n<li><p>一般每一门语言对xml，以及json 都有解决方案</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p> 什么是ajax</p>\n</blockquote>\n<h2 id=\"1-同步交互\"><a href=\"#1-同步交互\" class=\"headerlink\" title=\"1. 同步交互\"></a>1. 同步交互</h2><p>   客户端请求服务器，服务器接收到请求，处理请求，然后给客户端一个响应，<br>响应的数据会把原来的页面给覆盖。我们把这种交互成为同步交互.</p>\n<h2 id=\"2-异步交互\"><a href=\"#2-异步交互\" class=\"headerlink\" title=\"2.  异步交互\"></a>2.  异步交互</h2><pre><code>客户端请求服务器,服务器接收到请求，处理请求，然后给客户端一个响应，\n</code></pre><p>响应的数据不会把原来的页面给覆盖。我们把这种交互成为异步交互.</p>\n<p><strong>异步交互实际上就是页面不刷新，就可以动态的去获取服务端的数据</strong></p>\n<p>它是怎么做到的，为什么能够去获取到服务端的数据，它的原理是什么.<br>通过XMLHttpRequest 对象去发送http 请求.</p>\n<h3 id=\"XMLHttpRequest-交互的几个步骤\"><a href=\"#XMLHttpRequest-交互的几个步骤\" class=\"headerlink\" title=\"XMLHttpRequest 交互的几个步骤\"></a>XMLHttpRequest 交互的几个步骤</h3><ol>\n<li>创建这样的一个对象</li>\n<li>我要跟服务端建立一个连接</li>\n<li>我要在连接上面发送数据</li>\n<li>接收服务端返回的数据</li>\n</ol>\n<p>页面不刷新，就完成了跟服务器端的数据交互.</p>\n<h4 id=\"我假设以后我们做登录是同步交互，还是做异步交互\"><a href=\"#我假设以后我们做登录是同步交互，还是做异步交互\" class=\"headerlink\" title=\"我假设以后我们做登录是同步交互，还是做异步交互.\"></a>我假设以后我们做登录是同步交互，还是做异步交互.</h4><form action=\"login.php\"><br>    昵称：<input type=\"text\" name=\"username\" id=\"username\"><br>    <span id=\"message\"></span><br>    <br><br><br>    密码：<input type=\"password\" name=\"password\"><br><br><br>    <input type=\"submit\" value=\"登录\"><br></form>\n\n<ul>\n<li>如果我是做同步登录</li>\n</ul>\n<p>肯定是服务器得到我的请求，决定给我输出什么样的数据。</p>\n<ul>\n<li>如果是做异步登录</li>\n</ul>","more":"<p>给登录按钮添加点击事件，然后获取到用户名，以及密码<br>然后通过XMLHttpRequest 对象发送请求给服务器，服务器返回数据<br>返回了数据之后，然后接收到数据，<br>我肯定是登陆成功，还是失败，然后由客户端来完成跳转<br>window.location.href=””;</p>\n<h2 id=\"ajax运行过程\"><a href=\"#ajax运行过程\" class=\"headerlink\" title=\"ajax运行过程\"></a>ajax运行过程</h2><p>我们做ajax 开发，客户端发送一个请求给服务器，服务器返回数据。<br>返回了数据之后，我通过js 得到数据，得到了数据之后，我把这个数据渲染到页面上面.</p>\n<h2 id=\"xml和json\"><a href=\"#xml和json\" class=\"headerlink\" title=\"xml和json\"></a>xml和json</h2><p>如果跟服务器进行交互，如果传递的数据格式非常大，非常多的情况下，我们一般给传递是数据规定一个格式.</p>\n<p>这个格式有两种，目前市场上面，一种是xml 的数据格式，还有一种是json 的数据格式.<br>xml 跟这个json 都是数据格式。</p>\n<h4 id=\"xml\"><a href=\"#xml\" class=\"headerlink\" title=\"xml\"></a>xml</h4><blockquote>\n<p>  xml 到底是什么样的数据格式</p>\n</blockquote>\n<p>xml 是 <strong>可扩展的标记语言</strong>，html是<strong>超文本标记语言</strong>，都是由<strong>标记</strong>，<strong>标签</strong>组成，</p>\n<ul>\n<li>xml <ul>\n<li>它里面的标签是自定义的，<person></person></li>\n<li>主要是用来做软件的配置文件，用来做数据的传输，xml 一般自己写解析</li>\n</ul>\n</li>\n<li>xml 里面的标记的语法：<ul>\n<li>第一：第一行必须是文档申明  &lt;?xml version=”1.0” encoding=”utf-8” ?&gt;</li>\n<li>第二：必须有且仅有一个根元素</li>\n<li>第三：标签可以嵌套，不能交叉嵌套   <code>&lt;persons&gt;&lt;person&gt;&lt;/person&gt;&lt;/persons&gt;</code></li>\n</ul>\n</li>\n<li><p>html </p>\n<ul>\n<li>里面的标记 是w3c 指定的需要按照w3c 指定的规范去编写</li>\n<li>主要是用来做界面显示的，浏览器解析.</li>\n</ul>\n</li>\n<li><p>一般每一门语言对xml，以及json 都有解决方案</p>\n</li>\n</ul>"},{"title":"Canvas入门1","date":"2016-09-10T13:22:24.000Z","_content":"\n1. 概念：中文：“画布，帆布”\n   HTML5提出一个新的标签。可以通过脚本语言（JS）在其上面绘制图形、图像以及制作动画。\n\n2. 基本使用\n* 创建Canvas标签，同时指定canvas标签的大小；如果不指定的话，默认值为 300 * 150 （px）\n   如果想动态改变canvas的宽和高，必须通过其属性节点width以及height来改变，不能通过css样式来改变。\n* 通过js获取到canvas对象。本身Canvas不具备绘图能力。\n* 通过Canvas对象调用getContext方法来获取绘图的API方法\n* 使用获取到绘图工具来绘制图形\n\n3. getContext方法\n* 语法: <canvas对象>.getContext('2d|WebGL');\n* 功能：获取绘制平面图形或立体图形的api方法以及相关属性；如果参数值为'2d'\n   ，表示获取绘制平面图形的工具；如果参数值为'WebGL',表示获取绘制立体图形的工具。\n\n4. 基本绘图API\n* ctx.moveTo(x, y) 移动笔触到指定点。\n* ctx.lineTo(x, y) 从笔触所在点连线到指定点\n* ctx.stroke(); 将当前路径绘制的图形描绘其边框\n* ctx.fill(); 填充一个封闭的图形（将当前路径形成一个封闭图形，然后在填充。）\n* stroke方法与fill方法可以同时调用\n\n<!-- more -->\n\n5. 开启新路径的方法\n* ctx.beginPath();\n\n6. 闭合路径的方法\n* ctx.closePath();\n  如果当前路径，没有形成一个封闭的图形，可以调用该方法来将图形闭合。\n* 注意：beginPath与closePath不需要成对出现\n\n7. 非零环绕原则：是用来判断某一封闭的区域是否要填充。\n   如果想判断指定区域是否填充，就在该区域内选择任意点，然后从该点引出一条射线，穿过整个图形到外部。查看该射线与图形的相交线，如果相交线是顺时针穿出射线，计数 + 1；如果是逆时针穿出射线，计数 -1；如果最后所有计数累加在一起，值不为0就填充该区域;\n\n 如果相交线是自上而下的穿出射线，即为顺时针穿出，计数 +1\n 如果相交线是自下而上的穿出射线，即为逆时针穿出，计数 -1\n\n8. 奇偶原则：是用来判断某一封闭的区域是否要填充\n   如果想判断指定区域是否填充，就在该区域内选择任意点，然后从该点引出一条射线，穿过整个图形到外部。查看该射线与图形的相交线的个数。如果为奇数，那么就填充；如果为偶数就不填充。\n\n### 线性相关属性\n\n1. 设置线宽\n* ctx.lineWidth = value;","source":"_posts/canvas入门1.md","raw":"---\ntitle: Canvas入门1\ndate: 2016-09-10 21:22:24\ntags: [JS,canvas,画布]\n---\n\n1. 概念：中文：“画布，帆布”\n   HTML5提出一个新的标签。可以通过脚本语言（JS）在其上面绘制图形、图像以及制作动画。\n\n2. 基本使用\n* 创建Canvas标签，同时指定canvas标签的大小；如果不指定的话，默认值为 300 * 150 （px）\n   如果想动态改变canvas的宽和高，必须通过其属性节点width以及height来改变，不能通过css样式来改变。\n* 通过js获取到canvas对象。本身Canvas不具备绘图能力。\n* 通过Canvas对象调用getContext方法来获取绘图的API方法\n* 使用获取到绘图工具来绘制图形\n\n3. getContext方法\n* 语法: <canvas对象>.getContext('2d|WebGL');\n* 功能：获取绘制平面图形或立体图形的api方法以及相关属性；如果参数值为'2d'\n   ，表示获取绘制平面图形的工具；如果参数值为'WebGL',表示获取绘制立体图形的工具。\n\n4. 基本绘图API\n* ctx.moveTo(x, y) 移动笔触到指定点。\n* ctx.lineTo(x, y) 从笔触所在点连线到指定点\n* ctx.stroke(); 将当前路径绘制的图形描绘其边框\n* ctx.fill(); 填充一个封闭的图形（将当前路径形成一个封闭图形，然后在填充。）\n* stroke方法与fill方法可以同时调用\n\n<!-- more -->\n\n5. 开启新路径的方法\n* ctx.beginPath();\n\n6. 闭合路径的方法\n* ctx.closePath();\n  如果当前路径，没有形成一个封闭的图形，可以调用该方法来将图形闭合。\n* 注意：beginPath与closePath不需要成对出现\n\n7. 非零环绕原则：是用来判断某一封闭的区域是否要填充。\n   如果想判断指定区域是否填充，就在该区域内选择任意点，然后从该点引出一条射线，穿过整个图形到外部。查看该射线与图形的相交线，如果相交线是顺时针穿出射线，计数 + 1；如果是逆时针穿出射线，计数 -1；如果最后所有计数累加在一起，值不为0就填充该区域;\n\n 如果相交线是自上而下的穿出射线，即为顺时针穿出，计数 +1\n 如果相交线是自下而上的穿出射线，即为逆时针穿出，计数 -1\n\n8. 奇偶原则：是用来判断某一封闭的区域是否要填充\n   如果想判断指定区域是否填充，就在该区域内选择任意点，然后从该点引出一条射线，穿过整个图形到外部。查看该射线与图形的相交线的个数。如果为奇数，那么就填充；如果为偶数就不填充。\n\n### 线性相关属性\n\n1. 设置线宽\n* ctx.lineWidth = value;","slug":"canvas入门1","published":1,"updated":"2018-01-31T12:39:09.805Z","_id":"cjd30vw4m000f581iw2d0ijv2","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li><p>概念：中文：“画布，帆布”<br>HTML5提出一个新的标签。可以通过脚本语言（JS）在其上面绘制图形、图像以及制作动画。</p>\n</li>\n<li><p>基本使用</p>\n</li>\n</ol>\n<ul>\n<li>创建Canvas标签，同时指定canvas标签的大小；如果不指定的话，默认值为 300 * 150 （px）<br> 如果想动态改变canvas的宽和高，必须通过其属性节点width以及height来改变，不能通过css样式来改变。</li>\n<li>通过js获取到canvas对象。本身Canvas不具备绘图能力。</li>\n<li>通过Canvas对象调用getContext方法来获取绘图的API方法</li>\n<li>使用获取到绘图工具来绘制图形</li>\n</ul>\n<ol>\n<li>getContext方法</li>\n</ol>\n<ul>\n<li>语法: <canvas对象>.getContext(‘2d|WebGL’);</canvas对象></li>\n<li>功能：获取绘制平面图形或立体图形的api方法以及相关属性；如果参数值为’2d’<br> ，表示获取绘制平面图形的工具；如果参数值为’WebGL’,表示获取绘制立体图形的工具。</li>\n</ul>\n<ol>\n<li>基本绘图API</li>\n</ol>\n<ul>\n<li>ctx.moveTo(x, y) 移动笔触到指定点。</li>\n<li>ctx.lineTo(x, y) 从笔触所在点连线到指定点</li>\n<li>ctx.stroke(); 将当前路径绘制的图形描绘其边框</li>\n<li>ctx.fill(); 填充一个封闭的图形（将当前路径形成一个封闭图形，然后在填充。）</li>\n<li>stroke方法与fill方法可以同时调用</li>\n</ul>\n<a id=\"more\"></a>\n<ol>\n<li>开启新路径的方法</li>\n</ol>\n<ul>\n<li>ctx.beginPath();</li>\n</ul>\n<ol>\n<li>闭合路径的方法</li>\n</ol>\n<ul>\n<li>ctx.closePath();<br>如果当前路径，没有形成一个封闭的图形，可以调用该方法来将图形闭合。</li>\n<li>注意：beginPath与closePath不需要成对出现</li>\n</ul>\n<ol>\n<li><p>非零环绕原则：是用来判断某一封闭的区域是否要填充。<br>如果想判断指定区域是否填充，就在该区域内选择任意点，然后从该点引出一条射线，穿过整个图形到外部。查看该射线与图形的相交线，如果相交线是顺时针穿出射线，计数 + 1；如果是逆时针穿出射线，计数 -1；如果最后所有计数累加在一起，值不为0就填充该区域;</p>\n<p>如果相交线是自上而下的穿出射线，即为顺时针穿出，计数 +1<br>如果相交线是自下而上的穿出射线，即为逆时针穿出，计数 -1</p>\n</li>\n<li><p>奇偶原则：是用来判断某一封闭的区域是否要填充<br>如果想判断指定区域是否填充，就在该区域内选择任意点，然后从该点引出一条射线，穿过整个图形到外部。查看该射线与图形的相交线的个数。如果为奇数，那么就填充；如果为偶数就不填充。</p>\n</li>\n</ol>\n<h3 id=\"线性相关属性\"><a href=\"#线性相关属性\" class=\"headerlink\" title=\"线性相关属性\"></a>线性相关属性</h3><ol>\n<li>设置线宽</li>\n</ol>\n<ul>\n<li>ctx.lineWidth = value;</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>概念：中文：“画布，帆布”<br>HTML5提出一个新的标签。可以通过脚本语言（JS）在其上面绘制图形、图像以及制作动画。</p>\n</li>\n<li><p>基本使用</p>\n</li>\n</ol>\n<ul>\n<li>创建Canvas标签，同时指定canvas标签的大小；如果不指定的话，默认值为 300 * 150 （px）<br> 如果想动态改变canvas的宽和高，必须通过其属性节点width以及height来改变，不能通过css样式来改变。</li>\n<li>通过js获取到canvas对象。本身Canvas不具备绘图能力。</li>\n<li>通过Canvas对象调用getContext方法来获取绘图的API方法</li>\n<li>使用获取到绘图工具来绘制图形</li>\n</ul>\n<ol>\n<li>getContext方法</li>\n</ol>\n<ul>\n<li>语法: <canvas对象>.getContext(‘2d|WebGL’);</canvas对象></li>\n<li>功能：获取绘制平面图形或立体图形的api方法以及相关属性；如果参数值为’2d’<br> ，表示获取绘制平面图形的工具；如果参数值为’WebGL’,表示获取绘制立体图形的工具。</li>\n</ul>\n<ol>\n<li>基本绘图API</li>\n</ol>\n<ul>\n<li>ctx.moveTo(x, y) 移动笔触到指定点。</li>\n<li>ctx.lineTo(x, y) 从笔触所在点连线到指定点</li>\n<li>ctx.stroke(); 将当前路径绘制的图形描绘其边框</li>\n<li>ctx.fill(); 填充一个封闭的图形（将当前路径形成一个封闭图形，然后在填充。）</li>\n<li>stroke方法与fill方法可以同时调用</li>\n</ul>","more":"<ol>\n<li>开启新路径的方法</li>\n</ol>\n<ul>\n<li>ctx.beginPath();</li>\n</ul>\n<ol>\n<li>闭合路径的方法</li>\n</ol>\n<ul>\n<li>ctx.closePath();<br>如果当前路径，没有形成一个封闭的图形，可以调用该方法来将图形闭合。</li>\n<li>注意：beginPath与closePath不需要成对出现</li>\n</ul>\n<ol>\n<li><p>非零环绕原则：是用来判断某一封闭的区域是否要填充。<br>如果想判断指定区域是否填充，就在该区域内选择任意点，然后从该点引出一条射线，穿过整个图形到外部。查看该射线与图形的相交线，如果相交线是顺时针穿出射线，计数 + 1；如果是逆时针穿出射线，计数 -1；如果最后所有计数累加在一起，值不为0就填充该区域;</p>\n<p>如果相交线是自上而下的穿出射线，即为顺时针穿出，计数 +1<br>如果相交线是自下而上的穿出射线，即为逆时针穿出，计数 -1</p>\n</li>\n<li><p>奇偶原则：是用来判断某一封闭的区域是否要填充<br>如果想判断指定区域是否填充，就在该区域内选择任意点，然后从该点引出一条射线，穿过整个图形到外部。查看该射线与图形的相交线的个数。如果为奇数，那么就填充；如果为偶数就不填充。</p>\n</li>\n</ol>\n<h3 id=\"线性相关属性\"><a href=\"#线性相关属性\" class=\"headerlink\" title=\"线性相关属性\"></a>线性相关属性</h3><ol>\n<li>设置线宽</li>\n</ol>\n<ul>\n<li>ctx.lineWidth = value;</li>\n</ul>"},{"title":"canvas入门2","date":"2016-09-11T00:54:50.000Z","_content":"\n* 懒加载：现在不加载，用的时候再加载，\n\n## 案例\n1.  移动的小球 实线思路：\n    - 简单版\n    1.  利用计时器，定时执行\n    2.  首先绘制一个圆形，圆从左上角出来，然后定时改变圆心的位置，再进行绘制，\n    3.  等到x轴的坐标大于w或者小于0，改变每一步的正负值，使其反向运动，\n    - 鼠标进入再鼠标所在位置绘制圆形，然后开始下落\n\n2. 时钟案例\n\n<!-- more -->\n    - 实现效果\n       ![cloc](/images/clock.png)\n    - 实现思路\n\n    1.  ​绘制表盘\n\n## 待续","source":"_posts/canvas入门2.md","raw":"---\ntitle: canvas入门2\ndate: 2016-09-11 08:54:50\ntags: [JS,Canvas,画布]\n---\n\n* 懒加载：现在不加载，用的时候再加载，\n\n## 案例\n1.  移动的小球 实线思路：\n    - 简单版\n    1.  利用计时器，定时执行\n    2.  首先绘制一个圆形，圆从左上角出来，然后定时改变圆心的位置，再进行绘制，\n    3.  等到x轴的坐标大于w或者小于0，改变每一步的正负值，使其反向运动，\n    - 鼠标进入再鼠标所在位置绘制圆形，然后开始下落\n\n2. 时钟案例\n\n<!-- more -->\n    - 实现效果\n       ![cloc](/images/clock.png)\n    - 实现思路\n\n    1.  ​绘制表盘\n\n## 待续","slug":"canvas入门2","published":1,"updated":"2018-01-31T12:34:48.517Z","_id":"cjd30vw54000i581icxg3o8d0","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>懒加载：现在不加载，用的时候再加载，</li>\n</ul>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><ol>\n<li><p>移动的小球 实线思路：</p>\n<ul>\n<li>简单版</li>\n</ul>\n<ol>\n<li>利用计时器，定时执行</li>\n<li>首先绘制一个圆形，圆从左上角出来，然后定时改变圆心的位置，再进行绘制，</li>\n<li>等到x轴的坐标大于w或者小于0，改变每一步的正负值，使其反向运动，</li>\n</ol>\n<ul>\n<li>鼠标进入再鼠标所在位置绘制圆形，然后开始下落</li>\n</ul>\n</li>\n<li><p>时钟案例</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<pre><code>- 实现效果\n   ![cloc](/images/clock.png)\n- 实现思路\n\n1.  ​绘制表盘\n</code></pre><h2 id=\"待续\"><a href=\"#待续\" class=\"headerlink\" title=\"待续\"></a>待续</h2>","site":{"data":{}},"excerpt":"<ul>\n<li>懒加载：现在不加载，用的时候再加载，</li>\n</ul>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><ol>\n<li><p>移动的小球 实线思路：</p>\n<ul>\n<li>简单版</li>\n</ul>\n<ol>\n<li>利用计时器，定时执行</li>\n<li>首先绘制一个圆形，圆从左上角出来，然后定时改变圆心的位置，再进行绘制，</li>\n<li>等到x轴的坐标大于w或者小于0，改变每一步的正负值，使其反向运动，</li>\n</ol>\n<ul>\n<li>鼠标进入再鼠标所在位置绘制圆形，然后开始下落</li>\n</ul>\n</li>\n<li><p>时钟案例</p>\n</li>\n</ol>","more":"<pre><code>- 实现效果\n   ![cloc](/images/clock.png)\n- 实现思路\n\n1.  ​绘制表盘\n</code></pre><h2 id=\"待续\"><a href=\"#待续\" class=\"headerlink\" title=\"待续\"></a>待续</h2>"},{"title":"centos-01","date":"2017-03-03T07:44:10.000Z","_content":"##  常用命令\n\n    ```bash\n    //查看当前centos系统的版本\n    cat /etc/redhat-release\n    //查看系统内核版本是32位还是64位\n    uname -r\n    //安装cnpm\n    npm install cnpm -g --registry=https://registry.npm.taobao.org\n    ```\n\n##  添加用户\n\n>   在企业生产中，一般不会直接使用root来操作，可以通过命令创建用户，并且进行切换，普通用户下，前边显示的是$符号，root下显示的是#\n\n<!-- more -->\n\n\n```bash\nuseradd username    //添加用户名\npasswd username     //给刚才添加的用户，设置密码，然后会提示输入密码，输入两次就可以了\nsu - username       //可以切换到指定的用户\nsu - root           //可以切换到root\nwhoami              //可以查看当前用户是谁\n\n```","source":"_posts/centos-01.md","raw":"---\ntitle: centos-01\ntags: [centos]\ndate: 2017-03-03 15:44:10\n---\n##  常用命令\n\n    ```bash\n    //查看当前centos系统的版本\n    cat /etc/redhat-release\n    //查看系统内核版本是32位还是64位\n    uname -r\n    //安装cnpm\n    npm install cnpm -g --registry=https://registry.npm.taobao.org\n    ```\n\n##  添加用户\n\n>   在企业生产中，一般不会直接使用root来操作，可以通过命令创建用户，并且进行切换，普通用户下，前边显示的是$符号，root下显示的是#\n\n<!-- more -->\n\n\n```bash\nuseradd username    //添加用户名\npasswd username     //给刚才添加的用户，设置密码，然后会提示输入密码，输入两次就可以了\nsu - username       //可以切换到指定的用户\nsu - root           //可以切换到root\nwhoami              //可以查看当前用户是谁\n\n```","slug":"centos-01","published":1,"updated":"2018-01-31T12:34:56.746Z","_id":"cjd30vw5a000k581iafenr4n5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看当前centos系统的版本</span><br><span class=\"line\">cat /etc/redhat-release</span><br><span class=\"line\">//查看系统内核版本是32位还是64位</span><br><span class=\"line\">uname -r</span><br><span class=\"line\">//安装cnpm</span><br><span class=\"line\">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h2><blockquote>\n<p>  在企业生产中，一般不会直接使用root来操作，可以通过命令创建用户，并且进行切换，普通用户下，前边显示的是$符号，root下显示的是#</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd username    //添加用户名</span><br><span class=\"line\">passwd username     //给刚才添加的用户，设置密码，然后会提示输入密码，输入两次就可以了</span><br><span class=\"line\">su - username       //可以切换到指定的用户</span><br><span class=\"line\">su - root           //可以切换到root</span><br><span class=\"line\">whoami              //可以查看当前用户是谁</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看当前centos系统的版本</span><br><span class=\"line\">cat /etc/redhat-release</span><br><span class=\"line\">//查看系统内核版本是32位还是64位</span><br><span class=\"line\">uname -r</span><br><span class=\"line\">//安装cnpm</span><br><span class=\"line\">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h2><blockquote>\n<p>  在企业生产中，一般不会直接使用root来操作，可以通过命令创建用户，并且进行切换，普通用户下，前边显示的是$符号，root下显示的是#</p>\n</blockquote>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd username    //添加用户名</span><br><span class=\"line\">passwd username     //给刚才添加的用户，设置密码，然后会提示输入密码，输入两次就可以了</span><br><span class=\"line\">su - username       //可以切换到指定的用户</span><br><span class=\"line\">su - root           //可以切换到root</span><br><span class=\"line\">whoami              //可以查看当前用户是谁</span><br></pre></td></tr></table></figure>"},{"title":"css变形","date":"2017-07-11T01:23:13.000Z","_content":"<h1>css变形</h1>\n\n>   我们可以借助css3实现图片元素的倾斜、缩放、移动、以及翻转效果。\n\n##  1.  tranfrom属性语法\n\n>   tranfrom属性让元素在一个坐标系统中变形，包含一系列变形函数，可以移动、旋转和缩放元素。\n\n\n```css\n    transfrom: none | <transfrom-function>\n```\n\n-   默认值为:none,表示不对元素进行变形;\n-   也可以指定一个或者多个变形函数，以空格分开。如：rotate、scale、trasnslate;\n\n##  2.  变形函数介绍\n\n<!-- more -->\n\n\n>   所有的2D变形函数可以应用于3D变形规范中。\n\n    函数 | 功能描述\n    ----|-------\n    translate() | 移动元素，可以根据X轴和Y轴坐标重新定位自己的位置，有tranlateX(),translateY()\n    scale() | 缩小或者方法元素，可以使元素尺寸发生变化，有scaleX()和scaleY()\n    rotate() | 旋转元素\n    skew() | 让元素倾斜，在此基础上有两个扩展函数，skewX()和skewY()\n    matrix()|定义矩阵变形，基于X轴和Y轴坐标重新定位元素位置\n\n","source":"_posts/css变形.md","raw":"---\ntitle: css变形\ntags: [css3]\ndate: 2017-07-11 09:23:13\n---\n<h1>css变形</h1>\n\n>   我们可以借助css3实现图片元素的倾斜、缩放、移动、以及翻转效果。\n\n##  1.  tranfrom属性语法\n\n>   tranfrom属性让元素在一个坐标系统中变形，包含一系列变形函数，可以移动、旋转和缩放元素。\n\n\n```css\n    transfrom: none | <transfrom-function>\n```\n\n-   默认值为:none,表示不对元素进行变形;\n-   也可以指定一个或者多个变形函数，以空格分开。如：rotate、scale、trasnslate;\n\n##  2.  变形函数介绍\n\n<!-- more -->\n\n\n>   所有的2D变形函数可以应用于3D变形规范中。\n\n    函数 | 功能描述\n    ----|-------\n    translate() | 移动元素，可以根据X轴和Y轴坐标重新定位自己的位置，有tranlateX(),translateY()\n    scale() | 缩小或者方法元素，可以使元素尺寸发生变化，有scaleX()和scaleY()\n    rotate() | 旋转元素\n    skew() | 让元素倾斜，在此基础上有两个扩展函数，skewX()和skewY()\n    matrix()|定义矩阵变形，基于X轴和Y轴坐标重新定位元素位置\n\n","slug":"css变形","published":1,"updated":"2018-01-31T12:35:05.792Z","_id":"cjd30vw6y000m581igv8l6o8d","comments":1,"layout":"post","photos":[],"link":"","content":"<h1>css变形</h1>\n\n<blockquote>\n<p>  我们可以借助css3实现图片元素的倾斜、缩放、移动、以及翻转效果。</p>\n</blockquote>\n<h2 id=\"1-tranfrom属性语法\"><a href=\"#1-tranfrom属性语法\" class=\"headerlink\" title=\"1.  tranfrom属性语法\"></a>1.  tranfrom属性语法</h2><blockquote>\n<p>  tranfrom属性让元素在一个坐标系统中变形，包含一系列变形函数，可以移动、旋转和缩放元素。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transfrom: none | &lt;transfrom-function&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>默认值为:none,表示不对元素进行变形;</li>\n<li>也可以指定一个或者多个变形函数，以空格分开。如：rotate、scale、trasnslate;</li>\n</ul>\n<h2 id=\"2-变形函数介绍\"><a href=\"#2-变形函数介绍\" class=\"headerlink\" title=\"2.  变形函数介绍\"></a>2.  变形函数介绍</h2><a id=\"more\"></a>\n<blockquote>\n<p>  所有的2D变形函数可以应用于3D变形规范中。</p>\n</blockquote>\n<pre><code>函数 | 功能描述\n----|-------\ntranslate() | 移动元素，可以根据X轴和Y轴坐标重新定位自己的位置，有tranlateX(),translateY()\nscale() | 缩小或者方法元素，可以使元素尺寸发生变化，有scaleX()和scaleY()\nrotate() | 旋转元素\nskew() | 让元素倾斜，在此基础上有两个扩展函数，skewX()和skewY()\nmatrix()|定义矩阵变形，基于X轴和Y轴坐标重新定位元素位置\n</code></pre>","site":{"data":{}},"excerpt":"<h1>css变形</h1>\n\n<blockquote>\n<p>  我们可以借助css3实现图片元素的倾斜、缩放、移动、以及翻转效果。</p>\n</blockquote>\n<h2 id=\"1-tranfrom属性语法\"><a href=\"#1-tranfrom属性语法\" class=\"headerlink\" title=\"1.  tranfrom属性语法\"></a>1.  tranfrom属性语法</h2><blockquote>\n<p>  tranfrom属性让元素在一个坐标系统中变形，包含一系列变形函数，可以移动、旋转和缩放元素。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transfrom: none | &lt;transfrom-function&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>默认值为:none,表示不对元素进行变形;</li>\n<li>也可以指定一个或者多个变形函数，以空格分开。如：rotate、scale、trasnslate;</li>\n</ul>\n<h2 id=\"2-变形函数介绍\"><a href=\"#2-变形函数介绍\" class=\"headerlink\" title=\"2.  变形函数介绍\"></a>2.  变形函数介绍</h2>","more":"<blockquote>\n<p>  所有的2D变形函数可以应用于3D变形规范中。</p>\n</blockquote>\n<pre><code>函数 | 功能描述\n----|-------\ntranslate() | 移动元素，可以根据X轴和Y轴坐标重新定位自己的位置，有tranlateX(),translateY()\nscale() | 缩小或者方法元素，可以使元素尺寸发生变化，有scaleX()和scaleY()\nrotate() | 旋转元素\nskew() | 让元素倾斜，在此基础上有两个扩展函数，skewX()和skewY()\nmatrix()|定义矩阵变形，基于X轴和Y轴坐标重新定位元素位置\n</code></pre>"},{"title":"git应用之git和github","date":"2016-05-15T02:26:02.000Z","_content":"##\tgit和github的区别\n\n-\tgit是一个软件，是一种版本控制工具，通过git命令提供的指令，方便管理源码，在实际开发时，可以将更多的经理集中在开发上，而不是要分出精力去管理代码的合并和版本控制问题。\n\n-\tgithub是一个网站，提供远程仓库，方便开发人员的交流学习。\n-\tgithub可以为git提供一些服务，比如 远程共享仓库，以及开发人员的交流平台。\n\n##\t配置SSH免密码下载\n\n-\tssh-keygen -t rsa\n\n##\tgit指令\n\n1.\t从远程服务器上获取指定仓库的分支，并且与工作目录的分支进行合并操作，如果出现问题，需要手动解决就好。\n\t\n\t```\n\tgit pull [remote url] branchName\n\t```\n\n<!-- more -->\n2.\t如果本地开发完成，要将本地仓库的版本提交到远程仓库，实现共享与项目合并，此时就是用这个指令。\n\t```\n\tgit push [remote url] branchName\n\t```\n\n3.\t获取远程仓库，但是不合并本地仓库\n\t```\n\tgit fetch [remote url] branchName\n\t```\n\n4.\t把远程仓库的地址存在变量name中，方便以后拉取远程仓库文件\n\t```\n\tgit remote add name remoteURL\n\t```\n\t-\t如果是拉取远程仓库中的子分支上的文件时，需要在本地首先创建一个同名的子分支 ，否则会把远程仓库子分支中的文件拉取到本地主分支上","source":"_posts/git应用之git和github.md","raw":"---\ntitle: git应用之git和github\ndate: 2016-05-15 10:26:02\ntags:\n---\n##\tgit和github的区别\n\n-\tgit是一个软件，是一种版本控制工具，通过git命令提供的指令，方便管理源码，在实际开发时，可以将更多的经理集中在开发上，而不是要分出精力去管理代码的合并和版本控制问题。\n\n-\tgithub是一个网站，提供远程仓库，方便开发人员的交流学习。\n-\tgithub可以为git提供一些服务，比如 远程共享仓库，以及开发人员的交流平台。\n\n##\t配置SSH免密码下载\n\n-\tssh-keygen -t rsa\n\n##\tgit指令\n\n1.\t从远程服务器上获取指定仓库的分支，并且与工作目录的分支进行合并操作，如果出现问题，需要手动解决就好。\n\t\n\t```\n\tgit pull [remote url] branchName\n\t```\n\n<!-- more -->\n2.\t如果本地开发完成，要将本地仓库的版本提交到远程仓库，实现共享与项目合并，此时就是用这个指令。\n\t```\n\tgit push [remote url] branchName\n\t```\n\n3.\t获取远程仓库，但是不合并本地仓库\n\t```\n\tgit fetch [remote url] branchName\n\t```\n\n4.\t把远程仓库的地址存在变量name中，方便以后拉取远程仓库文件\n\t```\n\tgit remote add name remoteURL\n\t```\n\t-\t如果是拉取远程仓库中的子分支上的文件时，需要在本地首先创建一个同名的子分支 ，否则会把远程仓库子分支中的文件拉取到本地主分支上","slug":"git应用之git和github","published":1,"updated":"2018-01-31T12:39:09.808Z","_id":"cjd30vw7e000o581ib9x3d1ai","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"git和github的区别\"><a href=\"#git和github的区别\" class=\"headerlink\" title=\"git和github的区别\"></a>git和github的区别</h2><ul>\n<li><p>git是一个软件，是一种版本控制工具，通过git命令提供的指令，方便管理源码，在实际开发时，可以将更多的经理集中在开发上，而不是要分出精力去管理代码的合并和版本控制问题。</p>\n</li>\n<li><p>github是一个网站，提供远程仓库，方便开发人员的交流学习。</p>\n</li>\n<li>github可以为git提供一些服务，比如 远程共享仓库，以及开发人员的交流平台。</li>\n</ul>\n<h2 id=\"配置SSH免密码下载\"><a href=\"#配置SSH免密码下载\" class=\"headerlink\" title=\"配置SSH免密码下载\"></a>配置SSH免密码下载</h2><ul>\n<li>ssh-keygen -t rsa</li>\n</ul>\n<h2 id=\"git指令\"><a href=\"#git指令\" class=\"headerlink\" title=\"git指令\"></a>git指令</h2><ol>\n<li><p>从远程服务器上获取指定仓库的分支，并且与工作目录的分支进行合并操作，如果出现问题，需要手动解决就好。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull [remote url] branchName</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li><p>如果本地开发完成，要将本地仓库的版本提交到远程仓库，实现共享与项目合并，此时就是用这个指令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push [remote url] branchName</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取远程仓库，但是不合并本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch [remote url] branchName</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把远程仓库的地址存在变量name中，方便以后拉取远程仓库文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add name remoteURL</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果是拉取远程仓库中的子分支上的文件时，需要在本地首先创建一个同名的子分支 ，否则会把远程仓库子分支中的文件拉取到本地主分支上</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"git和github的区别\"><a href=\"#git和github的区别\" class=\"headerlink\" title=\"git和github的区别\"></a>git和github的区别</h2><ul>\n<li><p>git是一个软件，是一种版本控制工具，通过git命令提供的指令，方便管理源码，在实际开发时，可以将更多的经理集中在开发上，而不是要分出精力去管理代码的合并和版本控制问题。</p>\n</li>\n<li><p>github是一个网站，提供远程仓库，方便开发人员的交流学习。</p>\n</li>\n<li>github可以为git提供一些服务，比如 远程共享仓库，以及开发人员的交流平台。</li>\n</ul>\n<h2 id=\"配置SSH免密码下载\"><a href=\"#配置SSH免密码下载\" class=\"headerlink\" title=\"配置SSH免密码下载\"></a>配置SSH免密码下载</h2><ul>\n<li>ssh-keygen -t rsa</li>\n</ul>\n<h2 id=\"git指令\"><a href=\"#git指令\" class=\"headerlink\" title=\"git指令\"></a>git指令</h2><ol>\n<li><p>从远程服务器上获取指定仓库的分支，并且与工作目录的分支进行合并操作，如果出现问题，需要手动解决就好。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull [remote url] branchName</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol>\n<li><p>如果本地开发完成，要将本地仓库的版本提交到远程仓库，实现共享与项目合并，此时就是用这个指令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push [remote url] branchName</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取远程仓库，但是不合并本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch [remote url] branchName</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把远程仓库的地址存在变量name中，方便以后拉取远程仓库文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add name remoteURL</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果是拉取远程仓库中的子分支上的文件时，需要在本地首先创建一个同名的子分支 ，否则会把远程仓库子分支中的文件拉取到本地主分支上</li>\n</ul>\n</li>\n</ol>"},{"title":"git应用之git基本工作流程","date":"2016-06-13T05:58:24.000Z","_content":"\n##\t初始化本地仓库\n\n*\tgit init\n\n*\t如果我们想让git去管理某个目录下的文件，首先需要在该目录下初始化仓库。\n\n##\t三种状态\n\n-\t学习git之前，我们需要首先了解git管理的3种状态，分别是**已提交**，**已修改**，**已暂存**。\n\n-\t这三种状态分别对应三种目录空间，\n\n*\t已修改 ->  工作目录\n*\t已暂存 ->\t本地仓库暂存区 通常存放在git目录中的HEAD或INDEX文件中\n*\t已提交 ->  本地仓库的版本库\n\n##\tgit基本工作流程\n\n<!-- more -->\n*\tgit的工作流程大概分成三个步骤：\n\n1.\t在工作区域修改文件。\n\n2.\t将工作目录的文件提交到暂存区域，\n\n3.\t最后再将暂存区文件提交的本地版本库，形成一个版本保存起来\n\n*\t每一次从暂存区提交到版本库，都会形成一个新的版本库。\n","source":"_posts/git应用之git工作原理.md","raw":"---\ntitle: git应用之git基本工作流程\ndate: 2016-06-13 13:58:24\ntags: [git,版本控制,工具]\n---\n\n##\t初始化本地仓库\n\n*\tgit init\n\n*\t如果我们想让git去管理某个目录下的文件，首先需要在该目录下初始化仓库。\n\n##\t三种状态\n\n-\t学习git之前，我们需要首先了解git管理的3种状态，分别是**已提交**，**已修改**，**已暂存**。\n\n-\t这三种状态分别对应三种目录空间，\n\n*\t已修改 ->  工作目录\n*\t已暂存 ->\t本地仓库暂存区 通常存放在git目录中的HEAD或INDEX文件中\n*\t已提交 ->  本地仓库的版本库\n\n##\tgit基本工作流程\n\n<!-- more -->\n*\tgit的工作流程大概分成三个步骤：\n\n1.\t在工作区域修改文件。\n\n2.\t将工作目录的文件提交到暂存区域，\n\n3.\t最后再将暂存区文件提交的本地版本库，形成一个版本保存起来\n\n*\t每一次从暂存区提交到版本库，都会形成一个新的版本库。\n","slug":"git应用之git工作原理","published":1,"updated":"2018-01-31T12:39:09.811Z","_id":"cjd30vw7m000r581ik8so0ioq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"初始化本地仓库\"><a href=\"#初始化本地仓库\" class=\"headerlink\" title=\"初始化本地仓库\"></a>初始化本地仓库</h2><ul>\n<li><p>git init</p>\n</li>\n<li><p>如果我们想让git去管理某个目录下的文件，首先需要在该目录下初始化仓库。</p>\n</li>\n</ul>\n<h2 id=\"三种状态\"><a href=\"#三种状态\" class=\"headerlink\" title=\"三种状态\"></a>三种状态</h2><ul>\n<li><p>学习git之前，我们需要首先了解git管理的3种状态，分别是<strong>已提交</strong>，<strong>已修改</strong>，<strong>已暂存</strong>。</p>\n</li>\n<li><p>这三种状态分别对应三种目录空间，</p>\n</li>\n</ul>\n<ul>\n<li>已修改 -&gt;  工作目录</li>\n<li>已暂存 -&gt;    本地仓库暂存区 通常存放在git目录中的HEAD或INDEX文件中</li>\n<li>已提交 -&gt;  本地仓库的版本库</li>\n</ul>\n<h2 id=\"git基本工作流程\"><a href=\"#git基本工作流程\" class=\"headerlink\" title=\"git基本工作流程\"></a>git基本工作流程</h2><a id=\"more\"></a>\n<ul>\n<li>git的工作流程大概分成三个步骤：</li>\n</ul>\n<ol>\n<li><p>在工作区域修改文件。</p>\n</li>\n<li><p>将工作目录的文件提交到暂存区域，</p>\n</li>\n<li><p>最后再将暂存区文件提交的本地版本库，形成一个版本保存起来</p>\n</li>\n</ol>\n<ul>\n<li>每一次从暂存区提交到版本库，都会形成一个新的版本库。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"初始化本地仓库\"><a href=\"#初始化本地仓库\" class=\"headerlink\" title=\"初始化本地仓库\"></a>初始化本地仓库</h2><ul>\n<li><p>git init</p>\n</li>\n<li><p>如果我们想让git去管理某个目录下的文件，首先需要在该目录下初始化仓库。</p>\n</li>\n</ul>\n<h2 id=\"三种状态\"><a href=\"#三种状态\" class=\"headerlink\" title=\"三种状态\"></a>三种状态</h2><ul>\n<li><p>学习git之前，我们需要首先了解git管理的3种状态，分别是<strong>已提交</strong>，<strong>已修改</strong>，<strong>已暂存</strong>。</p>\n</li>\n<li><p>这三种状态分别对应三种目录空间，</p>\n</li>\n</ul>\n<ul>\n<li>已修改 -&gt;  工作目录</li>\n<li>已暂存 -&gt;    本地仓库暂存区 通常存放在git目录中的HEAD或INDEX文件中</li>\n<li>已提交 -&gt;  本地仓库的版本库</li>\n</ul>\n<h2 id=\"git基本工作流程\"><a href=\"#git基本工作流程\" class=\"headerlink\" title=\"git基本工作流程\"></a>git基本工作流程</h2>","more":"<ul>\n<li>git的工作流程大概分成三个步骤：</li>\n</ul>\n<ol>\n<li><p>在工作区域修改文件。</p>\n</li>\n<li><p>将工作目录的文件提交到暂存区域，</p>\n</li>\n<li><p>最后再将暂存区文件提交的本地版本库，形成一个版本保存起来</p>\n</li>\n</ol>\n<ul>\n<li>每一次从暂存区提交到版本库，都会形成一个新的版本库。</li>\n</ul>"},{"title":"git应用之git常用操作","date":"2016-05-13T05:59:09.000Z","_content":"*\t这篇主要介绍的是如何配置git和相关操作命令，方便交流学习和以后查阅。\n\n## 1.\t配置用户\n\n*\tgit安装完成之后，我们需要配置个人信息，配置方式如下。\n\n*\tgit config [option] \n\t*\t--global 全局配置，当前用户下的所有仓库都共享同一个用户的配置信息\n\t*\t--system 系统配置，该电脑下的所有仓库都共享一个用户的配置信息\n\t*\t--local\t 本地配置，该仓库下使用当前配置的用户信息。\n*\t配置用户名：git config --global user.name  \"wangpansheng\"\n*\t配置邮箱：\tgit config --global user.email  \"wps@qq.com\"\n* \t获取信息：\tgit config --get user.name || --get user.email\n*\t配置信息存放在用户文件夹中的.gitconfig中存放着。\n*\t可以通过重复配置信息，覆盖之前配置的信息\n\n## 2.\t仓库初始化\n\n*\t使用git管理代码之前需要首先在工作目录下，输入该命令，初始化一个仓库。\n\n*\tgit init\n\n##\t3.\t查看文件状态\n\n*\t查看当前工作目录文件的状态，\n*\t如果下边文件名是红色的就是没有被追踪的，或者是暂存之后又被修改的文件。\n*\t如果绿色的就是已经add暂存了的文件。\n*\t会忽略空文件夹\n\n*\tmedified 表示是跟踪到修改的文件\n\n*\tgit status\n\n<!-- more -->\n##\t4.\t添加到暂存区\n\n*\t如果要把本地工作目录的文件添加到暂存区，也就是想要让git追踪文件的变化，就需要使用git add命令。然后使用git status查看文件状态是否被追踪。\n\n*\tgit add [option]\n\n*\t*| -A\t暂存所有文件\n*\t文件名，暂存指定文件\n\n## 5.\t撤销更改\n\n*\t有时候，我们可能会想要把代码恢复到以前的版本，这是就需要用到checkout了。\n*\t在撤销更该的时候，如果暂存区有备份，就恢复暂存区文件到工作目录，\n*\t如果暂存区没有就去版本库去恢复。\n\n*\tgit checkout filename\n\n## 6.\t提交\n\n*\tgit commit [option] -m \"当前版本备注信息\"\n\n* \t提交单个文件时，option输入文件名即可，\n\n*\t在做版本回退时，需要根据版本备注信息选择回退的版本。\n\n*\t没提交一次都会有一个版本号，一般称为SHA值，\n\n## 7.\t查看提交日志\n\n*\t有时候我们需要查看提交的历史纪录，可以通过git log查看提交的历史记录\n\n*\tgit log\t\t\t不包含回退之后的版本\n*\tgit log --oneline\t简略显示日志\n*\tgit reflog\t查看所有历史版本，\n\n##\t8.\t恢复之前提交的状态\n\n*\t回退到指定的版本\n\n*\tgit reset [option] 版本id\n\n*\t将指定版本内的文件替换掉工作目录内的文件，实现版本回退，\n*\t如果传了 --hard 会同时更改暂存区文件\n\n*\tgit reset HEAD^ 回退到前一次提交的版本，\n*\tgit reset HEAD^^|| HEAD~2回退到前两次的版本\n\n*\treset命令有3中方式：\n\t*\tgit reset  --mixed\t\n\t\t-\t默认方式，不带任何参数的git reset，\n\t\t-\t版本区和暂存区变化，工作区不变化\n\t*\tgit reset --soft\t\n\t\t-\t回退到某个版本，只回退了commit的信息，不会恢复暂存区，\n\t\t-\t如果还要提交，直接commit即可\n\t*\tgit reset --hard\n\t\t-\t彻底回退到某个版本，本地的源码也会变为上一个版本的内容。\n\n##\t9.\tgit分支\n\n-\t在初始化一个本地仓库时，默认是没有主分支的，必须至少提交一次版本之后，git才会创建master主分支。\n\n-\tgit在创建分支时，必须保证有master主分支。\n\n1.\t创建分支\n\n\t*\tgit branch name\t创建分支\n\n\t*\tgit checkout -b branchName  创建分支并切换到该分支\n\n2.\t查看分支\n\n\t*\tgit branch\n\n\t-\t有星号*标记的分支，就是当前工作目录所在的分支，\n\n3.\t切换分支\n\n\t-\tgit checkout branchName\n\n\t-\t切换到指定分支\n\n4.\t分支的合并\n\n\t-\tgit merge branchName\n\n\t-\t将指定分支合并到当前分支\n\n5.\t删除分支\n\n\t-\tgit branch -d branchName\n\n\t-\t删除指定的分支\n\n####\tgit分支策略\n\n-\t在实际开发中，虽然git分支很强大，但是也不是随便用的，通常我们需要按照一定的策略使用分支，提高开发效率。\n\n1.\t保证主分支的的稳定性，也就是说要保证主分支的代码，无bug，功能完整，不能在主分支上直接进行开发。\n\n2.\t如果需要开发新功能时，那么就创建一个该功能的分支，然后在该分支上进行代码编写。当功能开发完毕，并且测试无bug，将该分支上的代码合并到主分支上。\n\n\t-\t该分支命名一般规范：所有的开发分支都以\"dev-\"+相关功能描述的单词。\n\t-\teg： 要开发登录功能时， 此时可以考虑创建一个开发分支，名字为dev-login\n\n3.\t如果开发时遇到协同开发，就要创建协同开发分支，在该分支上去编写代码。\n\t-\t当代码合并时，可能会出现，代码冲突，一旦出现冲突，git无法解决，需要我们认为手动去处理。\n\t-\t该分支一般的命名规范为：\n\t\t-\t所有的开发分支都以\"feature-\"+相关描述词；\n\t\t-\teg：开发主页功能时，可以考虑创建一个分支，名字为feature-index\n\n4.\t如果在开发时，接到一个临时修改的bug的任务时，此时不要在主分支或当前未完成的分支上去修改，此时，创建一个bug分支，在该分支上去修改出现bug的代码，修改完成之后，将其合并到主分支，\n\t-\t该分支命名规范：\n\t-\t所有的开发分支都以\"bug\"+相关描述词；\n\t-\teg: 要修改登录超时问题，此时可以考虑创建一个bug分支，名字为bug-loginTimeout\n\n-\t如果出现冲突，必须手动解决冲突，然后重新提交版本，","source":"_posts/git应用之git常用操作.md","raw":"---\ntitle: git应用之git常用操作\ndate: 2016-05-13 13:59:09\ntags: [git,常用命令操作]\n---\n*\t这篇主要介绍的是如何配置git和相关操作命令，方便交流学习和以后查阅。\n\n## 1.\t配置用户\n\n*\tgit安装完成之后，我们需要配置个人信息，配置方式如下。\n\n*\tgit config [option] \n\t*\t--global 全局配置，当前用户下的所有仓库都共享同一个用户的配置信息\n\t*\t--system 系统配置，该电脑下的所有仓库都共享一个用户的配置信息\n\t*\t--local\t 本地配置，该仓库下使用当前配置的用户信息。\n*\t配置用户名：git config --global user.name  \"wangpansheng\"\n*\t配置邮箱：\tgit config --global user.email  \"wps@qq.com\"\n* \t获取信息：\tgit config --get user.name || --get user.email\n*\t配置信息存放在用户文件夹中的.gitconfig中存放着。\n*\t可以通过重复配置信息，覆盖之前配置的信息\n\n## 2.\t仓库初始化\n\n*\t使用git管理代码之前需要首先在工作目录下，输入该命令，初始化一个仓库。\n\n*\tgit init\n\n##\t3.\t查看文件状态\n\n*\t查看当前工作目录文件的状态，\n*\t如果下边文件名是红色的就是没有被追踪的，或者是暂存之后又被修改的文件。\n*\t如果绿色的就是已经add暂存了的文件。\n*\t会忽略空文件夹\n\n*\tmedified 表示是跟踪到修改的文件\n\n*\tgit status\n\n<!-- more -->\n##\t4.\t添加到暂存区\n\n*\t如果要把本地工作目录的文件添加到暂存区，也就是想要让git追踪文件的变化，就需要使用git add命令。然后使用git status查看文件状态是否被追踪。\n\n*\tgit add [option]\n\n*\t*| -A\t暂存所有文件\n*\t文件名，暂存指定文件\n\n## 5.\t撤销更改\n\n*\t有时候，我们可能会想要把代码恢复到以前的版本，这是就需要用到checkout了。\n*\t在撤销更该的时候，如果暂存区有备份，就恢复暂存区文件到工作目录，\n*\t如果暂存区没有就去版本库去恢复。\n\n*\tgit checkout filename\n\n## 6.\t提交\n\n*\tgit commit [option] -m \"当前版本备注信息\"\n\n* \t提交单个文件时，option输入文件名即可，\n\n*\t在做版本回退时，需要根据版本备注信息选择回退的版本。\n\n*\t没提交一次都会有一个版本号，一般称为SHA值，\n\n## 7.\t查看提交日志\n\n*\t有时候我们需要查看提交的历史纪录，可以通过git log查看提交的历史记录\n\n*\tgit log\t\t\t不包含回退之后的版本\n*\tgit log --oneline\t简略显示日志\n*\tgit reflog\t查看所有历史版本，\n\n##\t8.\t恢复之前提交的状态\n\n*\t回退到指定的版本\n\n*\tgit reset [option] 版本id\n\n*\t将指定版本内的文件替换掉工作目录内的文件，实现版本回退，\n*\t如果传了 --hard 会同时更改暂存区文件\n\n*\tgit reset HEAD^ 回退到前一次提交的版本，\n*\tgit reset HEAD^^|| HEAD~2回退到前两次的版本\n\n*\treset命令有3中方式：\n\t*\tgit reset  --mixed\t\n\t\t-\t默认方式，不带任何参数的git reset，\n\t\t-\t版本区和暂存区变化，工作区不变化\n\t*\tgit reset --soft\t\n\t\t-\t回退到某个版本，只回退了commit的信息，不会恢复暂存区，\n\t\t-\t如果还要提交，直接commit即可\n\t*\tgit reset --hard\n\t\t-\t彻底回退到某个版本，本地的源码也会变为上一个版本的内容。\n\n##\t9.\tgit分支\n\n-\t在初始化一个本地仓库时，默认是没有主分支的，必须至少提交一次版本之后，git才会创建master主分支。\n\n-\tgit在创建分支时，必须保证有master主分支。\n\n1.\t创建分支\n\n\t*\tgit branch name\t创建分支\n\n\t*\tgit checkout -b branchName  创建分支并切换到该分支\n\n2.\t查看分支\n\n\t*\tgit branch\n\n\t-\t有星号*标记的分支，就是当前工作目录所在的分支，\n\n3.\t切换分支\n\n\t-\tgit checkout branchName\n\n\t-\t切换到指定分支\n\n4.\t分支的合并\n\n\t-\tgit merge branchName\n\n\t-\t将指定分支合并到当前分支\n\n5.\t删除分支\n\n\t-\tgit branch -d branchName\n\n\t-\t删除指定的分支\n\n####\tgit分支策略\n\n-\t在实际开发中，虽然git分支很强大，但是也不是随便用的，通常我们需要按照一定的策略使用分支，提高开发效率。\n\n1.\t保证主分支的的稳定性，也就是说要保证主分支的代码，无bug，功能完整，不能在主分支上直接进行开发。\n\n2.\t如果需要开发新功能时，那么就创建一个该功能的分支，然后在该分支上进行代码编写。当功能开发完毕，并且测试无bug，将该分支上的代码合并到主分支上。\n\n\t-\t该分支命名一般规范：所有的开发分支都以\"dev-\"+相关功能描述的单词。\n\t-\teg： 要开发登录功能时， 此时可以考虑创建一个开发分支，名字为dev-login\n\n3.\t如果开发时遇到协同开发，就要创建协同开发分支，在该分支上去编写代码。\n\t-\t当代码合并时，可能会出现，代码冲突，一旦出现冲突，git无法解决，需要我们认为手动去处理。\n\t-\t该分支一般的命名规范为：\n\t\t-\t所有的开发分支都以\"feature-\"+相关描述词；\n\t\t-\teg：开发主页功能时，可以考虑创建一个分支，名字为feature-index\n\n4.\t如果在开发时，接到一个临时修改的bug的任务时，此时不要在主分支或当前未完成的分支上去修改，此时，创建一个bug分支，在该分支上去修改出现bug的代码，修改完成之后，将其合并到主分支，\n\t-\t该分支命名规范：\n\t-\t所有的开发分支都以\"bug\"+相关描述词；\n\t-\teg: 要修改登录超时问题，此时可以考虑创建一个bug分支，名字为bug-loginTimeout\n\n-\t如果出现冲突，必须手动解决冲突，然后重新提交版本，","slug":"git应用之git常用操作","published":1,"updated":"2018-01-31T12:39:09.811Z","_id":"cjd30vw8y000s581ivzrvwnec","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>这篇主要介绍的是如何配置git和相关操作命令，方便交流学习和以后查阅。</li>\n</ul>\n<h2 id=\"1-配置用户\"><a href=\"#1-配置用户\" class=\"headerlink\" title=\"1.    配置用户\"></a>1.    配置用户</h2><ul>\n<li><p>git安装完成之后，我们需要配置个人信息，配置方式如下。</p>\n</li>\n<li><p>git config [option] </p>\n<ul>\n<li>–global 全局配置，当前用户下的所有仓库都共享同一个用户的配置信息</li>\n<li>–system 系统配置，该电脑下的所有仓库都共享一个用户的配置信息</li>\n<li>–local     本地配置，该仓库下使用当前配置的用户信息。</li>\n</ul>\n</li>\n<li>配置用户名：git config –global user.name  “wangpansheng”</li>\n<li>配置邮箱：    git config –global user.email  “wps@qq.com”</li>\n<li>获取信息：    git config –get user.name || –get user.email</li>\n<li>配置信息存放在用户文件夹中的.gitconfig中存放着。</li>\n<li>可以通过重复配置信息，覆盖之前配置的信息</li>\n</ul>\n<h2 id=\"2-仓库初始化\"><a href=\"#2-仓库初始化\" class=\"headerlink\" title=\"2.    仓库初始化\"></a>2.    仓库初始化</h2><ul>\n<li><p>使用git管理代码之前需要首先在工作目录下，输入该命令，初始化一个仓库。</p>\n</li>\n<li><p>git init</p>\n</li>\n</ul>\n<h2 id=\"3-查看文件状态\"><a href=\"#3-查看文件状态\" class=\"headerlink\" title=\"3.    查看文件状态\"></a>3.    查看文件状态</h2><ul>\n<li>查看当前工作目录文件的状态，</li>\n<li>如果下边文件名是红色的就是没有被追踪的，或者是暂存之后又被修改的文件。</li>\n<li>如果绿色的就是已经add暂存了的文件。</li>\n<li><p>会忽略空文件夹</p>\n</li>\n<li><p>medified 表示是跟踪到修改的文件</p>\n</li>\n<li><p>git status</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"4-添加到暂存区\"><a href=\"#4-添加到暂存区\" class=\"headerlink\" title=\"4.    添加到暂存区\"></a>4.    添加到暂存区</h2><ul>\n<li><p>如果要把本地工作目录的文件添加到暂存区，也就是想要让git追踪文件的变化，就需要使用git add命令。然后使用git status查看文件状态是否被追踪。</p>\n</li>\n<li><p>git add [option]</p>\n</li>\n<li><p>*| -A    暂存所有文件</p>\n</li>\n<li>文件名，暂存指定文件</li>\n</ul>\n<h2 id=\"5-撤销更改\"><a href=\"#5-撤销更改\" class=\"headerlink\" title=\"5.    撤销更改\"></a>5.    撤销更改</h2><ul>\n<li>有时候，我们可能会想要把代码恢复到以前的版本，这是就需要用到checkout了。</li>\n<li>在撤销更该的时候，如果暂存区有备份，就恢复暂存区文件到工作目录，</li>\n<li><p>如果暂存区没有就去版本库去恢复。</p>\n</li>\n<li><p>git checkout filename</p>\n</li>\n</ul>\n<h2 id=\"6-提交\"><a href=\"#6-提交\" class=\"headerlink\" title=\"6.    提交\"></a>6.    提交</h2><ul>\n<li><p>git commit [option] -m “当前版本备注信息”</p>\n</li>\n<li><p>提交单个文件时，option输入文件名即可，</p>\n</li>\n<li><p>在做版本回退时，需要根据版本备注信息选择回退的版本。</p>\n</li>\n<li><p>没提交一次都会有一个版本号，一般称为SHA值，</p>\n</li>\n</ul>\n<h2 id=\"7-查看提交日志\"><a href=\"#7-查看提交日志\" class=\"headerlink\" title=\"7.    查看提交日志\"></a>7.    查看提交日志</h2><ul>\n<li><p>有时候我们需要查看提交的历史纪录，可以通过git log查看提交的历史记录</p>\n</li>\n<li><p>git log            不包含回退之后的版本</p>\n</li>\n<li>git log –oneline    简略显示日志</li>\n<li>git reflog    查看所有历史版本，</li>\n</ul>\n<h2 id=\"8-恢复之前提交的状态\"><a href=\"#8-恢复之前提交的状态\" class=\"headerlink\" title=\"8.    恢复之前提交的状态\"></a>8.    恢复之前提交的状态</h2><ul>\n<li><p>回退到指定的版本</p>\n</li>\n<li><p>git reset [option] 版本id</p>\n</li>\n<li><p>将指定版本内的文件替换掉工作目录内的文件，实现版本回退，</p>\n</li>\n<li><p>如果传了 –hard 会同时更改暂存区文件</p>\n</li>\n<li><p>git reset HEAD^ 回退到前一次提交的版本，</p>\n</li>\n<li><p>git reset HEAD^^|| HEAD~2回退到前两次的版本</p>\n</li>\n<li><p>reset命令有3中方式：</p>\n<ul>\n<li>git reset  –mixed    <ul>\n<li>默认方式，不带任何参数的git reset，</li>\n<li>版本区和暂存区变化，工作区不变化</li>\n</ul>\n</li>\n<li>git reset –soft    <ul>\n<li>回退到某个版本，只回退了commit的信息，不会恢复暂存区，</li>\n<li>如果还要提交，直接commit即可</li>\n</ul>\n</li>\n<li>git reset –hard<ul>\n<li>彻底回退到某个版本，本地的源码也会变为上一个版本的内容。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"9-git分支\"><a href=\"#9-git分支\" class=\"headerlink\" title=\"9.    git分支\"></a>9.    git分支</h2><ul>\n<li><p>在初始化一个本地仓库时，默认是没有主分支的，必须至少提交一次版本之后，git才会创建master主分支。</p>\n</li>\n<li><p>git在创建分支时，必须保证有master主分支。</p>\n</li>\n</ul>\n<ol>\n<li><p>创建分支</p>\n<ul>\n<li><p>git branch name    创建分支</p>\n</li>\n<li><p>git checkout -b branchName  创建分支并切换到该分支</p>\n</li>\n</ul>\n</li>\n<li><p>查看分支</p>\n<ul>\n<li>git branch</li>\n</ul>\n<ul>\n<li>有星号*标记的分支，就是当前工作目录所在的分支，</li>\n</ul>\n</li>\n<li><p>切换分支</p>\n<ul>\n<li><p>git checkout branchName</p>\n</li>\n<li><p>切换到指定分支</p>\n</li>\n</ul>\n</li>\n<li><p>分支的合并</p>\n<ul>\n<li><p>git merge branchName</p>\n</li>\n<li><p>将指定分支合并到当前分支</p>\n</li>\n</ul>\n</li>\n<li><p>删除分支</p>\n<ul>\n<li><p>git branch -d branchName</p>\n</li>\n<li><p>删除指定的分支</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"git分支策略\"><a href=\"#git分支策略\" class=\"headerlink\" title=\"git分支策略\"></a>git分支策略</h4><ul>\n<li>在实际开发中，虽然git分支很强大，但是也不是随便用的，通常我们需要按照一定的策略使用分支，提高开发效率。</li>\n</ul>\n<ol>\n<li><p>保证主分支的的稳定性，也就是说要保证主分支的代码，无bug，功能完整，不能在主分支上直接进行开发。</p>\n</li>\n<li><p>如果需要开发新功能时，那么就创建一个该功能的分支，然后在该分支上进行代码编写。当功能开发完毕，并且测试无bug，将该分支上的代码合并到主分支上。</p>\n<ul>\n<li>该分支命名一般规范：所有的开发分支都以”dev-“+相关功能描述的单词。</li>\n<li>eg： 要开发登录功能时， 此时可以考虑创建一个开发分支，名字为dev-login</li>\n</ul>\n</li>\n<li><p>如果开发时遇到协同开发，就要创建协同开发分支，在该分支上去编写代码。</p>\n<ul>\n<li>当代码合并时，可能会出现，代码冲突，一旦出现冲突，git无法解决，需要我们认为手动去处理。</li>\n<li>该分支一般的命名规范为：<ul>\n<li>所有的开发分支都以”feature-“+相关描述词；</li>\n<li>eg：开发主页功能时，可以考虑创建一个分支，名字为feature-index</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>如果在开发时，接到一个临时修改的bug的任务时，此时不要在主分支或当前未完成的分支上去修改，此时，创建一个bug分支，在该分支上去修改出现bug的代码，修改完成之后，将其合并到主分支，</p>\n<ul>\n<li>该分支命名规范：</li>\n<li>所有的开发分支都以”bug”+相关描述词；</li>\n<li>eg: 要修改登录超时问题，此时可以考虑创建一个bug分支，名字为bug-loginTimeout</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>如果出现冲突，必须手动解决冲突，然后重新提交版本，</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>这篇主要介绍的是如何配置git和相关操作命令，方便交流学习和以后查阅。</li>\n</ul>\n<h2 id=\"1-配置用户\"><a href=\"#1-配置用户\" class=\"headerlink\" title=\"1.    配置用户\"></a>1.    配置用户</h2><ul>\n<li><p>git安装完成之后，我们需要配置个人信息，配置方式如下。</p>\n</li>\n<li><p>git config [option] </p>\n<ul>\n<li>–global 全局配置，当前用户下的所有仓库都共享同一个用户的配置信息</li>\n<li>–system 系统配置，该电脑下的所有仓库都共享一个用户的配置信息</li>\n<li>–local     本地配置，该仓库下使用当前配置的用户信息。</li>\n</ul>\n</li>\n<li>配置用户名：git config –global user.name  “wangpansheng”</li>\n<li>配置邮箱：    git config –global user.email  “wps@qq.com”</li>\n<li>获取信息：    git config –get user.name || –get user.email</li>\n<li>配置信息存放在用户文件夹中的.gitconfig中存放着。</li>\n<li>可以通过重复配置信息，覆盖之前配置的信息</li>\n</ul>\n<h2 id=\"2-仓库初始化\"><a href=\"#2-仓库初始化\" class=\"headerlink\" title=\"2.    仓库初始化\"></a>2.    仓库初始化</h2><ul>\n<li><p>使用git管理代码之前需要首先在工作目录下，输入该命令，初始化一个仓库。</p>\n</li>\n<li><p>git init</p>\n</li>\n</ul>\n<h2 id=\"3-查看文件状态\"><a href=\"#3-查看文件状态\" class=\"headerlink\" title=\"3.    查看文件状态\"></a>3.    查看文件状态</h2><ul>\n<li>查看当前工作目录文件的状态，</li>\n<li>如果下边文件名是红色的就是没有被追踪的，或者是暂存之后又被修改的文件。</li>\n<li>如果绿色的就是已经add暂存了的文件。</li>\n<li><p>会忽略空文件夹</p>\n</li>\n<li><p>medified 表示是跟踪到修改的文件</p>\n</li>\n<li><p>git status</p>\n</li>\n</ul>","more":"<h2 id=\"4-添加到暂存区\"><a href=\"#4-添加到暂存区\" class=\"headerlink\" title=\"4.    添加到暂存区\"></a>4.    添加到暂存区</h2><ul>\n<li><p>如果要把本地工作目录的文件添加到暂存区，也就是想要让git追踪文件的变化，就需要使用git add命令。然后使用git status查看文件状态是否被追踪。</p>\n</li>\n<li><p>git add [option]</p>\n</li>\n<li><p>*| -A    暂存所有文件</p>\n</li>\n<li>文件名，暂存指定文件</li>\n</ul>\n<h2 id=\"5-撤销更改\"><a href=\"#5-撤销更改\" class=\"headerlink\" title=\"5.    撤销更改\"></a>5.    撤销更改</h2><ul>\n<li>有时候，我们可能会想要把代码恢复到以前的版本，这是就需要用到checkout了。</li>\n<li>在撤销更该的时候，如果暂存区有备份，就恢复暂存区文件到工作目录，</li>\n<li><p>如果暂存区没有就去版本库去恢复。</p>\n</li>\n<li><p>git checkout filename</p>\n</li>\n</ul>\n<h2 id=\"6-提交\"><a href=\"#6-提交\" class=\"headerlink\" title=\"6.    提交\"></a>6.    提交</h2><ul>\n<li><p>git commit [option] -m “当前版本备注信息”</p>\n</li>\n<li><p>提交单个文件时，option输入文件名即可，</p>\n</li>\n<li><p>在做版本回退时，需要根据版本备注信息选择回退的版本。</p>\n</li>\n<li><p>没提交一次都会有一个版本号，一般称为SHA值，</p>\n</li>\n</ul>\n<h2 id=\"7-查看提交日志\"><a href=\"#7-查看提交日志\" class=\"headerlink\" title=\"7.    查看提交日志\"></a>7.    查看提交日志</h2><ul>\n<li><p>有时候我们需要查看提交的历史纪录，可以通过git log查看提交的历史记录</p>\n</li>\n<li><p>git log            不包含回退之后的版本</p>\n</li>\n<li>git log –oneline    简略显示日志</li>\n<li>git reflog    查看所有历史版本，</li>\n</ul>\n<h2 id=\"8-恢复之前提交的状态\"><a href=\"#8-恢复之前提交的状态\" class=\"headerlink\" title=\"8.    恢复之前提交的状态\"></a>8.    恢复之前提交的状态</h2><ul>\n<li><p>回退到指定的版本</p>\n</li>\n<li><p>git reset [option] 版本id</p>\n</li>\n<li><p>将指定版本内的文件替换掉工作目录内的文件，实现版本回退，</p>\n</li>\n<li><p>如果传了 –hard 会同时更改暂存区文件</p>\n</li>\n<li><p>git reset HEAD^ 回退到前一次提交的版本，</p>\n</li>\n<li><p>git reset HEAD^^|| HEAD~2回退到前两次的版本</p>\n</li>\n<li><p>reset命令有3中方式：</p>\n<ul>\n<li>git reset  –mixed    <ul>\n<li>默认方式，不带任何参数的git reset，</li>\n<li>版本区和暂存区变化，工作区不变化</li>\n</ul>\n</li>\n<li>git reset –soft    <ul>\n<li>回退到某个版本，只回退了commit的信息，不会恢复暂存区，</li>\n<li>如果还要提交，直接commit即可</li>\n</ul>\n</li>\n<li>git reset –hard<ul>\n<li>彻底回退到某个版本，本地的源码也会变为上一个版本的内容。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"9-git分支\"><a href=\"#9-git分支\" class=\"headerlink\" title=\"9.    git分支\"></a>9.    git分支</h2><ul>\n<li><p>在初始化一个本地仓库时，默认是没有主分支的，必须至少提交一次版本之后，git才会创建master主分支。</p>\n</li>\n<li><p>git在创建分支时，必须保证有master主分支。</p>\n</li>\n</ul>\n<ol>\n<li><p>创建分支</p>\n<ul>\n<li><p>git branch name    创建分支</p>\n</li>\n<li><p>git checkout -b branchName  创建分支并切换到该分支</p>\n</li>\n</ul>\n</li>\n<li><p>查看分支</p>\n<ul>\n<li>git branch</li>\n</ul>\n<ul>\n<li>有星号*标记的分支，就是当前工作目录所在的分支，</li>\n</ul>\n</li>\n<li><p>切换分支</p>\n<ul>\n<li><p>git checkout branchName</p>\n</li>\n<li><p>切换到指定分支</p>\n</li>\n</ul>\n</li>\n<li><p>分支的合并</p>\n<ul>\n<li><p>git merge branchName</p>\n</li>\n<li><p>将指定分支合并到当前分支</p>\n</li>\n</ul>\n</li>\n<li><p>删除分支</p>\n<ul>\n<li><p>git branch -d branchName</p>\n</li>\n<li><p>删除指定的分支</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"git分支策略\"><a href=\"#git分支策略\" class=\"headerlink\" title=\"git分支策略\"></a>git分支策略</h4><ul>\n<li>在实际开发中，虽然git分支很强大，但是也不是随便用的，通常我们需要按照一定的策略使用分支，提高开发效率。</li>\n</ul>\n<ol>\n<li><p>保证主分支的的稳定性，也就是说要保证主分支的代码，无bug，功能完整，不能在主分支上直接进行开发。</p>\n</li>\n<li><p>如果需要开发新功能时，那么就创建一个该功能的分支，然后在该分支上进行代码编写。当功能开发完毕，并且测试无bug，将该分支上的代码合并到主分支上。</p>\n<ul>\n<li>该分支命名一般规范：所有的开发分支都以”dev-“+相关功能描述的单词。</li>\n<li>eg： 要开发登录功能时， 此时可以考虑创建一个开发分支，名字为dev-login</li>\n</ul>\n</li>\n<li><p>如果开发时遇到协同开发，就要创建协同开发分支，在该分支上去编写代码。</p>\n<ul>\n<li>当代码合并时，可能会出现，代码冲突，一旦出现冲突，git无法解决，需要我们认为手动去处理。</li>\n<li>该分支一般的命名规范为：<ul>\n<li>所有的开发分支都以”feature-“+相关描述词；</li>\n<li>eg：开发主页功能时，可以考虑创建一个分支，名字为feature-index</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>如果在开发时，接到一个临时修改的bug的任务时，此时不要在主分支或当前未完成的分支上去修改，此时，创建一个bug分支，在该分支上去修改出现bug的代码，修改完成之后，将其合并到主分支，</p>\n<ul>\n<li>该分支命名规范：</li>\n<li>所有的开发分支都以”bug”+相关描述词；</li>\n<li>eg: 要修改登录超时问题，此时可以考虑创建一个bug分支，名字为bug-loginTimeout</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>如果出现冲突，必须手动解决冲突，然后重新提交版本，</li>\n</ul>"},{"title":"git应用之vi编辑器","date":"2016-05-14T04:02:20.000Z","_content":"## 认识vi\n\n* vi编辑器是Linux下的标配，通过它我们可以创建，编辑文件，它是一个系统自带的文本编辑器，\n\n* 在bash命令行输入 vi 文件名，即可打开文件，进入vi编辑模式。\n## 三种模式\n\n* vi编辑器提供了3种模式，分别是命令模式,插入模式，末行模式，每种模式下用户所能进行的操作是不一样的。\n\n* 3种模式的切换如下图：\n\n\t![vi3种模式的切换](/images/vi.png)\n\n* 通过上图我们发现，输入模式是不能直接切换到末行模式的，必须要先切换到命令模式。\n\n## VI编辑器快捷键\n\n####\t末行模式：\n\n<!-- more -->\n1.\t:w(小写) 保存；\n\n2.\t:w filename\t另存为；\n\n3.\t:q\t退出\n\n4.\t:wq\t保存并退出\n\n5.\t:e!\t撤销更改\n\n6.\t:q!\t不保存强制退出\n\n7.\t:set nu\t设置行号\n\n####\t命令模式\n\n1.\tZZ(大写)\t保存并退出\n\n2.\tu\t撤销操作，可多次使用\n\n3.\tdd\t删除当前行\n\n4.\tyy\t复制当前行\n\n5.\tp\t粘贴内容\n\n6.\tctrl+f\t向前翻页\n\n7.\tctrl+b\t向后翻页\n\n8.\ti\t进入编辑模式，在当前光标插入\n\n9.\ta\t进入编辑模式，在当前光标后插入\n\n10.\tA\t进入编辑模式，光标移动到行尾\n\n11.\to\t进入编辑模式，当前行下面插入新一行\n\n12.\tO\t进入编辑模式，当前行上面插入一行\n\n#### 编辑模式\n\n* 编辑模式下，操作和正常widows编辑器操作类似","source":"_posts/git应用之vi编辑器.md","raw":"---\ntitle: git应用之vi编辑器\ndate: 2016-05-14 12:02:20\ntags: [git,vi,vim]\n---\n## 认识vi\n\n* vi编辑器是Linux下的标配，通过它我们可以创建，编辑文件，它是一个系统自带的文本编辑器，\n\n* 在bash命令行输入 vi 文件名，即可打开文件，进入vi编辑模式。\n## 三种模式\n\n* vi编辑器提供了3种模式，分别是命令模式,插入模式，末行模式，每种模式下用户所能进行的操作是不一样的。\n\n* 3种模式的切换如下图：\n\n\t![vi3种模式的切换](/images/vi.png)\n\n* 通过上图我们发现，输入模式是不能直接切换到末行模式的，必须要先切换到命令模式。\n\n## VI编辑器快捷键\n\n####\t末行模式：\n\n<!-- more -->\n1.\t:w(小写) 保存；\n\n2.\t:w filename\t另存为；\n\n3.\t:q\t退出\n\n4.\t:wq\t保存并退出\n\n5.\t:e!\t撤销更改\n\n6.\t:q!\t不保存强制退出\n\n7.\t:set nu\t设置行号\n\n####\t命令模式\n\n1.\tZZ(大写)\t保存并退出\n\n2.\tu\t撤销操作，可多次使用\n\n3.\tdd\t删除当前行\n\n4.\tyy\t复制当前行\n\n5.\tp\t粘贴内容\n\n6.\tctrl+f\t向前翻页\n\n7.\tctrl+b\t向后翻页\n\n8.\ti\t进入编辑模式，在当前光标插入\n\n9.\ta\t进入编辑模式，在当前光标后插入\n\n10.\tA\t进入编辑模式，光标移动到行尾\n\n11.\to\t进入编辑模式，当前行下面插入新一行\n\n12.\tO\t进入编辑模式，当前行上面插入一行\n\n#### 编辑模式\n\n* 编辑模式下，操作和正常widows编辑器操作类似","slug":"git应用之vi编辑器","published":1,"updated":"2018-01-31T12:39:09.816Z","_id":"cjd30vw91000t581ijwklqoh6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"认识vi\"><a href=\"#认识vi\" class=\"headerlink\" title=\"认识vi\"></a>认识vi</h2><ul>\n<li><p>vi编辑器是Linux下的标配，通过它我们可以创建，编辑文件，它是一个系统自带的文本编辑器，</p>\n</li>\n<li><p>在bash命令行输入 vi 文件名，即可打开文件，进入vi编辑模式。</p>\n<h2 id=\"三种模式\"><a href=\"#三种模式\" class=\"headerlink\" title=\"三种模式\"></a>三种模式</h2></li>\n<li><p>vi编辑器提供了3种模式，分别是命令模式,插入模式，末行模式，每种模式下用户所能进行的操作是不一样的。</p>\n</li>\n<li><p>3种模式的切换如下图：</p>\n<p>  <img src=\"/images/vi.png\" alt=\"vi3种模式的切换\"></p>\n</li>\n<li><p>通过上图我们发现，输入模式是不能直接切换到末行模式的，必须要先切换到命令模式。</p>\n</li>\n</ul>\n<h2 id=\"VI编辑器快捷键\"><a href=\"#VI编辑器快捷键\" class=\"headerlink\" title=\"VI编辑器快捷键\"></a>VI编辑器快捷键</h2><h4 id=\"末行模式：\"><a href=\"#末行模式：\" class=\"headerlink\" title=\"末行模式：\"></a>末行模式：</h4><a id=\"more\"></a>\n<ol>\n<li><p>:w(小写) 保存；</p>\n</li>\n<li><p>:w filename    另存为；</p>\n</li>\n<li><p>:q    退出</p>\n</li>\n<li><p>:wq    保存并退出</p>\n</li>\n<li><p>:e!    撤销更改</p>\n</li>\n<li><p>:q!    不保存强制退出</p>\n</li>\n<li><p>:set nu    设置行号</p>\n</li>\n</ol>\n<h4 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h4><ol>\n<li><p>ZZ(大写)    保存并退出</p>\n</li>\n<li><p>u    撤销操作，可多次使用</p>\n</li>\n<li><p>dd    删除当前行</p>\n</li>\n<li><p>yy    复制当前行</p>\n</li>\n<li><p>p    粘贴内容</p>\n</li>\n<li><p>ctrl+f    向前翻页</p>\n</li>\n<li><p>ctrl+b    向后翻页</p>\n</li>\n<li><p>i    进入编辑模式，在当前光标插入</p>\n</li>\n<li><p>a    进入编辑模式，在当前光标后插入</p>\n</li>\n<li><p>A    进入编辑模式，光标移动到行尾</p>\n</li>\n<li><p>o    进入编辑模式，当前行下面插入新一行</p>\n</li>\n<li><p>O    进入编辑模式，当前行上面插入一行</p>\n</li>\n</ol>\n<h4 id=\"编辑模式\"><a href=\"#编辑模式\" class=\"headerlink\" title=\"编辑模式\"></a>编辑模式</h4><ul>\n<li>编辑模式下，操作和正常widows编辑器操作类似</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"认识vi\"><a href=\"#认识vi\" class=\"headerlink\" title=\"认识vi\"></a>认识vi</h2><ul>\n<li><p>vi编辑器是Linux下的标配，通过它我们可以创建，编辑文件，它是一个系统自带的文本编辑器，</p>\n</li>\n<li><p>在bash命令行输入 vi 文件名，即可打开文件，进入vi编辑模式。</p>\n<h2 id=\"三种模式\"><a href=\"#三种模式\" class=\"headerlink\" title=\"三种模式\"></a>三种模式</h2></li>\n<li><p>vi编辑器提供了3种模式，分别是命令模式,插入模式，末行模式，每种模式下用户所能进行的操作是不一样的。</p>\n</li>\n<li><p>3种模式的切换如下图：</p>\n<p>  <img src=\"/images/vi.png\" alt=\"vi3种模式的切换\"></p>\n</li>\n<li><p>通过上图我们发现，输入模式是不能直接切换到末行模式的，必须要先切换到命令模式。</p>\n</li>\n</ul>\n<h2 id=\"VI编辑器快捷键\"><a href=\"#VI编辑器快捷键\" class=\"headerlink\" title=\"VI编辑器快捷键\"></a>VI编辑器快捷键</h2><h4 id=\"末行模式：\"><a href=\"#末行模式：\" class=\"headerlink\" title=\"末行模式：\"></a>末行模式：</h4>","more":"<ol>\n<li><p>:w(小写) 保存；</p>\n</li>\n<li><p>:w filename    另存为；</p>\n</li>\n<li><p>:q    退出</p>\n</li>\n<li><p>:wq    保存并退出</p>\n</li>\n<li><p>:e!    撤销更改</p>\n</li>\n<li><p>:q!    不保存强制退出</p>\n</li>\n<li><p>:set nu    设置行号</p>\n</li>\n</ol>\n<h4 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h4><ol>\n<li><p>ZZ(大写)    保存并退出</p>\n</li>\n<li><p>u    撤销操作，可多次使用</p>\n</li>\n<li><p>dd    删除当前行</p>\n</li>\n<li><p>yy    复制当前行</p>\n</li>\n<li><p>p    粘贴内容</p>\n</li>\n<li><p>ctrl+f    向前翻页</p>\n</li>\n<li><p>ctrl+b    向后翻页</p>\n</li>\n<li><p>i    进入编辑模式，在当前光标插入</p>\n</li>\n<li><p>a    进入编辑模式，在当前光标后插入</p>\n</li>\n<li><p>A    进入编辑模式，光标移动到行尾</p>\n</li>\n<li><p>o    进入编辑模式，当前行下面插入新一行</p>\n</li>\n<li><p>O    进入编辑模式，当前行上面插入一行</p>\n</li>\n</ol>\n<h4 id=\"编辑模式\"><a href=\"#编辑模式\" class=\"headerlink\" title=\"编辑模式\"></a>编辑模式</h4><ul>\n<li>编辑模式下，操作和正常widows编辑器操作类似</li>\n</ul>"},{"title":"git应用之版本控制工具","date":"2016-05-20T05:57:39.000Z","_content":"\n##\t版本控制工具\n\n####\t版本控制工具可以解决的问题\n\n1.\t代码合并\n\n2.\t协同开发\n\n3.\t提供效率\n\n4.\t回退版本\n\n5.\t数据丢失\n\n6.\t分支管理-多任务处理\n\n####\t分类\n\n1.\t集中式版本控制管理工具：\n\n\t* 如：svn\n\n\t*\t在集中式版本控制工具中，都会有一个中央服务器，所有的协同开发者都需要来连接到这个服务器，将所有源代码都放在中央服务器上，\n\n\t*\t开发中，首先需要从中央服务器种下载代码（或者更新代码），然后在本地开发，\n\n\t*\t如果开发完毕，需要通过网络把开发完成的代码提交到中央服务器上。\n\n\t*\t这种方式解决了多人协同开发的问题，由于过渡依赖于网络和中央服务器，\n\n\t*\t如果中央服务器出现故障，将会严重导致数据版本丢失的风险，\n\n\t*\t另外，如果网路出现问题，也就没有办法更新，同步代码。\n<!-- more -->\n\t\n\n2.\t分布式\n\n\t*\t这种方式不需要中央服务器，每一个协同开发者，都是有一个完整的版本库，这样一来，任何协同开发者出现问题，事后都可以通过其它协同开发者进行恢复。\n\t\n\t*\t由于版本库在本地计算机，也就不再受网络影响，如果要将本地修改的代码推送给其它协同开发者，还需要一台 共享服务器，所有开发者通过这台服务器进行同步和更新。\n\n\t*\t分布式版本控制系统弥补了集中式版本控制工具的缺陷，成为了版本控制的首选，现在用的最多的就是Git。\n","source":"_posts/git应用之版本控制.md","raw":"---\ntitle: git应用之版本控制工具\ndate: 2016-05-20 13:57:39\ntags: [git,版本控制,工具]\n---\n\n##\t版本控制工具\n\n####\t版本控制工具可以解决的问题\n\n1.\t代码合并\n\n2.\t协同开发\n\n3.\t提供效率\n\n4.\t回退版本\n\n5.\t数据丢失\n\n6.\t分支管理-多任务处理\n\n####\t分类\n\n1.\t集中式版本控制管理工具：\n\n\t* 如：svn\n\n\t*\t在集中式版本控制工具中，都会有一个中央服务器，所有的协同开发者都需要来连接到这个服务器，将所有源代码都放在中央服务器上，\n\n\t*\t开发中，首先需要从中央服务器种下载代码（或者更新代码），然后在本地开发，\n\n\t*\t如果开发完毕，需要通过网络把开发完成的代码提交到中央服务器上。\n\n\t*\t这种方式解决了多人协同开发的问题，由于过渡依赖于网络和中央服务器，\n\n\t*\t如果中央服务器出现故障，将会严重导致数据版本丢失的风险，\n\n\t*\t另外，如果网路出现问题，也就没有办法更新，同步代码。\n<!-- more -->\n\t\n\n2.\t分布式\n\n\t*\t这种方式不需要中央服务器，每一个协同开发者，都是有一个完整的版本库，这样一来，任何协同开发者出现问题，事后都可以通过其它协同开发者进行恢复。\n\t\n\t*\t由于版本库在本地计算机，也就不再受网络影响，如果要将本地修改的代码推送给其它协同开发者，还需要一台 共享服务器，所有开发者通过这台服务器进行同步和更新。\n\n\t*\t分布式版本控制系统弥补了集中式版本控制工具的缺陷，成为了版本控制的首选，现在用的最多的就是Git。\n","slug":"git应用之版本控制","published":1,"updated":"2018-01-31T12:39:09.814Z","_id":"cjd30vw9e000w581i3h20kcl3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"版本控制工具\"><a href=\"#版本控制工具\" class=\"headerlink\" title=\"版本控制工具\"></a>版本控制工具</h2><h4 id=\"版本控制工具可以解决的问题\"><a href=\"#版本控制工具可以解决的问题\" class=\"headerlink\" title=\"版本控制工具可以解决的问题\"></a>版本控制工具可以解决的问题</h4><ol>\n<li><p>代码合并</p>\n</li>\n<li><p>协同开发</p>\n</li>\n<li><p>提供效率</p>\n</li>\n<li><p>回退版本</p>\n</li>\n<li><p>数据丢失</p>\n</li>\n<li><p>分支管理-多任务处理</p>\n</li>\n</ol>\n<h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><ol>\n<li><p>集中式版本控制管理工具：</p>\n<ul>\n<li><p>如：svn</p>\n</li>\n<li><p>在集中式版本控制工具中，都会有一个中央服务器，所有的协同开发者都需要来连接到这个服务器，将所有源代码都放在中央服务器上，</p>\n</li>\n<li><p>开发中，首先需要从中央服务器种下载代码（或者更新代码），然后在本地开发，</p>\n</li>\n<li><p>如果开发完毕，需要通过网络把开发完成的代码提交到中央服务器上。</p>\n</li>\n<li><p>这种方式解决了多人协同开发的问题，由于过渡依赖于网络和中央服务器，</p>\n</li>\n<li><p>如果中央服务器出现故障，将会严重导致数据版本丢失的风险，</p>\n</li>\n<li><p>另外，如果网路出现问题，也就没有办法更新，同步代码。</p>\n<a id=\"more\"></a>\n</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p>分布式</p>\n<ul>\n<li><p>这种方式不需要中央服务器，每一个协同开发者，都是有一个完整的版本库，这样一来，任何协同开发者出现问题，事后都可以通过其它协同开发者进行恢复。</p>\n</li>\n<li><p>由于版本库在本地计算机，也就不再受网络影响，如果要将本地修改的代码推送给其它协同开发者，还需要一台 共享服务器，所有开发者通过这台服务器进行同步和更新。</p>\n</li>\n<li><p>分布式版本控制系统弥补了集中式版本控制工具的缺陷，成为了版本控制的首选，现在用的最多的就是Git。</p>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"版本控制工具\"><a href=\"#版本控制工具\" class=\"headerlink\" title=\"版本控制工具\"></a>版本控制工具</h2><h4 id=\"版本控制工具可以解决的问题\"><a href=\"#版本控制工具可以解决的问题\" class=\"headerlink\" title=\"版本控制工具可以解决的问题\"></a>版本控制工具可以解决的问题</h4><ol>\n<li><p>代码合并</p>\n</li>\n<li><p>协同开发</p>\n</li>\n<li><p>提供效率</p>\n</li>\n<li><p>回退版本</p>\n</li>\n<li><p>数据丢失</p>\n</li>\n<li><p>分支管理-多任务处理</p>\n</li>\n</ol>\n<h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><ol>\n<li><p>集中式版本控制管理工具：</p>\n<ul>\n<li><p>如：svn</p>\n</li>\n<li><p>在集中式版本控制工具中，都会有一个中央服务器，所有的协同开发者都需要来连接到这个服务器，将所有源代码都放在中央服务器上，</p>\n</li>\n<li><p>开发中，首先需要从中央服务器种下载代码（或者更新代码），然后在本地开发，</p>\n</li>\n<li><p>如果开发完毕，需要通过网络把开发完成的代码提交到中央服务器上。</p>\n</li>\n<li><p>这种方式解决了多人协同开发的问题，由于过渡依赖于网络和中央服务器，</p>\n</li>\n<li><p>如果中央服务器出现故障，将会严重导致数据版本丢失的风险，</p>\n</li>\n<li><p>另外，如果网路出现问题，也就没有办法更新，同步代码。</p>","more":"</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p>分布式</p>\n<ul>\n<li><p>这种方式不需要中央服务器，每一个协同开发者，都是有一个完整的版本库，这样一来，任何协同开发者出现问题，事后都可以通过其它协同开发者进行恢复。</p>\n</li>\n<li><p>由于版本库在本地计算机，也就不再受网络影响，如果要将本地修改的代码推送给其它协同开发者，还需要一台 共享服务器，所有开发者通过这台服务器进行同步和更新。</p>\n</li>\n<li><p>分布式版本控制系统弥补了集中式版本控制工具的缺陷，成为了版本控制的首选，现在用的最多的就是Git。</p>\n</li>\n</ul>\n</li>\n</ol>"},{"title":"git应用之认识SSH","date":"2016-05-10T04:02:43.000Z","_content":"\n##\t什么是SSH\n\n*\tSSH是一种网络协议，用于计算机之间的加密登录。\n\n*\tSSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。我们主要针对OpenSSH，它是自由软件，应用非常广泛。\n\n*\t如果要 在widows种使用SSH，会使用到一种软件PuTTY，我们用的git客户端也集成了SSH。\n\n* 格式：ssh user@host\n* user 代表用户，host代表要登录的远程计算机\n\n###\t常见的两种加密方式\n\n* 常见的两种加密技术，分别是对称性加密和非对称性加密，SSH属于后者。\n\n* 对称性加密算法，在加密和解密时，使用的是同一个密钥；\n\n* 而非对称性加密算法需要两个密钥来进行加密和解密。这两个密钥分别是公开密钥(public key,公钥)和私有密钥(private key,私钥)。\n<!-- more -->\n\n#####\t非对称性加密的工作原理\n\n* 公钥和私钥是成对出现，可以通过ssh-keygen -t rsa来创建，既可以通过密钥加密数据，也可以过通过私钥来加密数据，如果是以公钥进行的数据加密，只有通过与之对应的私钥才可解密，相反，如果以私钥进行的数据加密，则只能通过与之对应的公钥才可将数据解密，这样就可以提高信息传递的安全性，\n\n#####\t免密码登录\n\n*\t我们可以将本地机器上的公钥保存到特定的远程计算机上，这样当我们再次登录访问这台远程计算机时就可以实现免密码登录了。\n\n1.\tssh-keygen -t rsa 会创建公钥和密钥（默认在用户目录/.ssh中）\n\n2.\tssh-copy-id user@host\t添加到对应远程主机的用户目录/.ssh目录下\n\n3.\t也可以登录远程主机，进入到用户目录/.ssh目录下手动创建authorized keys文件，并将自己的公钥粘贴到该文件。","source":"_posts/git应用之认识SSH.md","raw":"---\ntitle: git应用之认识SSH\ndate: 2016-05-10 12:02:43\ntags: [git,SSH,工具]\n---\n\n##\t什么是SSH\n\n*\tSSH是一种网络协议，用于计算机之间的加密登录。\n\n*\tSSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。我们主要针对OpenSSH，它是自由软件，应用非常广泛。\n\n*\t如果要 在widows种使用SSH，会使用到一种软件PuTTY，我们用的git客户端也集成了SSH。\n\n* 格式：ssh user@host\n* user 代表用户，host代表要登录的远程计算机\n\n###\t常见的两种加密方式\n\n* 常见的两种加密技术，分别是对称性加密和非对称性加密，SSH属于后者。\n\n* 对称性加密算法，在加密和解密时，使用的是同一个密钥；\n\n* 而非对称性加密算法需要两个密钥来进行加密和解密。这两个密钥分别是公开密钥(public key,公钥)和私有密钥(private key,私钥)。\n<!-- more -->\n\n#####\t非对称性加密的工作原理\n\n* 公钥和私钥是成对出现，可以通过ssh-keygen -t rsa来创建，既可以通过密钥加密数据，也可以过通过私钥来加密数据，如果是以公钥进行的数据加密，只有通过与之对应的私钥才可解密，相反，如果以私钥进行的数据加密，则只能通过与之对应的公钥才可将数据解密，这样就可以提高信息传递的安全性，\n\n#####\t免密码登录\n\n*\t我们可以将本地机器上的公钥保存到特定的远程计算机上，这样当我们再次登录访问这台远程计算机时就可以实现免密码登录了。\n\n1.\tssh-keygen -t rsa 会创建公钥和密钥（默认在用户目录/.ssh中）\n\n2.\tssh-copy-id user@host\t添加到对应远程主机的用户目录/.ssh目录下\n\n3.\t也可以登录远程主机，进入到用户目录/.ssh目录下手动创建authorized keys文件，并将自己的公钥粘贴到该文件。","slug":"git应用之认识SSH","published":1,"updated":"2018-01-31T12:39:09.819Z","_id":"cjd30vw9n000y581iwmkfdgu2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是SSH\"><a href=\"#什么是SSH\" class=\"headerlink\" title=\"什么是SSH\"></a>什么是SSH</h2><ul>\n<li><p>SSH是一种网络协议，用于计算机之间的加密登录。</p>\n</li>\n<li><p>SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。我们主要针对OpenSSH，它是自由软件，应用非常广泛。</p>\n</li>\n<li><p>如果要 在widows种使用SSH，会使用到一种软件PuTTY，我们用的git客户端也集成了SSH。</p>\n</li>\n<li><p>格式：ssh user@host</p>\n</li>\n<li>user 代表用户，host代表要登录的远程计算机</li>\n</ul>\n<h3 id=\"常见的两种加密方式\"><a href=\"#常见的两种加密方式\" class=\"headerlink\" title=\"常见的两种加密方式\"></a>常见的两种加密方式</h3><ul>\n<li><p>常见的两种加密技术，分别是对称性加密和非对称性加密，SSH属于后者。</p>\n</li>\n<li><p>对称性加密算法，在加密和解密时，使用的是同一个密钥；</p>\n</li>\n<li><p>而非对称性加密算法需要两个密钥来进行加密和解密。这两个密钥分别是公开密钥(public key,公钥)和私有密钥(private key,私钥)。</p>\n<a id=\"more\"></a>\n</li>\n</ul>\n<h5 id=\"非对称性加密的工作原理\"><a href=\"#非对称性加密的工作原理\" class=\"headerlink\" title=\"非对称性加密的工作原理\"></a>非对称性加密的工作原理</h5><ul>\n<li>公钥和私钥是成对出现，可以通过ssh-keygen -t rsa来创建，既可以通过密钥加密数据，也可以过通过私钥来加密数据，如果是以公钥进行的数据加密，只有通过与之对应的私钥才可解密，相反，如果以私钥进行的数据加密，则只能通过与之对应的公钥才可将数据解密，这样就可以提高信息传递的安全性，</li>\n</ul>\n<h5 id=\"免密码登录\"><a href=\"#免密码登录\" class=\"headerlink\" title=\"免密码登录\"></a>免密码登录</h5><ul>\n<li>我们可以将本地机器上的公钥保存到特定的远程计算机上，这样当我们再次登录访问这台远程计算机时就可以实现免密码登录了。</li>\n</ul>\n<ol>\n<li><p>ssh-keygen -t rsa 会创建公钥和密钥（默认在用户目录/.ssh中）</p>\n</li>\n<li><p>ssh-copy-id user@host    添加到对应远程主机的用户目录/.ssh目录下</p>\n</li>\n<li><p>也可以登录远程主机，进入到用户目录/.ssh目录下手动创建authorized keys文件，并将自己的公钥粘贴到该文件。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是SSH\"><a href=\"#什么是SSH\" class=\"headerlink\" title=\"什么是SSH\"></a>什么是SSH</h2><ul>\n<li><p>SSH是一种网络协议，用于计算机之间的加密登录。</p>\n</li>\n<li><p>SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。我们主要针对OpenSSH，它是自由软件，应用非常广泛。</p>\n</li>\n<li><p>如果要 在widows种使用SSH，会使用到一种软件PuTTY，我们用的git客户端也集成了SSH。</p>\n</li>\n<li><p>格式：ssh user@host</p>\n</li>\n<li>user 代表用户，host代表要登录的远程计算机</li>\n</ul>\n<h3 id=\"常见的两种加密方式\"><a href=\"#常见的两种加密方式\" class=\"headerlink\" title=\"常见的两种加密方式\"></a>常见的两种加密方式</h3><ul>\n<li><p>常见的两种加密技术，分别是对称性加密和非对称性加密，SSH属于后者。</p>\n</li>\n<li><p>对称性加密算法，在加密和解密时，使用的是同一个密钥；</p>\n</li>\n<li><p>而非对称性加密算法需要两个密钥来进行加密和解密。这两个密钥分别是公开密钥(public key,公钥)和私有密钥(private key,私钥)。</p>","more":"</li>\n</ul>\n<h5 id=\"非对称性加密的工作原理\"><a href=\"#非对称性加密的工作原理\" class=\"headerlink\" title=\"非对称性加密的工作原理\"></a>非对称性加密的工作原理</h5><ul>\n<li>公钥和私钥是成对出现，可以通过ssh-keygen -t rsa来创建，既可以通过密钥加密数据，也可以过通过私钥来加密数据，如果是以公钥进行的数据加密，只有通过与之对应的私钥才可解密，相反，如果以私钥进行的数据加密，则只能通过与之对应的公钥才可将数据解密，这样就可以提高信息传递的安全性，</li>\n</ul>\n<h5 id=\"免密码登录\"><a href=\"#免密码登录\" class=\"headerlink\" title=\"免密码登录\"></a>免密码登录</h5><ul>\n<li>我们可以将本地机器上的公钥保存到特定的远程计算机上，这样当我们再次登录访问这台远程计算机时就可以实现免密码登录了。</li>\n</ul>\n<ol>\n<li><p>ssh-keygen -t rsa 会创建公钥和密钥（默认在用户目录/.ssh中）</p>\n</li>\n<li><p>ssh-copy-id user@host    添加到对应远程主机的用户目录/.ssh目录下</p>\n</li>\n<li><p>也可以登录远程主机，进入到用户目录/.ssh目录下手动创建authorized keys文件，并将自己的公钥粘贴到该文件。</p>\n</li>\n</ol>"},{"title":"hexo搭建博客常见问题","date":"2016-04-24T08:47:17.000Z","_content":"\n\n##  1.  当执行hexo-d时报错,执行以下代码之后,重新提交就可以了\n\n```\ngit config --global core.autocrlf false\n```\n<!-- more -->\n##  2. ENOSPC报错\n>    在ubuntu系统中，执行hexo时，出现ENOSPC报错,可以运行来修复$ npm dedupe，如果还是不行，尝试以下命令：（亲测可行）\n```\n$ echo fs.inotify.max_user_watches = 524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\n\n```","source":"_posts/hexo搭建博客常见问题.md","raw":"---\ntitle: hexo搭建博客常见问题\ntags: [hexo ubuntu]\ndate: 2016-04-24 16:47:17\n---\n\n\n##  1.  当执行hexo-d时报错,执行以下代码之后,重新提交就可以了\n\n```\ngit config --global core.autocrlf false\n```\n<!-- more -->\n##  2. ENOSPC报错\n>    在ubuntu系统中，执行hexo时，出现ENOSPC报错,可以运行来修复$ npm dedupe，如果还是不行，尝试以下命令：（亲测可行）\n```\n$ echo fs.inotify.max_user_watches = 524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\n\n```","slug":"hexo搭建博客常见问题","published":1,"updated":"2018-01-31T12:39:09.826Z","_id":"cjd30vw9s0010581iq3w12x5g","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-当执行hexo-d时报错-执行以下代码之后-重新提交就可以了\"><a href=\"#1-当执行hexo-d时报错-执行以下代码之后-重新提交就可以了\" class=\"headerlink\" title=\"1.  当执行hexo-d时报错,执行以下代码之后,重新提交就可以了\"></a>1.  当执行hexo-d时报错,执行以下代码之后,重新提交就可以了</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"2-ENOSPC报错\"><a href=\"#2-ENOSPC报错\" class=\"headerlink\" title=\"2. ENOSPC报错\"></a>2. ENOSPC报错</h2><blockquote>\n<p>   在ubuntu系统中，执行hexo时，出现ENOSPC报错,可以运行来修复$ npm dedupe，如果还是不行，尝试以下命令：（亲测可行）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo fs.inotify.max_user_watches = 524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-当执行hexo-d时报错-执行以下代码之后-重新提交就可以了\"><a href=\"#1-当执行hexo-d时报错-执行以下代码之后-重新提交就可以了\" class=\"headerlink\" title=\"1.  当执行hexo-d时报错,执行以下代码之后,重新提交就可以了\"></a>1.  当执行hexo-d时报错,执行以下代码之后,重新提交就可以了</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"2-ENOSPC报错\"><a href=\"#2-ENOSPC报错\" class=\"headerlink\" title=\"2. ENOSPC报错\"></a>2. ENOSPC报错</h2><blockquote>\n<p>   在ubuntu系统中，执行hexo时，出现ENOSPC报错,可以运行来修复$ npm dedupe，如果还是不行，尝试以下命令：（亲测可行）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo fs.inotify.max_user_watches = 524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</span><br></pre></td></tr></table></figure></p>\n</blockquote>"},{"title":"把markdown文件转换为html文件","date":"2016-01-13T05:57:39.000Z","_content":"# MarkDown自动转换html页面\n\n* 因为markdown语法的方便，平常我经常用markdown来做一些笔记，但有时候需要把md文件转换成html页面，所以现在就把转换方法简单记录下，方便大家学习。不过肯定有别的更好的方法，如果你看到了，觉得你有更好的方法，希望你能不吝赐教，交流学习！\n\n##  插件安装\n   * 首先第一步肯定是安装转换工具了，我现在用的是i5ting_toc这个工具，这个工具是依赖node的，所以需要先安装node的，node的详细安装方法，这里就不细说了，如果不会的，可以去问问老李（百度），\n   * 然后在npm中执行以下命令，npm会自动安装，\n    \n    ```\n    npm install -g i5ting_toc\n    ```\n    \n<!-- more -->\n##  文件转换\n\n   *  安装完成之后，就开始准备转换了，那么我们在你要转换的markdown文件的文件夹，按住shift键右键点击文件夹空白地方，会弹出右键菜单，然后选择“打开命令行窗口”选项，接着在命令行输入以下命令，系统就会自动输出html文件。\n  \n    ```\n    i5ting_toc -f note.md -o\n    //note.md 为需要转换的文件名\n    //-o 在转换完成之后会自动打开html页面\n    ```\n* 完毕，至此，我们的文件已经转换完成了，至于更换模板什么的，我现在还不知道怎么弄，望知道的大神指点一二。不胜感激！","source":"_posts/markdown2html.md","raw":"---\ntitle: 把markdown文件转换为html文件\ndate: 2016-01-13 13:57:39\ntags:   [markdown,转换，html,i5ting_toc]\n---\n# MarkDown自动转换html页面\n\n* 因为markdown语法的方便，平常我经常用markdown来做一些笔记，但有时候需要把md文件转换成html页面，所以现在就把转换方法简单记录下，方便大家学习。不过肯定有别的更好的方法，如果你看到了，觉得你有更好的方法，希望你能不吝赐教，交流学习！\n\n##  插件安装\n   * 首先第一步肯定是安装转换工具了，我现在用的是i5ting_toc这个工具，这个工具是依赖node的，所以需要先安装node的，node的详细安装方法，这里就不细说了，如果不会的，可以去问问老李（百度），\n   * 然后在npm中执行以下命令，npm会自动安装，\n    \n    ```\n    npm install -g i5ting_toc\n    ```\n    \n<!-- more -->\n##  文件转换\n\n   *  安装完成之后，就开始准备转换了，那么我们在你要转换的markdown文件的文件夹，按住shift键右键点击文件夹空白地方，会弹出右键菜单，然后选择“打开命令行窗口”选项，接着在命令行输入以下命令，系统就会自动输出html文件。\n  \n    ```\n    i5ting_toc -f note.md -o\n    //note.md 为需要转换的文件名\n    //-o 在转换完成之后会自动打开html页面\n    ```\n* 完毕，至此，我们的文件已经转换完成了，至于更换模板什么的，我现在还不知道怎么弄，望知道的大神指点一二。不胜感激！","slug":"markdown2html","published":1,"updated":"2018-01-31T12:39:09.837Z","_id":"cjd30vw9y0011581iwim4slu9","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"MarkDown自动转换html页面\"><a href=\"#MarkDown自动转换html页面\" class=\"headerlink\" title=\"MarkDown自动转换html页面\"></a>MarkDown自动转换html页面</h1><ul>\n<li>因为markdown语法的方便，平常我经常用markdown来做一些笔记，但有时候需要把md文件转换成html页面，所以现在就把转换方法简单记录下，方便大家学习。不过肯定有别的更好的方法，如果你看到了，觉得你有更好的方法，希望你能不吝赐教，交流学习！</li>\n</ul>\n<h2 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h2><ul>\n<li>首先第一步肯定是安装转换工具了，我现在用的是i5ting_toc这个工具，这个工具是依赖node的，所以需要先安装node的，node的详细安装方法，这里就不细说了，如果不会的，可以去问问老李（百度），</li>\n<li><p>然后在npm中执行以下命令，npm会自动安装，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g i5ting_toc</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"文件转换\"><a href=\"#文件转换\" class=\"headerlink\" title=\"文件转换\"></a>文件转换</h2><ul>\n<li><p>安装完成之后，就开始准备转换了，那么我们在你要转换的markdown文件的文件夹，按住shift键右键点击文件夹空白地方，会弹出右键菜单，然后选择“打开命令行窗口”选项，接着在命令行输入以下命令，系统就会自动输出html文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i5ting_toc -f note.md -o</span><br><span class=\"line\">//note.md 为需要转换的文件名</span><br><span class=\"line\">//-o 在转换完成之后会自动打开html页面</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>完毕，至此，我们的文件已经转换完成了，至于更换模板什么的，我现在还不知道怎么弄，望知道的大神指点一二。不胜感激！</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"MarkDown自动转换html页面\"><a href=\"#MarkDown自动转换html页面\" class=\"headerlink\" title=\"MarkDown自动转换html页面\"></a>MarkDown自动转换html页面</h1><ul>\n<li>因为markdown语法的方便，平常我经常用markdown来做一些笔记，但有时候需要把md文件转换成html页面，所以现在就把转换方法简单记录下，方便大家学习。不过肯定有别的更好的方法，如果你看到了，觉得你有更好的方法，希望你能不吝赐教，交流学习！</li>\n</ul>\n<h2 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h2><ul>\n<li>首先第一步肯定是安装转换工具了，我现在用的是i5ting_toc这个工具，这个工具是依赖node的，所以需要先安装node的，node的详细安装方法，这里就不细说了，如果不会的，可以去问问老李（百度），</li>\n<li><p>然后在npm中执行以下命令，npm会自动安装，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g i5ting_toc</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<h2 id=\"文件转换\"><a href=\"#文件转换\" class=\"headerlink\" title=\"文件转换\"></a>文件转换</h2><ul>\n<li><p>安装完成之后，就开始准备转换了，那么我们在你要转换的markdown文件的文件夹，按住shift键右键点击文件夹空白地方，会弹出右键菜单，然后选择“打开命令行窗口”选项，接着在命令行输入以下命令，系统就会自动输出html文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i5ting_toc -f note.md -o</span><br><span class=\"line\">//note.md 为需要转换的文件名</span><br><span class=\"line\">//-o 在转换完成之后会自动打开html页面</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>完毕，至此，我们的文件已经转换完成了，至于更换模板什么的，我现在还不知道怎么弄，望知道的大神指点一二。不胜感激！</li>\n</ul>"},{"title":"NodeJS构建express框架开发简单应用","date":"2017-01-10T13:39:28.000Z","_content":"\n>   使用node express简单构建，配合MongoDB数据库，实现简单的增删改查操作\n\n## 首先我们需要构建express本地框架结构\n\n```npm\n    express demo\n    //在demo文件夹中构建express结构\n```\n\n##  然后我们运行一下，\n\n```\n    npm start\n```\n执行之后，我们在浏览器打开localhost:3000就可以看到初始化的页面，\n\n##  因为我们是使用 MongoDb数据库，所以需要安装mongodb的nodeJS包，\n\nmongodb包的api基本上mongodb数据库的命令行操作命令差不多，所以，如果你比较清楚命令行操作命令，使用起来就会非常方便，\n```\n//安装mongodb包\nnpm install mongodb --save\n//安装依赖包\nnpm install\n```\n至此，所有的准备工作基本完成，当然，前提你已经装好mongodb数据库，而且在使用的时候，需要全程开启数据库服务器。mongodb数据库的安装，我以前有文章有介绍过，有兴趣的可以去看看。\n\n## 我们使用MVC架构来实现针对数据库的增删改查，\n\n-   我们创建一个文件夹 module，就是连接控制数据库的文件。\n-   我们使用routes来代替controller同样的功能，来连接视图层和数据库的连接。\n-   我们的整体逻辑是，我们路由中添加一个get请求，请求中调用module中的一个操作方法，然后module中的添加方法，再去调用数据库连接，然后在使用操作api操作数据库。\n##  在module中首先连接到数据库\n\n<!-- more -->\n\n```js\n//得到MongoClient对象\nvar MongoClient = require(\"mongodb\").MongoClient;\nvar url = \"数据库主机ip:port/数据库名\"\n\nmodule.exports = function(callback){\n\n    MongoClient.connect(url,function(err,db){\n        if(err){\n            //代表连接失败\n        return callback(err);\n        }\n        callback(null,db)\n    })\n}\n\n```\n\n","source":"_posts/nodeJS构建express框架开发简单应用.md","raw":"---\ntitle: NodeJS构建express框架开发简单应用\ntags: [NodeJS express]\ndate: 2017-01-10 21:39:28\n---\n\n>   使用node express简单构建，配合MongoDB数据库，实现简单的增删改查操作\n\n## 首先我们需要构建express本地框架结构\n\n```npm\n    express demo\n    //在demo文件夹中构建express结构\n```\n\n##  然后我们运行一下，\n\n```\n    npm start\n```\n执行之后，我们在浏览器打开localhost:3000就可以看到初始化的页面，\n\n##  因为我们是使用 MongoDb数据库，所以需要安装mongodb的nodeJS包，\n\nmongodb包的api基本上mongodb数据库的命令行操作命令差不多，所以，如果你比较清楚命令行操作命令，使用起来就会非常方便，\n```\n//安装mongodb包\nnpm install mongodb --save\n//安装依赖包\nnpm install\n```\n至此，所有的准备工作基本完成，当然，前提你已经装好mongodb数据库，而且在使用的时候，需要全程开启数据库服务器。mongodb数据库的安装，我以前有文章有介绍过，有兴趣的可以去看看。\n\n## 我们使用MVC架构来实现针对数据库的增删改查，\n\n-   我们创建一个文件夹 module，就是连接控制数据库的文件。\n-   我们使用routes来代替controller同样的功能，来连接视图层和数据库的连接。\n-   我们的整体逻辑是，我们路由中添加一个get请求，请求中调用module中的一个操作方法，然后module中的添加方法，再去调用数据库连接，然后在使用操作api操作数据库。\n##  在module中首先连接到数据库\n\n<!-- more -->\n\n```js\n//得到MongoClient对象\nvar MongoClient = require(\"mongodb\").MongoClient;\nvar url = \"数据库主机ip:port/数据库名\"\n\nmodule.exports = function(callback){\n\n    MongoClient.connect(url,function(err,db){\n        if(err){\n            //代表连接失败\n        return callback(err);\n        }\n        callback(null,db)\n    })\n}\n\n```\n\n","slug":"nodeJS构建express框架开发简单应用","published":1,"updated":"2018-01-31T12:37:12.974Z","_id":"cjd30vwa80013581iu01cqm8a","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>  使用node express简单构建，配合MongoDB数据库，实现简单的增删改查操作</p>\n</blockquote>\n<h2 id=\"首先我们需要构建express本地框架结构\"><a href=\"#首先我们需要构建express本地框架结构\" class=\"headerlink\" title=\"首先我们需要构建express本地框架结构\"></a>首先我们需要构建express本地框架结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express demo</span><br><span class=\"line\">//在demo文件夹中构建express结构</span><br></pre></td></tr></table></figure>\n<h2 id=\"然后我们运行一下，\"><a href=\"#然后我们运行一下，\" class=\"headerlink\" title=\"然后我们运行一下，\"></a>然后我们运行一下，</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<p>执行之后，我们在浏览器打开localhost:3000就可以看到初始化的页面，</p>\n<h2 id=\"因为我们是使用-MongoDb数据库，所以需要安装mongodb的nodeJS包，\"><a href=\"#因为我们是使用-MongoDb数据库，所以需要安装mongodb的nodeJS包，\" class=\"headerlink\" title=\"因为我们是使用 MongoDb数据库，所以需要安装mongodb的nodeJS包，\"></a>因为我们是使用 MongoDb数据库，所以需要安装mongodb的nodeJS包，</h2><p>mongodb包的api基本上mongodb数据库的命令行操作命令差不多，所以，如果你比较清楚命令行操作命令，使用起来就会非常方便，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装mongodb包</span><br><span class=\"line\">npm install mongodb --save</span><br><span class=\"line\">//安装依赖包</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<p>至此，所有的准备工作基本完成，当然，前提你已经装好mongodb数据库，而且在使用的时候，需要全程开启数据库服务器。mongodb数据库的安装，我以前有文章有介绍过，有兴趣的可以去看看。</p>\n<h2 id=\"我们使用MVC架构来实现针对数据库的增删改查，\"><a href=\"#我们使用MVC架构来实现针对数据库的增删改查，\" class=\"headerlink\" title=\"我们使用MVC架构来实现针对数据库的增删改查，\"></a>我们使用MVC架构来实现针对数据库的增删改查，</h2><ul>\n<li>我们创建一个文件夹 module，就是连接控制数据库的文件。</li>\n<li>我们使用routes来代替controller同样的功能，来连接视图层和数据库的连接。</li>\n<li>我们的整体逻辑是，我们路由中添加一个get请求，请求中调用module中的一个操作方法，然后module中的添加方法，再去调用数据库连接，然后在使用操作api操作数据库。<h2 id=\"在module中首先连接到数据库\"><a href=\"#在module中首先连接到数据库\" class=\"headerlink\" title=\"在module中首先连接到数据库\"></a>在module中首先连接到数据库</h2></li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//得到MongoClient对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongodb\"</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"数据库主机ip:port/数据库名\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    MongoClient.connect(url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,db</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//代表连接失败</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> callback(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>,db)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>  使用node express简单构建，配合MongoDB数据库，实现简单的增删改查操作</p>\n</blockquote>\n<h2 id=\"首先我们需要构建express本地框架结构\"><a href=\"#首先我们需要构建express本地框架结构\" class=\"headerlink\" title=\"首先我们需要构建express本地框架结构\"></a>首先我们需要构建express本地框架结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express demo</span><br><span class=\"line\">//在demo文件夹中构建express结构</span><br></pre></td></tr></table></figure>\n<h2 id=\"然后我们运行一下，\"><a href=\"#然后我们运行一下，\" class=\"headerlink\" title=\"然后我们运行一下，\"></a>然后我们运行一下，</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<p>执行之后，我们在浏览器打开localhost:3000就可以看到初始化的页面，</p>\n<h2 id=\"因为我们是使用-MongoDb数据库，所以需要安装mongodb的nodeJS包，\"><a href=\"#因为我们是使用-MongoDb数据库，所以需要安装mongodb的nodeJS包，\" class=\"headerlink\" title=\"因为我们是使用 MongoDb数据库，所以需要安装mongodb的nodeJS包，\"></a>因为我们是使用 MongoDb数据库，所以需要安装mongodb的nodeJS包，</h2><p>mongodb包的api基本上mongodb数据库的命令行操作命令差不多，所以，如果你比较清楚命令行操作命令，使用起来就会非常方便，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装mongodb包</span><br><span class=\"line\">npm install mongodb --save</span><br><span class=\"line\">//安装依赖包</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<p>至此，所有的准备工作基本完成，当然，前提你已经装好mongodb数据库，而且在使用的时候，需要全程开启数据库服务器。mongodb数据库的安装，我以前有文章有介绍过，有兴趣的可以去看看。</p>\n<h2 id=\"我们使用MVC架构来实现针对数据库的增删改查，\"><a href=\"#我们使用MVC架构来实现针对数据库的增删改查，\" class=\"headerlink\" title=\"我们使用MVC架构来实现针对数据库的增删改查，\"></a>我们使用MVC架构来实现针对数据库的增删改查，</h2><ul>\n<li>我们创建一个文件夹 module，就是连接控制数据库的文件。</li>\n<li>我们使用routes来代替controller同样的功能，来连接视图层和数据库的连接。</li>\n<li>我们的整体逻辑是，我们路由中添加一个get请求，请求中调用module中的一个操作方法，然后module中的添加方法，再去调用数据库连接，然后在使用操作api操作数据库。<h2 id=\"在module中首先连接到数据库\"><a href=\"#在module中首先连接到数据库\" class=\"headerlink\" title=\"在module中首先连接到数据库\"></a>在module中首先连接到数据库</h2></li>\n</ul>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//得到MongoClient对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongodb\"</span>).MongoClient;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"数据库主机ip:port/数据库名\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    MongoClient.connect(url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,db</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//代表连接失败</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> callback(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>,db)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"markdown基本语法","date":"2016-01-14T00:56:31.000Z","_content":"##\t标题\n\n\n*\t标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。\n\n\n```\n\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n```\n以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。\n\n-\t在Markdown当中设置标题，还有第二种方式：\n通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。\n\n## 列表\n\n熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加1. 2. 3. 符号要和文字之间加上一个字符的空格。\n\n## 引用\n\n-\t如果你需要引用一小段别处的句子，那么就要用引用的格式。\n\n-\t只需要在文本前加入 > 这种尖括号（大于号）即可\n\n\n<!-- more -->\n##\t图片与链接\n\n-\t插入链接与插入图片的语法很像，区别在一个 !号\n\n```\n图片为：![](){ImgCap}{/ImgCap}\n\n链接为：[]()\n```\n\n##\t粗体与斜体\n\n-\tMarkdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。\n\n\n\n## 表格\n\n-\t表格是我觉得 Markdown 比较累人的地方，例子如下：\n\n```\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n```\n这种语法生成的表格如下：\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\n\n\n##\t代码框\n\n如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单，只需要用两个 ` 把中间的代码包裹起来。图例：\n\n\n使用 tab 键即可缩进。\n\n##\t分割线\n\n分割线的语法只需要三个 * 号，例如：\n\n到这里，Markdown 的基本语法在日常的使用中基本就没什么大问题了，只要多加练习，配合好用的工具，写起东西来肯定会行云流水。更多的语法规则，其实 Mou 的 Help 文档栗子很好，当你第一次使用 Mou 时，就会显示该文档。可以用来对用的查找和学习。\n\n##\t相关推荐:\n\n工具\n\n图床工具用来上传图片获取 URL 地址\n\nDroplr\nCloudapp\nezShare for Mac\n围脖图床修复计划\n在线好用的Markdown工具，为印象笔记而生\n\n马克飞象，专为印象笔记打造的Markdown编辑器，非常推荐\n相关文章阅读：\n\n为什么作家应该用 Markdown 保存自己的文稿","source":"_posts/markdown基本语法.md","raw":"---\ntitle: markdown基本语法\ndate: 2016-01-14 08:56:31\ntags: [markdown,语法]\n---\n##\t标题\n\n\n*\t标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。\n\n\n```\n\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n```\n以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。\n\n-\t在Markdown当中设置标题，还有第二种方式：\n通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。\n\n## 列表\n\n熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加1. 2. 3. 符号要和文字之间加上一个字符的空格。\n\n## 引用\n\n-\t如果你需要引用一小段别处的句子，那么就要用引用的格式。\n\n-\t只需要在文本前加入 > 这种尖括号（大于号）即可\n\n\n<!-- more -->\n##\t图片与链接\n\n-\t插入链接与插入图片的语法很像，区别在一个 !号\n\n```\n图片为：![](){ImgCap}{/ImgCap}\n\n链接为：[]()\n```\n\n##\t粗体与斜体\n\n-\tMarkdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。\n\n\n\n## 表格\n\n-\t表格是我觉得 Markdown 比较累人的地方，例子如下：\n\n```\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n```\n这种语法生成的表格如下：\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\n\n\n##\t代码框\n\n如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单，只需要用两个 ` 把中间的代码包裹起来。图例：\n\n\n使用 tab 键即可缩进。\n\n##\t分割线\n\n分割线的语法只需要三个 * 号，例如：\n\n到这里，Markdown 的基本语法在日常的使用中基本就没什么大问题了，只要多加练习，配合好用的工具，写起东西来肯定会行云流水。更多的语法规则，其实 Mou 的 Help 文档栗子很好，当你第一次使用 Mou 时，就会显示该文档。可以用来对用的查找和学习。\n\n##\t相关推荐:\n\n工具\n\n图床工具用来上传图片获取 URL 地址\n\nDroplr\nCloudapp\nezShare for Mac\n围脖图床修复计划\n在线好用的Markdown工具，为印象笔记而生\n\n马克飞象，专为印象笔记打造的Markdown编辑器，非常推荐\n相关文章阅读：\n\n为什么作家应该用 Markdown 保存自己的文稿","slug":"markdown基本语法","published":1,"updated":"2018-01-31T12:39:09.843Z","_id":"cjd30vwad0015581icy1hrqet","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><ul>\n<li>标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 一级标题</span><br><span class=\"line\"></span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\"></span><br><span class=\"line\">### 三级标题</span><br></pre></td></tr></table></figure>\n<p>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。</p>\n<ul>\n<li>在Markdown当中设置标题，还有第二种方式：<br>通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。</li>\n</ul>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p>熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加1. 2. 3. 符号要和文字之间加上一个字符的空格。</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><ul>\n<li><p>如果你需要引用一小段别处的句子，那么就要用引用的格式。</p>\n</li>\n<li><p>只需要在文本前加入 &gt; 这种尖括号（大于号）即可</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h2><ul>\n<li>插入链接与插入图片的语法很像，区别在一个 !号</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">图片为：![]()&#123;ImgCap&#125;&#123;/ImgCap&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">链接为：[]()</span><br></pre></td></tr></table></figure>\n<h2 id=\"粗体与斜体\"><a href=\"#粗体与斜体\" class=\"headerlink\" title=\"粗体与斜体\"></a>粗体与斜体</h2><ul>\n<li>Markdown 的粗体和斜体也非常简单，用两个 <em> 包含一段文本就是粗体的语法，用一个 </em> 包含一段文本就是斜体的语法。</li>\n</ul>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><ul>\n<li>表格是我觉得 Markdown 比较累人的地方，例子如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Tables        | Are           | Cool  |</span><br><span class=\"line\">| ------------- |:-------------:| -----:|</span><br><span class=\"line\">| col 3 is      | right-aligned | $1600 |</span><br><span class=\"line\">| col 2 is      | centered      |   $12 |</span><br><span class=\"line\">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure>\n<p>这种语法生成的表格如下：<br>| Tables        | Are           | Cool  |<br>| ————- |:————-:| —–:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |</p>\n<h2 id=\"代码框\"><a href=\"#代码框\" class=\"headerlink\" title=\"代码框\"></a>代码框</h2><p>如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单，只需要用两个 ` 把中间的代码包裹起来。图例：</p>\n<p>使用 tab 键即可缩进。</p>\n<h2 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h2><p>分割线的语法只需要三个 * 号，例如：</p>\n<p>到这里，Markdown 的基本语法在日常的使用中基本就没什么大问题了，只要多加练习，配合好用的工具，写起东西来肯定会行云流水。更多的语法规则，其实 Mou 的 Help 文档栗子很好，当你第一次使用 Mou 时，就会显示该文档。可以用来对用的查找和学习。</p>\n<h2 id=\"相关推荐\"><a href=\"#相关推荐\" class=\"headerlink\" title=\"相关推荐:\"></a>相关推荐:</h2><p>工具</p>\n<p>图床工具用来上传图片获取 URL 地址</p>\n<p>Droplr<br>Cloudapp<br>ezShare for Mac<br>围脖图床修复计划<br>在线好用的Markdown工具，为印象笔记而生</p>\n<p>马克飞象，专为印象笔记打造的Markdown编辑器，非常推荐<br>相关文章阅读：</p>\n<p>为什么作家应该用 Markdown 保存自己的文稿</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><ul>\n<li>标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 一级标题</span><br><span class=\"line\"></span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\"></span><br><span class=\"line\">### 三级标题</span><br></pre></td></tr></table></figure>\n<p>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。</p>\n<ul>\n<li>在Markdown当中设置标题，还有第二种方式：<br>通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。</li>\n</ul>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p>熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加1. 2. 3. 符号要和文字之间加上一个字符的空格。</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><ul>\n<li><p>如果你需要引用一小段别处的句子，那么就要用引用的格式。</p>\n</li>\n<li><p>只需要在文本前加入 &gt; 这种尖括号（大于号）即可</p>\n</li>\n</ul>","more":"<h2 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h2><ul>\n<li>插入链接与插入图片的语法很像，区别在一个 !号</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">图片为：![]()&#123;ImgCap&#125;&#123;/ImgCap&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">链接为：[]()</span><br></pre></td></tr></table></figure>\n<h2 id=\"粗体与斜体\"><a href=\"#粗体与斜体\" class=\"headerlink\" title=\"粗体与斜体\"></a>粗体与斜体</h2><ul>\n<li>Markdown 的粗体和斜体也非常简单，用两个 <em> 包含一段文本就是粗体的语法，用一个 </em> 包含一段文本就是斜体的语法。</li>\n</ul>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><ul>\n<li>表格是我觉得 Markdown 比较累人的地方，例子如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Tables        | Are           | Cool  |</span><br><span class=\"line\">| ------------- |:-------------:| -----:|</span><br><span class=\"line\">| col 3 is      | right-aligned | $1600 |</span><br><span class=\"line\">| col 2 is      | centered      |   $12 |</span><br><span class=\"line\">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure>\n<p>这种语法生成的表格如下：<br>| Tables        | Are           | Cool  |<br>| ————- |:————-:| —–:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |</p>\n<h2 id=\"代码框\"><a href=\"#代码框\" class=\"headerlink\" title=\"代码框\"></a>代码框</h2><p>如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单，只需要用两个 ` 把中间的代码包裹起来。图例：</p>\n<p>使用 tab 键即可缩进。</p>\n<h2 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h2><p>分割线的语法只需要三个 * 号，例如：</p>\n<p>到这里，Markdown 的基本语法在日常的使用中基本就没什么大问题了，只要多加练习，配合好用的工具，写起东西来肯定会行云流水。更多的语法规则，其实 Mou 的 Help 文档栗子很好，当你第一次使用 Mou 时，就会显示该文档。可以用来对用的查找和学习。</p>\n<h2 id=\"相关推荐\"><a href=\"#相关推荐\" class=\"headerlink\" title=\"相关推荐:\"></a>相关推荐:</h2><p>工具</p>\n<p>图床工具用来上传图片获取 URL 地址</p>\n<p>Droplr<br>Cloudapp<br>ezShare for Mac<br>围脖图床修复计划<br>在线好用的Markdown工具，为印象笔记而生</p>\n<p>马克飞象，专为印象笔记打造的Markdown编辑器，非常推荐<br>相关文章阅读：</p>\n<p>为什么作家应该用 Markdown 保存自己的文稿</p>"},{"title":"ubuntu常用软件部署","date":"2017-04-02T09:46:19.000Z","_content":"\n#   ubuntu中快速安装nodejs\n\n##  1.  我们可以直接通过`apt-get`安装nodejs\n\n```\nsudo apt-get update //需要先刷新本地索引包\nsudo apt-get install nodejs //然后安装nodejs包\nsudo apt-get install npm    //安装npm包管理器\n```\n\n##  2. 安装好的node版本较低，我们可以使用n模块升级node到你需要打版本\n\n####    1.  node有一个 n模块，专门用来管理nodejs版本的。不过目前并不支持windows系统。我们先安装下\n\n```\nnpm install -g n\n```\n\n####    2.  升级到制定版本，我们可以在n加上指定的版本号就可以\n\n```\nsudo n 6.10.2\n```\n\n<!-- more -->\n####    3.  还有一些常用打快捷方法\n\n```\nsudo n latest   //安装最新打官方版本\nsudo n stanle   //安装最新打稳定版\nsudo n lts      //安装最新打lts官方版\n```\n\n####    4.  删除版本\n\n```\nsudo n rm 0.9.4\nsudo n -0.9.4\n```\n\n-   更多命令，我们可以使用`n --help`寻求帮助\n\n#   ubuntu常用工具安装\n\n##  右上角任务栏显示cpu内存使用百分比，还可以显示网络传输速率\n\n```\nsudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor   //这里选择按enter键\nsudo apt-get update\nsudo apt-get install indicator-sysmonitor\n//启动\nindicator-sysmonitor &\n//ctrl+c后台运行该程序\n```\n\n- 启动之后，最好让程序开机自启动，鼠标右键点击标题栏上图标，弹出菜单，把`run on startup`后边打勾打上，然后进去advanced选项卡，就可以自定义配置需要显示在任务栏的项目啦\n\n\n##  安装git\n\n```\nsudo apt-get install git\ngit config --global user.name \"name\"\ngit config --global user.email \"your@email.com\"\n```\n\n##  安装编译工具\n\n```\nsudo apt-get install build-essential\n```\n\n##  安装yarn包管理工具\n```\nsudo npm install -g yarn\n```\n\n##  安装cnpm镜像源\n\n>   下载包直接可以使用 `cnpm install name` 下载\n\n```\nsudo npm install -g cnpm\n```\n\n##  安装nrm，node下载数据源管理器\n```\nsudo npm install -g nrm\nnrm -v //查看安装版本验证是否安装成功\n```\n####    可以查看当前所有的下载数据源链接\n```\nnrm ls \n```\n####    测试所有打镜像源的响应速度，然后根据测试我们可以切换我们需要使用的下载源\n```\nnrm test\nnrm use [taobao]\n```\n\n# github使用ssh\n\n>   我们使用git去github上传东西，一般都使用ssh免密方式，所以需要首先生成一枚ssh-key密钥，然后在home文件夹进入个人文件夹中，按ctrl+h，会显示所有隐藏文件，打开.ssh文件夹中的id_rsa.pub文件，把里边内容粘贴到github上就可以啦\n\n\n```\nssh-keygen -t rsa -b 4096 -C \"wangpansheng@qq.com\" \n```\n\n","source":"_posts/ubuntu常用软件部署.md","raw":"---\ntitle: ubuntu常用软件部署\ntags: [linux,ubuntu ]\ndate: 2017-04-02 17:46:19\n---\n\n#   ubuntu中快速安装nodejs\n\n##  1.  我们可以直接通过`apt-get`安装nodejs\n\n```\nsudo apt-get update //需要先刷新本地索引包\nsudo apt-get install nodejs //然后安装nodejs包\nsudo apt-get install npm    //安装npm包管理器\n```\n\n##  2. 安装好的node版本较低，我们可以使用n模块升级node到你需要打版本\n\n####    1.  node有一个 n模块，专门用来管理nodejs版本的。不过目前并不支持windows系统。我们先安装下\n\n```\nnpm install -g n\n```\n\n####    2.  升级到制定版本，我们可以在n加上指定的版本号就可以\n\n```\nsudo n 6.10.2\n```\n\n<!-- more -->\n####    3.  还有一些常用打快捷方法\n\n```\nsudo n latest   //安装最新打官方版本\nsudo n stanle   //安装最新打稳定版\nsudo n lts      //安装最新打lts官方版\n```\n\n####    4.  删除版本\n\n```\nsudo n rm 0.9.4\nsudo n -0.9.4\n```\n\n-   更多命令，我们可以使用`n --help`寻求帮助\n\n#   ubuntu常用工具安装\n\n##  右上角任务栏显示cpu内存使用百分比，还可以显示网络传输速率\n\n```\nsudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor   //这里选择按enter键\nsudo apt-get update\nsudo apt-get install indicator-sysmonitor\n//启动\nindicator-sysmonitor &\n//ctrl+c后台运行该程序\n```\n\n- 启动之后，最好让程序开机自启动，鼠标右键点击标题栏上图标，弹出菜单，把`run on startup`后边打勾打上，然后进去advanced选项卡，就可以自定义配置需要显示在任务栏的项目啦\n\n\n##  安装git\n\n```\nsudo apt-get install git\ngit config --global user.name \"name\"\ngit config --global user.email \"your@email.com\"\n```\n\n##  安装编译工具\n\n```\nsudo apt-get install build-essential\n```\n\n##  安装yarn包管理工具\n```\nsudo npm install -g yarn\n```\n\n##  安装cnpm镜像源\n\n>   下载包直接可以使用 `cnpm install name` 下载\n\n```\nsudo npm install -g cnpm\n```\n\n##  安装nrm，node下载数据源管理器\n```\nsudo npm install -g nrm\nnrm -v //查看安装版本验证是否安装成功\n```\n####    可以查看当前所有的下载数据源链接\n```\nnrm ls \n```\n####    测试所有打镜像源的响应速度，然后根据测试我们可以切换我们需要使用的下载源\n```\nnrm test\nnrm use [taobao]\n```\n\n# github使用ssh\n\n>   我们使用git去github上传东西，一般都使用ssh免密方式，所以需要首先生成一枚ssh-key密钥，然后在home文件夹进入个人文件夹中，按ctrl+h，会显示所有隐藏文件，打开.ssh文件夹中的id_rsa.pub文件，把里边内容粘贴到github上就可以啦\n\n\n```\nssh-keygen -t rsa -b 4096 -C \"wangpansheng@qq.com\" \n```\n\n","slug":"ubuntu常用软件部署","published":1,"updated":"2018-01-31T12:39:09.828Z","_id":"cjd30vwat0018581i370yaext","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"ubuntu中快速安装nodejs\"><a href=\"#ubuntu中快速安装nodejs\" class=\"headerlink\" title=\"ubuntu中快速安装nodejs\"></a>ubuntu中快速安装nodejs</h1><h2 id=\"1-我们可以直接通过apt-get安装nodejs\"><a href=\"#1-我们可以直接通过apt-get安装nodejs\" class=\"headerlink\" title=\"1.  我们可以直接通过apt-get安装nodejs\"></a>1.  我们可以直接通过<code>apt-get</code>安装nodejs</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update //需要先刷新本地索引包</span><br><span class=\"line\">sudo apt-get install nodejs //然后安装nodejs包</span><br><span class=\"line\">sudo apt-get install npm    //安装npm包管理器</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-安装好的node版本较低，我们可以使用n模块升级node到你需要打版本\"><a href=\"#2-安装好的node版本较低，我们可以使用n模块升级node到你需要打版本\" class=\"headerlink\" title=\"2. 安装好的node版本较低，我们可以使用n模块升级node到你需要打版本\"></a>2. 安装好的node版本较低，我们可以使用n模块升级node到你需要打版本</h2><h4 id=\"1-node有一个-n模块，专门用来管理nodejs版本的。不过目前并不支持windows系统。我们先安装下\"><a href=\"#1-node有一个-n模块，专门用来管理nodejs版本的。不过目前并不支持windows系统。我们先安装下\" class=\"headerlink\" title=\"1.  node有一个 n模块，专门用来管理nodejs版本的。不过目前并不支持windows系统。我们先安装下\"></a>1.  node有一个 n模块，专门用来管理nodejs版本的。不过目前并不支持windows系统。我们先安装下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g n</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-升级到制定版本，我们可以在n加上指定的版本号就可以\"><a href=\"#2-升级到制定版本，我们可以在n加上指定的版本号就可以\" class=\"headerlink\" title=\"2.  升级到制定版本，我们可以在n加上指定的版本号就可以\"></a>2.  升级到制定版本，我们可以在n加上指定的版本号就可以</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo n 6.10.2</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"3-还有一些常用打快捷方法\"><a href=\"#3-还有一些常用打快捷方法\" class=\"headerlink\" title=\"3.  还有一些常用打快捷方法\"></a>3.  还有一些常用打快捷方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo n latest   //安装最新打官方版本</span><br><span class=\"line\">sudo n stanle   //安装最新打稳定版</span><br><span class=\"line\">sudo n lts      //安装最新打lts官方版</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-删除版本\"><a href=\"#4-删除版本\" class=\"headerlink\" title=\"4.  删除版本\"></a>4.  删除版本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo n rm 0.9.4</span><br><span class=\"line\">sudo n -0.9.4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>更多命令，我们可以使用<code>n --help</code>寻求帮助</li>\n</ul>\n<h1 id=\"ubuntu常用工具安装\"><a href=\"#ubuntu常用工具安装\" class=\"headerlink\" title=\"ubuntu常用工具安装\"></a>ubuntu常用工具安装</h1><h2 id=\"右上角任务栏显示cpu内存使用百分比，还可以显示网络传输速率\"><a href=\"#右上角任务栏显示cpu内存使用百分比，还可以显示网络传输速率\" class=\"headerlink\" title=\"右上角任务栏显示cpu内存使用百分比，还可以显示网络传输速率\"></a>右上角任务栏显示cpu内存使用百分比，还可以显示网络传输速率</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor   //这里选择按enter键</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install indicator-sysmonitor</span><br><span class=\"line\">//启动</span><br><span class=\"line\">indicator-sysmonitor &amp;</span><br><span class=\"line\">//ctrl+c后台运行该程序</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动之后，最好让程序开机自启动，鼠标右键点击标题栏上图标，弹出菜单，把<code>run on startup</code>后边打勾打上，然后进去advanced选项卡，就可以自定义配置需要显示在任务栏的项目啦</li>\n</ul>\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\">git config --global user.name &quot;name&quot;</span><br><span class=\"line\">git config --global user.email &quot;your@email.com&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装编译工具\"><a href=\"#安装编译工具\" class=\"headerlink\" title=\"安装编译工具\"></a>安装编译工具</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装yarn包管理工具\"><a href=\"#安装yarn包管理工具\" class=\"headerlink\" title=\"安装yarn包管理工具\"></a>安装yarn包管理工具</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g yarn</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装cnpm镜像源\"><a href=\"#安装cnpm镜像源\" class=\"headerlink\" title=\"安装cnpm镜像源\"></a>安装cnpm镜像源</h2><blockquote>\n<p>  下载包直接可以使用 <code>cnpm install name</code> 下载</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g cnpm</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装nrm，node下载数据源管理器\"><a href=\"#安装nrm，node下载数据源管理器\" class=\"headerlink\" title=\"安装nrm，node下载数据源管理器\"></a>安装nrm，node下载数据源管理器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g nrm</span><br><span class=\"line\">nrm -v //查看安装版本验证是否安装成功</span><br></pre></td></tr></table></figure>\n<h4 id=\"可以查看当前所有的下载数据源链接\"><a href=\"#可以查看当前所有的下载数据源链接\" class=\"headerlink\" title=\"可以查看当前所有的下载数据源链接\"></a>可以查看当前所有的下载数据源链接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试所有打镜像源的响应速度，然后根据测试我们可以切换我们需要使用的下载源\"><a href=\"#测试所有打镜像源的响应速度，然后根据测试我们可以切换我们需要使用的下载源\" class=\"headerlink\" title=\"测试所有打镜像源的响应速度，然后根据测试我们可以切换我们需要使用的下载源\"></a>测试所有打镜像源的响应速度，然后根据测试我们可以切换我们需要使用的下载源</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm test</span><br><span class=\"line\">nrm use [taobao]</span><br></pre></td></tr></table></figure>\n<h1 id=\"github使用ssh\"><a href=\"#github使用ssh\" class=\"headerlink\" title=\"github使用ssh\"></a>github使用ssh</h1><blockquote>\n<p>  我们使用git去github上传东西，一般都使用ssh免密方式，所以需要首先生成一枚ssh-key密钥，然后在home文件夹进入个人文件夹中，按ctrl+h，会显示所有隐藏文件，打开.ssh文件夹中的id_rsa.pub文件，把里边内容粘贴到github上就可以啦</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -b 4096 -C &quot;wangpansheng@qq.com&quot;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"ubuntu中快速安装nodejs\"><a href=\"#ubuntu中快速安装nodejs\" class=\"headerlink\" title=\"ubuntu中快速安装nodejs\"></a>ubuntu中快速安装nodejs</h1><h2 id=\"1-我们可以直接通过apt-get安装nodejs\"><a href=\"#1-我们可以直接通过apt-get安装nodejs\" class=\"headerlink\" title=\"1.  我们可以直接通过apt-get安装nodejs\"></a>1.  我们可以直接通过<code>apt-get</code>安装nodejs</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update //需要先刷新本地索引包</span><br><span class=\"line\">sudo apt-get install nodejs //然后安装nodejs包</span><br><span class=\"line\">sudo apt-get install npm    //安装npm包管理器</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-安装好的node版本较低，我们可以使用n模块升级node到你需要打版本\"><a href=\"#2-安装好的node版本较低，我们可以使用n模块升级node到你需要打版本\" class=\"headerlink\" title=\"2. 安装好的node版本较低，我们可以使用n模块升级node到你需要打版本\"></a>2. 安装好的node版本较低，我们可以使用n模块升级node到你需要打版本</h2><h4 id=\"1-node有一个-n模块，专门用来管理nodejs版本的。不过目前并不支持windows系统。我们先安装下\"><a href=\"#1-node有一个-n模块，专门用来管理nodejs版本的。不过目前并不支持windows系统。我们先安装下\" class=\"headerlink\" title=\"1.  node有一个 n模块，专门用来管理nodejs版本的。不过目前并不支持windows系统。我们先安装下\"></a>1.  node有一个 n模块，专门用来管理nodejs版本的。不过目前并不支持windows系统。我们先安装下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g n</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-升级到制定版本，我们可以在n加上指定的版本号就可以\"><a href=\"#2-升级到制定版本，我们可以在n加上指定的版本号就可以\" class=\"headerlink\" title=\"2.  升级到制定版本，我们可以在n加上指定的版本号就可以\"></a>2.  升级到制定版本，我们可以在n加上指定的版本号就可以</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo n 6.10.2</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"3-还有一些常用打快捷方法\"><a href=\"#3-还有一些常用打快捷方法\" class=\"headerlink\" title=\"3.  还有一些常用打快捷方法\"></a>3.  还有一些常用打快捷方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo n latest   //安装最新打官方版本</span><br><span class=\"line\">sudo n stanle   //安装最新打稳定版</span><br><span class=\"line\">sudo n lts      //安装最新打lts官方版</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-删除版本\"><a href=\"#4-删除版本\" class=\"headerlink\" title=\"4.  删除版本\"></a>4.  删除版本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo n rm 0.9.4</span><br><span class=\"line\">sudo n -0.9.4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>更多命令，我们可以使用<code>n --help</code>寻求帮助</li>\n</ul>\n<h1 id=\"ubuntu常用工具安装\"><a href=\"#ubuntu常用工具安装\" class=\"headerlink\" title=\"ubuntu常用工具安装\"></a>ubuntu常用工具安装</h1><h2 id=\"右上角任务栏显示cpu内存使用百分比，还可以显示网络传输速率\"><a href=\"#右上角任务栏显示cpu内存使用百分比，还可以显示网络传输速率\" class=\"headerlink\" title=\"右上角任务栏显示cpu内存使用百分比，还可以显示网络传输速率\"></a>右上角任务栏显示cpu内存使用百分比，还可以显示网络传输速率</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor   //这里选择按enter键</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install indicator-sysmonitor</span><br><span class=\"line\">//启动</span><br><span class=\"line\">indicator-sysmonitor &amp;</span><br><span class=\"line\">//ctrl+c后台运行该程序</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动之后，最好让程序开机自启动，鼠标右键点击标题栏上图标，弹出菜单，把<code>run on startup</code>后边打勾打上，然后进去advanced选项卡，就可以自定义配置需要显示在任务栏的项目啦</li>\n</ul>\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\">git config --global user.name &quot;name&quot;</span><br><span class=\"line\">git config --global user.email &quot;your@email.com&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装编译工具\"><a href=\"#安装编译工具\" class=\"headerlink\" title=\"安装编译工具\"></a>安装编译工具</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装yarn包管理工具\"><a href=\"#安装yarn包管理工具\" class=\"headerlink\" title=\"安装yarn包管理工具\"></a>安装yarn包管理工具</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g yarn</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装cnpm镜像源\"><a href=\"#安装cnpm镜像源\" class=\"headerlink\" title=\"安装cnpm镜像源\"></a>安装cnpm镜像源</h2><blockquote>\n<p>  下载包直接可以使用 <code>cnpm install name</code> 下载</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g cnpm</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装nrm，node下载数据源管理器\"><a href=\"#安装nrm，node下载数据源管理器\" class=\"headerlink\" title=\"安装nrm，node下载数据源管理器\"></a>安装nrm，node下载数据源管理器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g nrm</span><br><span class=\"line\">nrm -v //查看安装版本验证是否安装成功</span><br></pre></td></tr></table></figure>\n<h4 id=\"可以查看当前所有的下载数据源链接\"><a href=\"#可以查看当前所有的下载数据源链接\" class=\"headerlink\" title=\"可以查看当前所有的下载数据源链接\"></a>可以查看当前所有的下载数据源链接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试所有打镜像源的响应速度，然后根据测试我们可以切换我们需要使用的下载源\"><a href=\"#测试所有打镜像源的响应速度，然后根据测试我们可以切换我们需要使用的下载源\" class=\"headerlink\" title=\"测试所有打镜像源的响应速度，然后根据测试我们可以切换我们需要使用的下载源\"></a>测试所有打镜像源的响应速度，然后根据测试我们可以切换我们需要使用的下载源</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm test</span><br><span class=\"line\">nrm use [taobao]</span><br></pre></td></tr></table></figure>\n<h1 id=\"github使用ssh\"><a href=\"#github使用ssh\" class=\"headerlink\" title=\"github使用ssh\"></a>github使用ssh</h1><blockquote>\n<p>  我们使用git去github上传东西，一般都使用ssh免密方式，所以需要首先生成一枚ssh-key密钥，然后在home文件夹进入个人文件夹中，按ctrl+h，会显示所有隐藏文件，打开.ssh文件夹中的id_rsa.pub文件，把里边内容粘贴到github上就可以啦</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -b 4096 -C &quot;wangpansheng@qq.com&quot;</span><br></pre></td></tr></table></figure>"},{"title":"ubuntu常见问题处理","date":"2017-04-02T09:46:19.000Z","_content":" \n\n\n##  常见问题处理\n\n### 1.  win10和ubuntu双系统时，硬盘无法加载问题\n\n- 需要依赖于ntfs-3g，如果没有需要先安装这个\n```\nsudo apt-get install ntfs-3g\n```\n- 然后只用ntfsfix修复，即可\n```\n  sudo ntfsfix /绝对路径\n```\n\n<!-- more -->\n\n##  常用软件推荐\n\n### 1.   图片处理:GIMP\n- 对于非专业性的图片处理，该款APP已经十分足够了，功能也挺丰富、强大的。\n\n### 2.  视频播放：VLC\n\n- 能够播放rmvb、mp4、avi等多种格式的视频文件，支持快速播放等功能。\n- 安装\n```\n$ sudo add-apt-repository ppa:videolan/stable-daily\n$ sudo apt-get update\n$ sudo apt-get install vlc\n```\n\n### 3.  启动栏：Docky\n- ndicator-sysmonitor 这是一款能够实时查看当前系统的CPU、内存、网络、IP等信息\n","source":"_posts/ubuntu常见问题.md","raw":"---\ntitle: ubuntu常见问题处理\ntags: [linux,ubuntu ]\ndate: 2017-04-02 17:46:19\n---\n \n\n\n##  常见问题处理\n\n### 1.  win10和ubuntu双系统时，硬盘无法加载问题\n\n- 需要依赖于ntfs-3g，如果没有需要先安装这个\n```\nsudo apt-get install ntfs-3g\n```\n- 然后只用ntfsfix修复，即可\n```\n  sudo ntfsfix /绝对路径\n```\n\n<!-- more -->\n\n##  常用软件推荐\n\n### 1.   图片处理:GIMP\n- 对于非专业性的图片处理，该款APP已经十分足够了，功能也挺丰富、强大的。\n\n### 2.  视频播放：VLC\n\n- 能够播放rmvb、mp4、avi等多种格式的视频文件，支持快速播放等功能。\n- 安装\n```\n$ sudo add-apt-repository ppa:videolan/stable-daily\n$ sudo apt-get update\n$ sudo apt-get install vlc\n```\n\n### 3.  启动栏：Docky\n- ndicator-sysmonitor 这是一款能够实时查看当前系统的CPU、内存、网络、IP等信息\n","slug":"ubuntu常见问题","published":1,"updated":"2018-01-31T12:42:33.003Z","_id":"cjd30vwcl001a581ig75b3jpj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"常见问题处理\"><a href=\"#常见问题处理\" class=\"headerlink\" title=\"常见问题处理\"></a>常见问题处理</h2><h3 id=\"1-win10和ubuntu双系统时，硬盘无法加载问题\"><a href=\"#1-win10和ubuntu双系统时，硬盘无法加载问题\" class=\"headerlink\" title=\"1.  win10和ubuntu双系统时，硬盘无法加载问题\"></a>1.  win10和ubuntu双系统时，硬盘无法加载问题</h3><ul>\n<li><p>需要依赖于ntfs-3g，如果没有需要先安装这个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ntfs-3g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后只用ntfsfix修复，即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ntfsfix /绝对路径</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"常用软件推荐\"><a href=\"#常用软件推荐\" class=\"headerlink\" title=\"常用软件推荐\"></a>常用软件推荐</h2><h3 id=\"1-图片处理-GIMP\"><a href=\"#1-图片处理-GIMP\" class=\"headerlink\" title=\"1.   图片处理:GIMP\"></a>1.   图片处理:GIMP</h3><ul>\n<li>对于非专业性的图片处理，该款APP已经十分足够了，功能也挺丰富、强大的。</li>\n</ul>\n<h3 id=\"2-视频播放：VLC\"><a href=\"#2-视频播放：VLC\" class=\"headerlink\" title=\"2.  视频播放：VLC\"></a>2.  视频播放：VLC</h3><ul>\n<li>能够播放rmvb、mp4、avi等多种格式的视频文件，支持快速播放等功能。</li>\n<li>安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo add-apt-repository ppa:videolan/stable-daily</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install vlc</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-启动栏：Docky\"><a href=\"#3-启动栏：Docky\" class=\"headerlink\" title=\"3.  启动栏：Docky\"></a>3.  启动栏：Docky</h3><ul>\n<li>ndicator-sysmonitor 这是一款能够实时查看当前系统的CPU、内存、网络、IP等信息</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"常见问题处理\"><a href=\"#常见问题处理\" class=\"headerlink\" title=\"常见问题处理\"></a>常见问题处理</h2><h3 id=\"1-win10和ubuntu双系统时，硬盘无法加载问题\"><a href=\"#1-win10和ubuntu双系统时，硬盘无法加载问题\" class=\"headerlink\" title=\"1.  win10和ubuntu双系统时，硬盘无法加载问题\"></a>1.  win10和ubuntu双系统时，硬盘无法加载问题</h3><ul>\n<li><p>需要依赖于ntfs-3g，如果没有需要先安装这个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ntfs-3g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后只用ntfsfix修复，即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ntfsfix /绝对路径</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<h2 id=\"常用软件推荐\"><a href=\"#常用软件推荐\" class=\"headerlink\" title=\"常用软件推荐\"></a>常用软件推荐</h2><h3 id=\"1-图片处理-GIMP\"><a href=\"#1-图片处理-GIMP\" class=\"headerlink\" title=\"1.   图片处理:GIMP\"></a>1.   图片处理:GIMP</h3><ul>\n<li>对于非专业性的图片处理，该款APP已经十分足够了，功能也挺丰富、强大的。</li>\n</ul>\n<h3 id=\"2-视频播放：VLC\"><a href=\"#2-视频播放：VLC\" class=\"headerlink\" title=\"2.  视频播放：VLC\"></a>2.  视频播放：VLC</h3><ul>\n<li>能够播放rmvb、mp4、avi等多种格式的视频文件，支持快速播放等功能。</li>\n<li>安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo add-apt-repository ppa:videolan/stable-daily</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install vlc</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-启动栏：Docky\"><a href=\"#3-启动栏：Docky\" class=\"headerlink\" title=\"3.  启动栏：Docky\"></a>3.  启动栏：Docky</h3><ul>\n<li>ndicator-sysmonitor 这是一款能够实时查看当前系统的CPU、内存、网络、IP等信息</li>\n</ul>"},{"title":"git应用之认识bash","date":"2016-05-13T01:22:24.000Z","_content":"\n## 什么是shell\n\nShell俗称壳，是指\"提供使用者使用界面\"的软件，接收用户命令，然后调用相应的应用程序。\n\n### shell分类\n\n\n####\t图形化shell\n\n通过友好的可视化界面，调用相应应用程序，如windows系类操作系统，类Unix，Linux系统上的图形化应用程序Gnome，Kde等。\n\n####\t命令行shell\n\n通过输入特定命令调用相应的应用程序。如window系统的cmd，Windows PowerShell；Linux系统的bash。\n\n### 认识bash\n\n* 在window下使用bash，需要一个软件，这个软件模拟集成了bash大部分命令，\n\n* 各个shell的功能都差不多，linux默认使用bash，所以主要学习bash。\n\n#### bash常用命令\n\n* pwd(Print Working Directory) 查看当前目录;\n\n* cd(Change Directory) 切换目录，如cd etc,cd ..返回上一层目录;\n\n* ls(List) 查看当前目录下内容，如ls-al;\n* ls -l 以列表形式产看当前目录内容\n\n<!-- more -->\n* mkdir(Make Directory) 创建目录，可以指定路径创建目录，如mkdir blog;\n\n* touch\t创建文件，\n\n* cat 查看文件全部内容，cat ./路径/文件名\n\n* more(unix支持) less(linux支持) 分页查看文件，空格翻页，q退出。\n\n* rm(remove) 删除文件，如rm 文件名\n* rm -rf 强制删除目录内所有文件，-r(recursion)是递归删除，-f强制删除\n\n* rmdir(Remove Directory)   删除文件夹，只能删除空文件夹\n\n* mv(move) 移动文件或重命名,mv index.html ./00/00/index.html\n\n* cp(copy) 复制文件 \n\n* head\t查看文件前几行，如 head -g index.html\n\n* tail\t查看文件后几行， -n-f,\n\n* tab\t自动补全，连续按两次会将所有匹配内容显示出来\n\n* history\t查看操作历史\n\n* ssh\t远程免密码登录，如ssh root@gitlab.study.com\n\n* > 和 >>\t重定向，>覆盖，>>追加，如cat index.html > log.txt;\n\n* clear 清空当前窗口\n\n* curl\t网络请求，\n\n* whoami\t查看当前用户\n\n* 以下在winodw集成环境不支持\n\n* weget\t下载\n\n* tar\t解压缩\n\n* 管道符可以将多个命令来连接在一起，上一次命令的执行结果当成下一次命令的参数。\n* grep\t匹配内容，一般结合管道符使用。","source":"_posts/git快速入门之bash.md","raw":"---\ntitle: git应用之认识bash\ndate: 2016-05-13 09:22:24\ntags: [git,shell,bash]\n---\n\n## 什么是shell\n\nShell俗称壳，是指\"提供使用者使用界面\"的软件，接收用户命令，然后调用相应的应用程序。\n\n### shell分类\n\n\n####\t图形化shell\n\n通过友好的可视化界面，调用相应应用程序，如windows系类操作系统，类Unix，Linux系统上的图形化应用程序Gnome，Kde等。\n\n####\t命令行shell\n\n通过输入特定命令调用相应的应用程序。如window系统的cmd，Windows PowerShell；Linux系统的bash。\n\n### 认识bash\n\n* 在window下使用bash，需要一个软件，这个软件模拟集成了bash大部分命令，\n\n* 各个shell的功能都差不多，linux默认使用bash，所以主要学习bash。\n\n#### bash常用命令\n\n* pwd(Print Working Directory) 查看当前目录;\n\n* cd(Change Directory) 切换目录，如cd etc,cd ..返回上一层目录;\n\n* ls(List) 查看当前目录下内容，如ls-al;\n* ls -l 以列表形式产看当前目录内容\n\n<!-- more -->\n* mkdir(Make Directory) 创建目录，可以指定路径创建目录，如mkdir blog;\n\n* touch\t创建文件，\n\n* cat 查看文件全部内容，cat ./路径/文件名\n\n* more(unix支持) less(linux支持) 分页查看文件，空格翻页，q退出。\n\n* rm(remove) 删除文件，如rm 文件名\n* rm -rf 强制删除目录内所有文件，-r(recursion)是递归删除，-f强制删除\n\n* rmdir(Remove Directory)   删除文件夹，只能删除空文件夹\n\n* mv(move) 移动文件或重命名,mv index.html ./00/00/index.html\n\n* cp(copy) 复制文件 \n\n* head\t查看文件前几行，如 head -g index.html\n\n* tail\t查看文件后几行， -n-f,\n\n* tab\t自动补全，连续按两次会将所有匹配内容显示出来\n\n* history\t查看操作历史\n\n* ssh\t远程免密码登录，如ssh root@gitlab.study.com\n\n* > 和 >>\t重定向，>覆盖，>>追加，如cat index.html > log.txt;\n\n* clear 清空当前窗口\n\n* curl\t网络请求，\n\n* whoami\t查看当前用户\n\n* 以下在winodw集成环境不支持\n\n* weget\t下载\n\n* tar\t解压缩\n\n* 管道符可以将多个命令来连接在一起，上一次命令的执行结果当成下一次命令的参数。\n* grep\t匹配内容，一般结合管道符使用。","slug":"git快速入门之bash","published":1,"updated":"2018-01-31T12:39:09.823Z","_id":"cjd30vwct001c581ixejil3w0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是shell\"><a href=\"#什么是shell\" class=\"headerlink\" title=\"什么是shell\"></a>什么是shell</h2><p>Shell俗称壳，是指”提供使用者使用界面”的软件，接收用户命令，然后调用相应的应用程序。</p>\n<h3 id=\"shell分类\"><a href=\"#shell分类\" class=\"headerlink\" title=\"shell分类\"></a>shell分类</h3><h4 id=\"图形化shell\"><a href=\"#图形化shell\" class=\"headerlink\" title=\"图形化shell\"></a>图形化shell</h4><p>通过友好的可视化界面，调用相应应用程序，如windows系类操作系统，类Unix，Linux系统上的图形化应用程序Gnome，Kde等。</p>\n<h4 id=\"命令行shell\"><a href=\"#命令行shell\" class=\"headerlink\" title=\"命令行shell\"></a>命令行shell</h4><p>通过输入特定命令调用相应的应用程序。如window系统的cmd，Windows PowerShell；Linux系统的bash。</p>\n<h3 id=\"认识bash\"><a href=\"#认识bash\" class=\"headerlink\" title=\"认识bash\"></a>认识bash</h3><ul>\n<li><p>在window下使用bash，需要一个软件，这个软件模拟集成了bash大部分命令，</p>\n</li>\n<li><p>各个shell的功能都差不多，linux默认使用bash，所以主要学习bash。</p>\n</li>\n</ul>\n<h4 id=\"bash常用命令\"><a href=\"#bash常用命令\" class=\"headerlink\" title=\"bash常用命令\"></a>bash常用命令</h4><ul>\n<li><p>pwd(Print Working Directory) 查看当前目录;</p>\n</li>\n<li><p>cd(Change Directory) 切换目录，如cd etc,cd ..返回上一层目录;</p>\n</li>\n<li><p>ls(List) 查看当前目录下内容，如ls-al;</p>\n</li>\n<li>ls -l 以列表形式产看当前目录内容</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>mkdir(Make Directory) 创建目录，可以指定路径创建目录，如mkdir blog;</p>\n</li>\n<li><p>touch    创建文件，</p>\n</li>\n<li><p>cat 查看文件全部内容，cat ./路径/文件名</p>\n</li>\n<li><p>more(unix支持) less(linux支持) 分页查看文件，空格翻页，q退出。</p>\n</li>\n<li><p>rm(remove) 删除文件，如rm 文件名</p>\n</li>\n<li><p>rm -rf 强制删除目录内所有文件，-r(recursion)是递归删除，-f强制删除</p>\n</li>\n<li><p>rmdir(Remove Directory)   删除文件夹，只能删除空文件夹</p>\n</li>\n<li><p>mv(move) 移动文件或重命名,mv index.html ./00/00/index.html</p>\n</li>\n<li><p>cp(copy) 复制文件 </p>\n</li>\n<li><p>head    查看文件前几行，如 head -g index.html</p>\n</li>\n<li><p>tail    查看文件后几行， -n-f,</p>\n</li>\n<li><p>tab    自动补全，连续按两次会将所有匹配内容显示出来</p>\n</li>\n<li><p>history    查看操作历史</p>\n</li>\n<li><p>ssh    远程免密码登录，如ssh root@gitlab.study.com</p>\n</li>\n<li><blockquote>\n<p>和 &gt;&gt;    重定向，&gt;覆盖，&gt;&gt;追加，如cat index.html &gt; log.txt;</p>\n</blockquote>\n</li>\n<li><p>clear 清空当前窗口</p>\n</li>\n<li><p>curl    网络请求，</p>\n</li>\n<li><p>whoami    查看当前用户</p>\n</li>\n<li><p>以下在winodw集成环境不支持</p>\n</li>\n<li><p>weget    下载</p>\n</li>\n<li><p>tar    解压缩</p>\n</li>\n<li><p>管道符可以将多个命令来连接在一起，上一次命令的执行结果当成下一次命令的参数。</p>\n</li>\n<li>grep    匹配内容，一般结合管道符使用。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是shell\"><a href=\"#什么是shell\" class=\"headerlink\" title=\"什么是shell\"></a>什么是shell</h2><p>Shell俗称壳，是指”提供使用者使用界面”的软件，接收用户命令，然后调用相应的应用程序。</p>\n<h3 id=\"shell分类\"><a href=\"#shell分类\" class=\"headerlink\" title=\"shell分类\"></a>shell分类</h3><h4 id=\"图形化shell\"><a href=\"#图形化shell\" class=\"headerlink\" title=\"图形化shell\"></a>图形化shell</h4><p>通过友好的可视化界面，调用相应应用程序，如windows系类操作系统，类Unix，Linux系统上的图形化应用程序Gnome，Kde等。</p>\n<h4 id=\"命令行shell\"><a href=\"#命令行shell\" class=\"headerlink\" title=\"命令行shell\"></a>命令行shell</h4><p>通过输入特定命令调用相应的应用程序。如window系统的cmd，Windows PowerShell；Linux系统的bash。</p>\n<h3 id=\"认识bash\"><a href=\"#认识bash\" class=\"headerlink\" title=\"认识bash\"></a>认识bash</h3><ul>\n<li><p>在window下使用bash，需要一个软件，这个软件模拟集成了bash大部分命令，</p>\n</li>\n<li><p>各个shell的功能都差不多，linux默认使用bash，所以主要学习bash。</p>\n</li>\n</ul>\n<h4 id=\"bash常用命令\"><a href=\"#bash常用命令\" class=\"headerlink\" title=\"bash常用命令\"></a>bash常用命令</h4><ul>\n<li><p>pwd(Print Working Directory) 查看当前目录;</p>\n</li>\n<li><p>cd(Change Directory) 切换目录，如cd etc,cd ..返回上一层目录;</p>\n</li>\n<li><p>ls(List) 查看当前目录下内容，如ls-al;</p>\n</li>\n<li>ls -l 以列表形式产看当前目录内容</li>\n</ul>","more":"<ul>\n<li><p>mkdir(Make Directory) 创建目录，可以指定路径创建目录，如mkdir blog;</p>\n</li>\n<li><p>touch    创建文件，</p>\n</li>\n<li><p>cat 查看文件全部内容，cat ./路径/文件名</p>\n</li>\n<li><p>more(unix支持) less(linux支持) 分页查看文件，空格翻页，q退出。</p>\n</li>\n<li><p>rm(remove) 删除文件，如rm 文件名</p>\n</li>\n<li><p>rm -rf 强制删除目录内所有文件，-r(recursion)是递归删除，-f强制删除</p>\n</li>\n<li><p>rmdir(Remove Directory)   删除文件夹，只能删除空文件夹</p>\n</li>\n<li><p>mv(move) 移动文件或重命名,mv index.html ./00/00/index.html</p>\n</li>\n<li><p>cp(copy) 复制文件 </p>\n</li>\n<li><p>head    查看文件前几行，如 head -g index.html</p>\n</li>\n<li><p>tail    查看文件后几行， -n-f,</p>\n</li>\n<li><p>tab    自动补全，连续按两次会将所有匹配内容显示出来</p>\n</li>\n<li><p>history    查看操作历史</p>\n</li>\n<li><p>ssh    远程免密码登录，如ssh root@gitlab.study.com</p>\n</li>\n<li><blockquote>\n<p>和 &gt;&gt;    重定向，&gt;覆盖，&gt;&gt;追加，如cat index.html &gt; log.txt;</p>\n</blockquote>\n</li>\n<li><p>clear 清空当前窗口</p>\n</li>\n<li><p>curl    网络请求，</p>\n</li>\n<li><p>whoami    查看当前用户</p>\n</li>\n<li><p>以下在winodw集成环境不支持</p>\n</li>\n<li><p>weget    下载</p>\n</li>\n<li><p>tar    解压缩</p>\n</li>\n<li><p>管道符可以将多个命令来连接在一起，上一次命令的执行结果当成下一次命令的参数。</p>\n</li>\n<li>grep    匹配内容，一般结合管道符使用。</li>\n</ul>"},{"title":"关于js中的静态方法和实例方法","date":"2016-08-15T14:29:16.000Z","_content":"-\t最近有人问我关于什么静态方法和实例方法不是太清除，所以做一个整理。\n\n-\t什么是静态方法：\n>\t静态方法是指不需要声明类的实例就可以使用的方法。\n\n代码演示\n```js\nfunction foo () {};\n//在foo上直接添加静态方法\nfoo.say = function(){\n\tconsole.log(\"我是静态方法，不需要实例化，可以直接用函数调用!\");\n};\nfoo.say();//函数直接调用方法say，打印hello\n```\n \n-\t什么是实例方法\n>\t实例方法是指必须要先使用\"new\"关键字声明一个类的实例, 然后才可以通过此实例访问的方法。\n\n<!-- more -->\n代码演示：\n```js\nfunction Fn () {\n\tthis.say = function(){\n\t\tconsole.log(\"我是实例化之后才可以调用的方法！\")\n\t}\n}\nvar obj = new Fn();//需要首先实例化\nobj.say();//才可以调用\n```","source":"_posts/关于js中的静态方法和实例方法.md","raw":"---\ntitle: 关于js中的静态方法和实例方法\ndate: 2016-08-15 22:29:16\ntags: [js,静态方法,实例方法,函数]\n---\n-\t最近有人问我关于什么静态方法和实例方法不是太清除，所以做一个整理。\n\n-\t什么是静态方法：\n>\t静态方法是指不需要声明类的实例就可以使用的方法。\n\n代码演示\n```js\nfunction foo () {};\n//在foo上直接添加静态方法\nfoo.say = function(){\n\tconsole.log(\"我是静态方法，不需要实例化，可以直接用函数调用!\");\n};\nfoo.say();//函数直接调用方法say，打印hello\n```\n \n-\t什么是实例方法\n>\t实例方法是指必须要先使用\"new\"关键字声明一个类的实例, 然后才可以通过此实例访问的方法。\n\n<!-- more -->\n代码演示：\n```js\nfunction Fn () {\n\tthis.say = function(){\n\t\tconsole.log(\"我是实例化之后才可以调用的方法！\")\n\t}\n}\nvar obj = new Fn();//需要首先实例化\nobj.say();//才可以调用\n```","slug":"关于js中的静态方法和实例方法","published":1,"updated":"2018-01-31T12:39:09.849Z","_id":"cjd30vwcy001d581iw83yc7uo","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><p>最近有人问我关于什么静态方法和实例方法不是太清除，所以做一个整理。</p>\n</li>\n<li><p>什么是静态方法：</p>\n<blockquote>\n<p>   静态方法是指不需要声明类的实例就可以使用的方法。</p>\n</blockquote>\n</li>\n</ul>\n<p>代码演示<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//在foo上直接添加静态方法</span></span><br><span class=\"line\">foo.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是静态方法，不需要实例化，可以直接用函数调用!\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.say();<span class=\"comment\">//函数直接调用方法say，打印hello</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>什么是实例方法<blockquote>\n<p>   实例方法是指必须要先使用”new”关键字声明一个类的实例, 然后才可以通过此实例访问的方法。</p>\n</blockquote>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>代码演示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是实例化之后才可以调用的方法！\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Fn();<span class=\"comment\">//需要首先实例化</span></span><br><span class=\"line\">obj.say();<span class=\"comment\">//才可以调用</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<ul>\n<li><p>最近有人问我关于什么静态方法和实例方法不是太清除，所以做一个整理。</p>\n</li>\n<li><p>什么是静态方法：</p>\n<blockquote>\n<p>   静态方法是指不需要声明类的实例就可以使用的方法。</p>\n</blockquote>\n</li>\n</ul>\n<p>代码演示<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//在foo上直接添加静态方法</span></span><br><span class=\"line\">foo.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是静态方法，不需要实例化，可以直接用函数调用!\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.say();<span class=\"comment\">//函数直接调用方法say，打印hello</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>什么是实例方法<blockquote>\n<p>   实例方法是指必须要先使用”new”关键字声明一个类的实例, 然后才可以通过此实例访问的方法。</p>\n</blockquote>\n</li>\n</ul>","more":"<p>代码演示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是实例化之后才可以调用的方法！\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Fn();<span class=\"comment\">//需要首先实例化</span></span><br><span class=\"line\">obj.say();<span class=\"comment\">//才可以调用</span></span><br></pre></td></tr></table></figure></p>"},{"title":"初识Koa","date":"2018-01-31T09:39:36.000Z","_content":"\nKoa是Express原版团队开发的一个代替express的新一代node框架。\n<!-- more -->","source":"_posts/初识Koa.md","raw":"---\ntitle: 初识Koa\ntags: []\ndate: 2018-01-31 17:39:36\n---\n\nKoa是Express原版团队开发的一个代替express的新一代node框架。\n<!-- more -->","slug":"初识Koa","published":1,"updated":"2018-01-31T12:28:58.927Z","_id":"cjd30vwda001e581i6s5uht5l","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Koa是Express原版团队开发的一个代替express的新一代node框架。<br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<p>Koa是Express原版团队开发的一个代替express的新一代node框架。<br>","more":"</p>"},{"title":"前后端渲染的对比","date":"2017-05-14T11:01:13.000Z","_content":"\n>   服务端渲染是通过后端模板引擎编译成html,css,js,然后回传给前端来进行显示；而前端渲染则是将整个生成逻辑代码全部回传前端，再由客户端生成用户界面。\n\n##  为什么会有服务端渲染与客户端渲染\n\n早期，我们每一个页面都是直接由html，css，js实现的，每一个页面彼此之间相当于是独立的，当我们的网站应用足够大的时候，每当我们需要修改网站的内容时，我们需要更改很多的代码，非常麻烦。\n\n那么后来，我们聪明的程序员就想到了，使用代码生成代码，就是后端的模板引擎，人们开始广泛使用模板代替手写html，大大减少的前端的工作量。通过代码生成代码，其实就是编译，基于html等基础语言，做出了更高层次的抽象封装，增加了易用性。\n\n后来h5,c3的崛起，再加上客户端硬件性能的提升，我们开始通过前端模板引擎，来在客户端渲染页面。\n\n对待模板，angular，vue，react的态度都不一样。\n\n<!-- more -->\n\n**前后端真正解耦，前端专注于UI视图,后台专注于数据处理，通过设计好的api交互，这是未来的趋势。**\n\n##  从 后端渲染 到 前端渲染 ，有什么变化\n\n-   计算任务的变化\n\n>   原来由后端执行的渲染任务，现在放在了前端来做，降低了多用户同时访问时服务端的压力，然后端专注做后端的事情，由于客户端硬件的发展，前端处理起来没有什么问题。\n\n-   放弃前端权限\n\n>   将整个页面逻辑，交给客户端以后，会出现劫持的情况，比如某些运营商劫持之后，投放广告。俗话说的好**一切在前端谈安全都是耍流氓**，后端不能轻信前端发来的数据，一切数据都需要过滤与验证，最好使用ssl，屏蔽XSS。\n\n##  结语\n\n**总之一句话，后端渲染针对seo比较友好，前端渲染，可以减轻服务端的压力，提升服务器的性能，而且可以实现前后端分离！**","source":"_posts/前后端渲染的对比.md","raw":"---\ntitle: 前后端渲染的对比\ntags: [服务端渲染]\ndate: 2017-05-14 19:01:13\n---\n\n>   服务端渲染是通过后端模板引擎编译成html,css,js,然后回传给前端来进行显示；而前端渲染则是将整个生成逻辑代码全部回传前端，再由客户端生成用户界面。\n\n##  为什么会有服务端渲染与客户端渲染\n\n早期，我们每一个页面都是直接由html，css，js实现的，每一个页面彼此之间相当于是独立的，当我们的网站应用足够大的时候，每当我们需要修改网站的内容时，我们需要更改很多的代码，非常麻烦。\n\n那么后来，我们聪明的程序员就想到了，使用代码生成代码，就是后端的模板引擎，人们开始广泛使用模板代替手写html，大大减少的前端的工作量。通过代码生成代码，其实就是编译，基于html等基础语言，做出了更高层次的抽象封装，增加了易用性。\n\n后来h5,c3的崛起，再加上客户端硬件性能的提升，我们开始通过前端模板引擎，来在客户端渲染页面。\n\n对待模板，angular，vue，react的态度都不一样。\n\n<!-- more -->\n\n**前后端真正解耦，前端专注于UI视图,后台专注于数据处理，通过设计好的api交互，这是未来的趋势。**\n\n##  从 后端渲染 到 前端渲染 ，有什么变化\n\n-   计算任务的变化\n\n>   原来由后端执行的渲染任务，现在放在了前端来做，降低了多用户同时访问时服务端的压力，然后端专注做后端的事情，由于客户端硬件的发展，前端处理起来没有什么问题。\n\n-   放弃前端权限\n\n>   将整个页面逻辑，交给客户端以后，会出现劫持的情况，比如某些运营商劫持之后，投放广告。俗话说的好**一切在前端谈安全都是耍流氓**，后端不能轻信前端发来的数据，一切数据都需要过滤与验证，最好使用ssl，屏蔽XSS。\n\n##  结语\n\n**总之一句话，后端渲染针对seo比较友好，前端渲染，可以减轻服务端的压力，提升服务器的性能，而且可以实现前后端分离！**","slug":"前后端渲染的对比","published":1,"updated":"2018-01-31T12:39:09.846Z","_id":"cjd30vweh001g581iijnc0jth","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>  服务端渲染是通过后端模板引擎编译成html,css,js,然后回传给前端来进行显示；而前端渲染则是将整个生成逻辑代码全部回传前端，再由客户端生成用户界面。</p>\n</blockquote>\n<h2 id=\"为什么会有服务端渲染与客户端渲染\"><a href=\"#为什么会有服务端渲染与客户端渲染\" class=\"headerlink\" title=\"为什么会有服务端渲染与客户端渲染\"></a>为什么会有服务端渲染与客户端渲染</h2><p>早期，我们每一个页面都是直接由html，css，js实现的，每一个页面彼此之间相当于是独立的，当我们的网站应用足够大的时候，每当我们需要修改网站的内容时，我们需要更改很多的代码，非常麻烦。</p>\n<p>那么后来，我们聪明的程序员就想到了，使用代码生成代码，就是后端的模板引擎，人们开始广泛使用模板代替手写html，大大减少的前端的工作量。通过代码生成代码，其实就是编译，基于html等基础语言，做出了更高层次的抽象封装，增加了易用性。</p>\n<p>后来h5,c3的崛起，再加上客户端硬件性能的提升，我们开始通过前端模板引擎，来在客户端渲染页面。</p>\n<p>对待模板，angular，vue，react的态度都不一样。</p>\n<a id=\"more\"></a>\n<p><strong>前后端真正解耦，前端专注于UI视图,后台专注于数据处理，通过设计好的api交互，这是未来的趋势。</strong></p>\n<h2 id=\"从-后端渲染-到-前端渲染-，有什么变化\"><a href=\"#从-后端渲染-到-前端渲染-，有什么变化\" class=\"headerlink\" title=\"从 后端渲染 到 前端渲染 ，有什么变化\"></a>从 后端渲染 到 前端渲染 ，有什么变化</h2><ul>\n<li>计算任务的变化</li>\n</ul>\n<blockquote>\n<p>  原来由后端执行的渲染任务，现在放在了前端来做，降低了多用户同时访问时服务端的压力，然后端专注做后端的事情，由于客户端硬件的发展，前端处理起来没有什么问题。</p>\n</blockquote>\n<ul>\n<li>放弃前端权限</li>\n</ul>\n<blockquote>\n<p>  将整个页面逻辑，交给客户端以后，会出现劫持的情况，比如某些运营商劫持之后，投放广告。俗话说的好<strong>一切在前端谈安全都是耍流氓</strong>，后端不能轻信前端发来的数据，一切数据都需要过滤与验证，最好使用ssl，屏蔽XSS。</p>\n</blockquote>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p><strong>总之一句话，后端渲染针对seo比较友好，前端渲染，可以减轻服务端的压力，提升服务器的性能，而且可以实现前后端分离！</strong></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>  服务端渲染是通过后端模板引擎编译成html,css,js,然后回传给前端来进行显示；而前端渲染则是将整个生成逻辑代码全部回传前端，再由客户端生成用户界面。</p>\n</blockquote>\n<h2 id=\"为什么会有服务端渲染与客户端渲染\"><a href=\"#为什么会有服务端渲染与客户端渲染\" class=\"headerlink\" title=\"为什么会有服务端渲染与客户端渲染\"></a>为什么会有服务端渲染与客户端渲染</h2><p>早期，我们每一个页面都是直接由html，css，js实现的，每一个页面彼此之间相当于是独立的，当我们的网站应用足够大的时候，每当我们需要修改网站的内容时，我们需要更改很多的代码，非常麻烦。</p>\n<p>那么后来，我们聪明的程序员就想到了，使用代码生成代码，就是后端的模板引擎，人们开始广泛使用模板代替手写html，大大减少的前端的工作量。通过代码生成代码，其实就是编译，基于html等基础语言，做出了更高层次的抽象封装，增加了易用性。</p>\n<p>后来h5,c3的崛起，再加上客户端硬件性能的提升，我们开始通过前端模板引擎，来在客户端渲染页面。</p>\n<p>对待模板，angular，vue，react的态度都不一样。</p>","more":"<p><strong>前后端真正解耦，前端专注于UI视图,后台专注于数据处理，通过设计好的api交互，这是未来的趋势。</strong></p>\n<h2 id=\"从-后端渲染-到-前端渲染-，有什么变化\"><a href=\"#从-后端渲染-到-前端渲染-，有什么变化\" class=\"headerlink\" title=\"从 后端渲染 到 前端渲染 ，有什么变化\"></a>从 后端渲染 到 前端渲染 ，有什么变化</h2><ul>\n<li>计算任务的变化</li>\n</ul>\n<blockquote>\n<p>  原来由后端执行的渲染任务，现在放在了前端来做，降低了多用户同时访问时服务端的压力，然后端专注做后端的事情，由于客户端硬件的发展，前端处理起来没有什么问题。</p>\n</blockquote>\n<ul>\n<li>放弃前端权限</li>\n</ul>\n<blockquote>\n<p>  将整个页面逻辑，交给客户端以后，会出现劫持的情况，比如某些运营商劫持之后，投放广告。俗话说的好<strong>一切在前端谈安全都是耍流氓</strong>，后端不能轻信前端发来的数据，一切数据都需要过滤与验证，最好使用ssl，屏蔽XSS。</p>\n</blockquote>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p><strong>总之一句话，后端渲染针对seo比较友好，前端渲染，可以减轻服务端的压力，提升服务器的性能，而且可以实现前后端分离！</strong></p>"},{"title":"jquery框架封装练习01","date":"2016-11-15T07:07:04.000Z","_content":"-\t我们通过原生的js实现一些jq的功能，通过练习，锻炼我们的分析问题的能力。锻炼编程的思维能力。\n\n-\t查询DOM方法\n-\t操作DOM方法\n\t-\tappendTo\n\t-\tappend\n\t-\tprependTo\n\t-\tprepend\n\t-\tnext/prev\n\t-\tnextAll/prevAll\n\t-\tbefore\n\t-\tafter\n\t-\tparent /parents\n\t-\tnextSibling\n\t-\tattr\n\t-\tprop\n\t-\tval\n\t-\thtml\n\t-\ttext\n\t-\tcss\n\t-\taddClass\n\t-\thasClass\n\t-\tremoveClass\n\t-\ttoggleClass\n\t-\ton\n\t-\toff\n\t-\tclick /dbclick/keydown\n\t-\t$.ajax\n\n##\tjQuery框架结构\n\n1.\t为了防止对变量和全局对象的污染，使用沙箱模式\n2.\tjq的功能是查询DOM和操作DOM，\n\t-\t在查询时，通过选择器来查询。因此要使用函数去实现Dom元素的查询。在实现时，要先定义一个函数init，\n\t-\t查询到DOM后，要对这些DOM进行操作，此时，要使用面向对象编程的方式来实现，创建一个对象，然后通过该对象的方法来实现操作查询到的DOM元素。\n3.\t由于框架的结构在完成之后，不允许任何使用者随意改动，所以用户如果想要扩展方法，就必须向其能拿到的对象上扩展，$->createinit，也就是工厂函数以及其原型。最终要实现init对象继承自createinit函数的原型。\n\n<!-- more -->\n##\tjQuery对象的本质\n\n\t是一个伪数组对象，在自然数的索引上存储的是查询到的DOM元素，本质是jQuery原型上的init构造函数的实例。\n\n##\tinit构造函数的参数类型\n\n-\t构造函数中传入参数的类型有很多，所以我们需要对传入的参数进行判断，根据传入参数的不同，实现不同的功能。\n\n1.\tstring\n\n\t-\thtml字符串：创建对应的html元素\n\t-\t选择器：在DOM树上查询元素\n\n2.\tdom元素\n\n\t-\t将其转换成init对象\n\n\n3.\tdom数组和伪数组\n\n\t-\t转换成init对象\n\n4.\t函数\n\n\t-\t其实就是入口函数\n\t-\t监听dom树是否加载完毕，如果加载完毕就执行函数\n\n5.\t非法值 null undefined\n\n-\t返回空的init对象\n\n##\t添加类型判断方法\n-\t根据上面的类型需要做出判断，添加对应的怕段方法\n\n1.\tisString方法：判断是否为字符串\n\n2.\tisHTML方法：判断是否为html字符串\n\n3.\tisDOM方法：判断是否是dom节点\n\n4.\tisArrayLike方法：判断是否为数组或伪数组对象\n\n5.\tisFunction方法：判断是否为函数类型\n\n6.\tisWindow方法：判断是否为window对象","source":"_posts/原生框架封装练习01.md","raw":"---\ntitle: jquery框架封装练习01\ndate: 2016-11-15 15:07:04\ntags:\t[js,原生js实现jq，原生框架封装]\n---\n-\t我们通过原生的js实现一些jq的功能，通过练习，锻炼我们的分析问题的能力。锻炼编程的思维能力。\n\n-\t查询DOM方法\n-\t操作DOM方法\n\t-\tappendTo\n\t-\tappend\n\t-\tprependTo\n\t-\tprepend\n\t-\tnext/prev\n\t-\tnextAll/prevAll\n\t-\tbefore\n\t-\tafter\n\t-\tparent /parents\n\t-\tnextSibling\n\t-\tattr\n\t-\tprop\n\t-\tval\n\t-\thtml\n\t-\ttext\n\t-\tcss\n\t-\taddClass\n\t-\thasClass\n\t-\tremoveClass\n\t-\ttoggleClass\n\t-\ton\n\t-\toff\n\t-\tclick /dbclick/keydown\n\t-\t$.ajax\n\n##\tjQuery框架结构\n\n1.\t为了防止对变量和全局对象的污染，使用沙箱模式\n2.\tjq的功能是查询DOM和操作DOM，\n\t-\t在查询时，通过选择器来查询。因此要使用函数去实现Dom元素的查询。在实现时，要先定义一个函数init，\n\t-\t查询到DOM后，要对这些DOM进行操作，此时，要使用面向对象编程的方式来实现，创建一个对象，然后通过该对象的方法来实现操作查询到的DOM元素。\n3.\t由于框架的结构在完成之后，不允许任何使用者随意改动，所以用户如果想要扩展方法，就必须向其能拿到的对象上扩展，$->createinit，也就是工厂函数以及其原型。最终要实现init对象继承自createinit函数的原型。\n\n<!-- more -->\n##\tjQuery对象的本质\n\n\t是一个伪数组对象，在自然数的索引上存储的是查询到的DOM元素，本质是jQuery原型上的init构造函数的实例。\n\n##\tinit构造函数的参数类型\n\n-\t构造函数中传入参数的类型有很多，所以我们需要对传入的参数进行判断，根据传入参数的不同，实现不同的功能。\n\n1.\tstring\n\n\t-\thtml字符串：创建对应的html元素\n\t-\t选择器：在DOM树上查询元素\n\n2.\tdom元素\n\n\t-\t将其转换成init对象\n\n\n3.\tdom数组和伪数组\n\n\t-\t转换成init对象\n\n4.\t函数\n\n\t-\t其实就是入口函数\n\t-\t监听dom树是否加载完毕，如果加载完毕就执行函数\n\n5.\t非法值 null undefined\n\n-\t返回空的init对象\n\n##\t添加类型判断方法\n-\t根据上面的类型需要做出判断，添加对应的怕段方法\n\n1.\tisString方法：判断是否为字符串\n\n2.\tisHTML方法：判断是否为html字符串\n\n3.\tisDOM方法：判断是否是dom节点\n\n4.\tisArrayLike方法：判断是否为数组或伪数组对象\n\n5.\tisFunction方法：判断是否为函数类型\n\n6.\tisWindow方法：判断是否为window对象","slug":"原生框架封装练习01","published":1,"updated":"2018-01-31T12:39:09.852Z","_id":"cjd30vwem001h581iuh75e5z2","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><p>我们通过原生的js实现一些jq的功能，通过练习，锻炼我们的分析问题的能力。锻炼编程的思维能力。</p>\n</li>\n<li><p>查询DOM方法</p>\n</li>\n<li>操作DOM方法<ul>\n<li>appendTo</li>\n<li>append</li>\n<li>prependTo</li>\n<li>prepend</li>\n<li>next/prev</li>\n<li>nextAll/prevAll</li>\n<li>before</li>\n<li>after</li>\n<li>parent /parents</li>\n<li>nextSibling</li>\n<li>attr</li>\n<li>prop</li>\n<li>val</li>\n<li>html</li>\n<li>text</li>\n<li>css</li>\n<li>addClass</li>\n<li>hasClass</li>\n<li>removeClass</li>\n<li>toggleClass</li>\n<li>on</li>\n<li>off</li>\n<li>click /dbclick/keydown</li>\n<li>$.ajax</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jQuery框架结构\"><a href=\"#jQuery框架结构\" class=\"headerlink\" title=\"jQuery框架结构\"></a>jQuery框架结构</h2><ol>\n<li>为了防止对变量和全局对象的污染，使用沙箱模式</li>\n<li>jq的功能是查询DOM和操作DOM，<ul>\n<li>在查询时，通过选择器来查询。因此要使用函数去实现Dom元素的查询。在实现时，要先定义一个函数init，</li>\n<li>查询到DOM后，要对这些DOM进行操作，此时，要使用面向对象编程的方式来实现，创建一个对象，然后通过该对象的方法来实现操作查询到的DOM元素。</li>\n</ul>\n</li>\n<li>由于框架的结构在完成之后，不允许任何使用者随意改动，所以用户如果想要扩展方法，就必须向其能拿到的对象上扩展，$-&gt;createinit，也就是工厂函数以及其原型。最终要实现init对象继承自createinit函数的原型。</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"jQuery对象的本质\"><a href=\"#jQuery对象的本质\" class=\"headerlink\" title=\"jQuery对象的本质\"></a>jQuery对象的本质</h2><pre><code>是一个伪数组对象，在自然数的索引上存储的是查询到的DOM元素，本质是jQuery原型上的init构造函数的实例。\n</code></pre><h2 id=\"init构造函数的参数类型\"><a href=\"#init构造函数的参数类型\" class=\"headerlink\" title=\"init构造函数的参数类型\"></a>init构造函数的参数类型</h2><ul>\n<li>构造函数中传入参数的类型有很多，所以我们需要对传入的参数进行判断，根据传入参数的不同，实现不同的功能。</li>\n</ul>\n<ol>\n<li><p>string</p>\n<ul>\n<li>html字符串：创建对应的html元素</li>\n<li>选择器：在DOM树上查询元素</li>\n</ul>\n</li>\n<li><p>dom元素</p>\n<ul>\n<li>将其转换成init对象</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p>dom数组和伪数组</p>\n<ul>\n<li>转换成init对象</li>\n</ul>\n</li>\n<li><p>函数</p>\n<ul>\n<li>其实就是入口函数</li>\n<li>监听dom树是否加载完毕，如果加载完毕就执行函数</li>\n</ul>\n</li>\n<li><p>非法值 null undefined</p>\n</li>\n</ol>\n<ul>\n<li>返回空的init对象</li>\n</ul>\n<h2 id=\"添加类型判断方法\"><a href=\"#添加类型判断方法\" class=\"headerlink\" title=\"添加类型判断方法\"></a>添加类型判断方法</h2><ul>\n<li>根据上面的类型需要做出判断，添加对应的怕段方法</li>\n</ul>\n<ol>\n<li><p>isString方法：判断是否为字符串</p>\n</li>\n<li><p>isHTML方法：判断是否为html字符串</p>\n</li>\n<li><p>isDOM方法：判断是否是dom节点</p>\n</li>\n<li><p>isArrayLike方法：判断是否为数组或伪数组对象</p>\n</li>\n<li><p>isFunction方法：判断是否为函数类型</p>\n</li>\n<li><p>isWindow方法：判断是否为window对象</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ul>\n<li><p>我们通过原生的js实现一些jq的功能，通过练习，锻炼我们的分析问题的能力。锻炼编程的思维能力。</p>\n</li>\n<li><p>查询DOM方法</p>\n</li>\n<li>操作DOM方法<ul>\n<li>appendTo</li>\n<li>append</li>\n<li>prependTo</li>\n<li>prepend</li>\n<li>next/prev</li>\n<li>nextAll/prevAll</li>\n<li>before</li>\n<li>after</li>\n<li>parent /parents</li>\n<li>nextSibling</li>\n<li>attr</li>\n<li>prop</li>\n<li>val</li>\n<li>html</li>\n<li>text</li>\n<li>css</li>\n<li>addClass</li>\n<li>hasClass</li>\n<li>removeClass</li>\n<li>toggleClass</li>\n<li>on</li>\n<li>off</li>\n<li>click /dbclick/keydown</li>\n<li>$.ajax</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jQuery框架结构\"><a href=\"#jQuery框架结构\" class=\"headerlink\" title=\"jQuery框架结构\"></a>jQuery框架结构</h2><ol>\n<li>为了防止对变量和全局对象的污染，使用沙箱模式</li>\n<li>jq的功能是查询DOM和操作DOM，<ul>\n<li>在查询时，通过选择器来查询。因此要使用函数去实现Dom元素的查询。在实现时，要先定义一个函数init，</li>\n<li>查询到DOM后，要对这些DOM进行操作，此时，要使用面向对象编程的方式来实现，创建一个对象，然后通过该对象的方法来实现操作查询到的DOM元素。</li>\n</ul>\n</li>\n<li>由于框架的结构在完成之后，不允许任何使用者随意改动，所以用户如果想要扩展方法，就必须向其能拿到的对象上扩展，$-&gt;createinit，也就是工厂函数以及其原型。最终要实现init对象继承自createinit函数的原型。</li>\n</ol>","more":"<h2 id=\"jQuery对象的本质\"><a href=\"#jQuery对象的本质\" class=\"headerlink\" title=\"jQuery对象的本质\"></a>jQuery对象的本质</h2><pre><code>是一个伪数组对象，在自然数的索引上存储的是查询到的DOM元素，本质是jQuery原型上的init构造函数的实例。\n</code></pre><h2 id=\"init构造函数的参数类型\"><a href=\"#init构造函数的参数类型\" class=\"headerlink\" title=\"init构造函数的参数类型\"></a>init构造函数的参数类型</h2><ul>\n<li>构造函数中传入参数的类型有很多，所以我们需要对传入的参数进行判断，根据传入参数的不同，实现不同的功能。</li>\n</ul>\n<ol>\n<li><p>string</p>\n<ul>\n<li>html字符串：创建对应的html元素</li>\n<li>选择器：在DOM树上查询元素</li>\n</ul>\n</li>\n<li><p>dom元素</p>\n<ul>\n<li>将其转换成init对象</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p>dom数组和伪数组</p>\n<ul>\n<li>转换成init对象</li>\n</ul>\n</li>\n<li><p>函数</p>\n<ul>\n<li>其实就是入口函数</li>\n<li>监听dom树是否加载完毕，如果加载完毕就执行函数</li>\n</ul>\n</li>\n<li><p>非法值 null undefined</p>\n</li>\n</ol>\n<ul>\n<li>返回空的init对象</li>\n</ul>\n<h2 id=\"添加类型判断方法\"><a href=\"#添加类型判断方法\" class=\"headerlink\" title=\"添加类型判断方法\"></a>添加类型判断方法</h2><ul>\n<li>根据上面的类型需要做出判断，添加对应的怕段方法</li>\n</ul>\n<ol>\n<li><p>isString方法：判断是否为字符串</p>\n</li>\n<li><p>isHTML方法：判断是否为html字符串</p>\n</li>\n<li><p>isDOM方法：判断是否是dom节点</p>\n</li>\n<li><p>isArrayLike方法：判断是否为数组或伪数组对象</p>\n</li>\n<li><p>isFunction方法：判断是否为函数类型</p>\n</li>\n<li><p>isWindow方法：判断是否为window对象</p>\n</li>\n</ol>"},{"title":"JS原型链总结","date":"2016-10-10T13:22:24.000Z","_content":"\n## 原型\n\n### 定义：是函数的prototype属性所引用的对象\n\n### 目的：为了同类对象之间的数据共享\n\n### 实际开发的使用\n\n```javascript\n  // 1: 定义构造函数，实现函数体部分\n\t// 使用构造函数 结合原型\n\tfunction Person(name, age, sex) {\n\t\t// 特有的属性写在这里\n\t}\n\t// 2：将该对象相关的方法定义在原型上\n\t// 将共有的属性（一般是方法）\n\tPerson.prototype.say = function() {};\n\tPerson.prototype.run = function() {};\n\t// 或者\n\tPerson.prototype = {\n\t\tconstructor: Person,\n\t\tsay: function() {},\n\t\trun: function() {}\n\t};\n\t// 3：创建对象\n\tvar zs = new Person();\n\n```\n\n<!-- more -->\n## 继承\n\n### 定义：指一个对象有权去访问另一个对象上的成员\n\n### 继承的实现\n\n1. 原型式\n\n2. 混入式\n\n3. 借用构造函数\n\n ```javascript\n function Animal( name, age, sex ) {\n \tthis.name = name;\n \tthis.age = age;\n \tthis.sex = sex;\n }\n\n function Person( name, age, sex, phoneNo ) {\n \tAnimal.call( this, name, age, sex );\n \tthis.phoneNo = phoneNo;\n }\n\n var zs = new Person( '张三', 18, 'boy', '13838383838' );\n ```\n\n\n## 原型链\n\n### 本质是通过\\__proto__属性连接起来的，体现继承层次关系的。\n\n### 掌握程度\n\t\n1. 给定一个对象，可以迅速找到该对象的原型链\n\n2. 找到该对象的三口之家\n\n## 函数\n\n### 函数是js的一等公民\n\n1. 函数有双重身份\n\t* 对象-可以添加属性和方法--静态成员\n\t* 函数-在调用时，就存在四种调用模式；递归调用\n\n2. 可以嵌套使用\n\t* js使用词法作用域，那么会产生作用域链\n\n3. 可以作为其他函数的实参\n\t* 回调函数\n\n4. 可以作为其他函数的返回值\n\t* 闭包\n\n5. 可以限定作用域\n\n6. 可以作为对象的属性值\n```\n\n<tag>哈哈哈哈</tag>","source":"_posts/js原型.md","raw":"---\ntitle: JS原型链总结\ndate: 2016-10-10 21:22:24\ntags: [JS,原型,原型链,函数]\n---\n\n## 原型\n\n### 定义：是函数的prototype属性所引用的对象\n\n### 目的：为了同类对象之间的数据共享\n\n### 实际开发的使用\n\n```javascript\n  // 1: 定义构造函数，实现函数体部分\n\t// 使用构造函数 结合原型\n\tfunction Person(name, age, sex) {\n\t\t// 特有的属性写在这里\n\t}\n\t// 2：将该对象相关的方法定义在原型上\n\t// 将共有的属性（一般是方法）\n\tPerson.prototype.say = function() {};\n\tPerson.prototype.run = function() {};\n\t// 或者\n\tPerson.prototype = {\n\t\tconstructor: Person,\n\t\tsay: function() {},\n\t\trun: function() {}\n\t};\n\t// 3：创建对象\n\tvar zs = new Person();\n\n```\n\n<!-- more -->\n## 继承\n\n### 定义：指一个对象有权去访问另一个对象上的成员\n\n### 继承的实现\n\n1. 原型式\n\n2. 混入式\n\n3. 借用构造函数\n\n ```javascript\n function Animal( name, age, sex ) {\n \tthis.name = name;\n \tthis.age = age;\n \tthis.sex = sex;\n }\n\n function Person( name, age, sex, phoneNo ) {\n \tAnimal.call( this, name, age, sex );\n \tthis.phoneNo = phoneNo;\n }\n\n var zs = new Person( '张三', 18, 'boy', '13838383838' );\n ```\n\n\n## 原型链\n\n### 本质是通过\\__proto__属性连接起来的，体现继承层次关系的。\n\n### 掌握程度\n\t\n1. 给定一个对象，可以迅速找到该对象的原型链\n\n2. 找到该对象的三口之家\n\n## 函数\n\n### 函数是js的一等公民\n\n1. 函数有双重身份\n\t* 对象-可以添加属性和方法--静态成员\n\t* 函数-在调用时，就存在四种调用模式；递归调用\n\n2. 可以嵌套使用\n\t* js使用词法作用域，那么会产生作用域链\n\n3. 可以作为其他函数的实参\n\t* 回调函数\n\n4. 可以作为其他函数的返回值\n\t* 闭包\n\n5. 可以限定作用域\n\n6. 可以作为对象的属性值\n```\n\n<tag>哈哈哈哈</tag>","slug":"js原型","published":1,"updated":"2018-01-31T12:39:09.828Z","_id":"cjd30vwf7001j581i9w46k0g6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><h3 id=\"定义：是函数的prototype属性所引用的对象\"><a href=\"#定义：是函数的prototype属性所引用的对象\" class=\"headerlink\" title=\"定义：是函数的prototype属性所引用的对象\"></a>定义：是函数的prototype属性所引用的对象</h3><h3 id=\"目的：为了同类对象之间的数据共享\"><a href=\"#目的：为了同类对象之间的数据共享\" class=\"headerlink\" title=\"目的：为了同类对象之间的数据共享\"></a>目的：为了同类对象之间的数据共享</h3><h3 id=\"实际开发的使用\"><a href=\"#实际开发的使用\" class=\"headerlink\" title=\"实际开发的使用\"></a>实际开发的使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 1: 定义构造函数，实现函数体部分</span></span><br><span class=\"line\"><span class=\"comment\">// 使用构造函数 结合原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, sex</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 特有的属性写在这里</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2：将该对象相关的方法定义在原型上</span></span><br><span class=\"line\"><span class=\"comment\">// 将共有的属性（一般是方法）</span></span><br><span class=\"line\">Person.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">Person.prototype.run = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">\tsay: function() &#123;&#125;,</span><br><span class=\"line\">\trun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 3：创建对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> zs = <span class=\"keyword\">new</span> Person();</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><h3 id=\"定义：指一个对象有权去访问另一个对象上的成员\"><a href=\"#定义：指一个对象有权去访问另一个对象上的成员\" class=\"headerlink\" title=\"定义：指一个对象有权去访问另一个对象上的成员\"></a>定义：指一个对象有权去访问另一个对象上的成员</h3><h3 id=\"继承的实现\"><a href=\"#继承的实现\" class=\"headerlink\" title=\"继承的实现\"></a>继承的实现</h3><ol>\n<li><p>原型式</p>\n</li>\n<li><p>混入式</p>\n</li>\n<li><p>借用构造函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"> name, age, sex </span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"> name, age, sex, phoneNo </span>) </span>&#123;</span><br><span class=\"line\">\tAnimal.call( <span class=\"keyword\">this</span>, name, age, sex );</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.phoneNo = phoneNo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> zs = <span class=\"keyword\">new</span> Person( <span class=\"string\">'张三'</span>, <span class=\"number\">18</span>, <span class=\"string\">'boy'</span>, <span class=\"string\">'13838383838'</span> );</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><h3 id=\"本质是通过-proto-属性连接起来的，体现继承层次关系的。\"><a href=\"#本质是通过-proto-属性连接起来的，体现继承层次关系的。\" class=\"headerlink\" title=\"本质是通过__proto__属性连接起来的，体现继承层次关系的。\"></a>本质是通过__proto__属性连接起来的，体现继承层次关系的。</h3><h3 id=\"掌握程度\"><a href=\"#掌握程度\" class=\"headerlink\" title=\"掌握程度\"></a>掌握程度</h3><ol>\n<li><p>给定一个对象，可以迅速找到该对象的原型链</p>\n</li>\n<li><p>找到该对象的三口之家</p>\n</li>\n</ol>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"函数是js的一等公民\"><a href=\"#函数是js的一等公民\" class=\"headerlink\" title=\"函数是js的一等公民\"></a>函数是js的一等公民</h3><ol>\n<li><p>函数有双重身份</p>\n<ul>\n<li>对象-可以添加属性和方法–静态成员</li>\n<li>函数-在调用时，就存在四种调用模式；递归调用</li>\n</ul>\n</li>\n<li><p>可以嵌套使用</p>\n<ul>\n<li>js使用词法作用域，那么会产生作用域链</li>\n</ul>\n</li>\n<li><p>可以作为其他函数的实参</p>\n<ul>\n<li>回调函数</li>\n</ul>\n</li>\n<li><p>可以作为其他函数的返回值</p>\n<ul>\n<li>闭包</li>\n</ul>\n</li>\n<li><p>可以限定作用域</p>\n</li>\n<li><p>可以作为对象的属性值<br>```</p>\n</li>\n</ol>\n<tag>哈哈哈哈</tag>","site":{"data":{}},"excerpt":"<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><h3 id=\"定义：是函数的prototype属性所引用的对象\"><a href=\"#定义：是函数的prototype属性所引用的对象\" class=\"headerlink\" title=\"定义：是函数的prototype属性所引用的对象\"></a>定义：是函数的prototype属性所引用的对象</h3><h3 id=\"目的：为了同类对象之间的数据共享\"><a href=\"#目的：为了同类对象之间的数据共享\" class=\"headerlink\" title=\"目的：为了同类对象之间的数据共享\"></a>目的：为了同类对象之间的数据共享</h3><h3 id=\"实际开发的使用\"><a href=\"#实际开发的使用\" class=\"headerlink\" title=\"实际开发的使用\"></a>实际开发的使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 1: 定义构造函数，实现函数体部分</span></span><br><span class=\"line\"><span class=\"comment\">// 使用构造函数 结合原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, sex</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 特有的属性写在这里</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2：将该对象相关的方法定义在原型上</span></span><br><span class=\"line\"><span class=\"comment\">// 将共有的属性（一般是方法）</span></span><br><span class=\"line\">Person.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">Person.prototype.run = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>: Person,</span><br><span class=\"line\">\tsay: function() &#123;&#125;,</span><br><span class=\"line\">\trun: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 3：创建对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> zs = <span class=\"keyword\">new</span> Person();</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><h3 id=\"定义：指一个对象有权去访问另一个对象上的成员\"><a href=\"#定义：指一个对象有权去访问另一个对象上的成员\" class=\"headerlink\" title=\"定义：指一个对象有权去访问另一个对象上的成员\"></a>定义：指一个对象有权去访问另一个对象上的成员</h3><h3 id=\"继承的实现\"><a href=\"#继承的实现\" class=\"headerlink\" title=\"继承的实现\"></a>继承的实现</h3><ol>\n<li><p>原型式</p>\n</li>\n<li><p>混入式</p>\n</li>\n<li><p>借用构造函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"> name, age, sex </span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"> name, age, sex, phoneNo </span>) </span>&#123;</span><br><span class=\"line\">\tAnimal.call( <span class=\"keyword\">this</span>, name, age, sex );</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.phoneNo = phoneNo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> zs = <span class=\"keyword\">new</span> Person( <span class=\"string\">'张三'</span>, <span class=\"number\">18</span>, <span class=\"string\">'boy'</span>, <span class=\"string\">'13838383838'</span> );</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><h3 id=\"本质是通过-proto-属性连接起来的，体现继承层次关系的。\"><a href=\"#本质是通过-proto-属性连接起来的，体现继承层次关系的。\" class=\"headerlink\" title=\"本质是通过__proto__属性连接起来的，体现继承层次关系的。\"></a>本质是通过__proto__属性连接起来的，体现继承层次关系的。</h3><h3 id=\"掌握程度\"><a href=\"#掌握程度\" class=\"headerlink\" title=\"掌握程度\"></a>掌握程度</h3><ol>\n<li><p>给定一个对象，可以迅速找到该对象的原型链</p>\n</li>\n<li><p>找到该对象的三口之家</p>\n</li>\n</ol>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"函数是js的一等公民\"><a href=\"#函数是js的一等公民\" class=\"headerlink\" title=\"函数是js的一等公民\"></a>函数是js的一等公民</h3><ol>\n<li><p>函数有双重身份</p>\n<ul>\n<li>对象-可以添加属性和方法–静态成员</li>\n<li>函数-在调用时，就存在四种调用模式；递归调用</li>\n</ul>\n</li>\n<li><p>可以嵌套使用</p>\n<ul>\n<li>js使用词法作用域，那么会产生作用域链</li>\n</ul>\n</li>\n<li><p>可以作为其他函数的实参</p>\n<ul>\n<li>回调函数</li>\n</ul>\n</li>\n<li><p>可以作为其他函数的返回值</p>\n<ul>\n<li>闭包</li>\n</ul>\n</li>\n<li><p>可以限定作用域</p>\n</li>\n<li><p>可以作为对象的属性值<br>```</p>\n</li>\n</ol>\n<tag>哈哈哈哈</tag>"},{"title":"原生框架封装之插件开发","date":"2016-11-20T01:25:49.000Z","_content":" \n\n\n##\tcookie\n\n1.\t历史背景\n\n\t-\thttp https: 都是一种无状态、无连接的协议\n\t-\ttcp/ip 是一种长连接协议\n\t-\t无论什么用户都可以访问网址页面，在实际开发中，有些页面需要先验证身份才可以访问的，此时就需要http记录用户的状态，（登录状态），\n\t-\t但是http协议是无状态的，因此就诞生了session和cookie\n\n2.\t应用场景\n\n\t-\t登录功能：记录登录状态，以及一些用户基本信息。\n\t-\t用户基本信息：昵称、头像地址、加密后的密码（记住密码）、用户名\n\n3.\t做cookie插件的目的\n\n-\t方便前端人员操作cookie\n\n<!-- more -->\n##\t原生js操作cookie\n\n1.\t获取\n\t```javascript\n\tdocument.cookie\n\t```\n2.\t操作\n\t```javascript\n\tdocument.cookie = \"username=guoguo\";\n\t```\n3.\t设置有效期\n\n\t-\t默认如果没有设置cookie有效期，它就是一个会话的cookie，也就是说，当浏览器关闭时，该cookie的信息会被清除掉\n\n\t-\t在设置cookie有效期时，单位是天，在原生设置cookie有效期时，要给expiries赋值为截止日期；\n\n4.\t设置域名\n\t```javascript\n\tdomain=\"xxx.com\"\n\t```\n5.\t设置路径\n\t```javascript\n\tpath=\"/\"\n\t```","source":"_posts/原生框架封装之插件开发.md","raw":"---\ntitle: 原生框架封装之插件开发\ntags: [原生框架封装,js，jquery]\ndate: 2016-11-20 09:25:49\n---\n \n\n\n##\tcookie\n\n1.\t历史背景\n\n\t-\thttp https: 都是一种无状态、无连接的协议\n\t-\ttcp/ip 是一种长连接协议\n\t-\t无论什么用户都可以访问网址页面，在实际开发中，有些页面需要先验证身份才可以访问的，此时就需要http记录用户的状态，（登录状态），\n\t-\t但是http协议是无状态的，因此就诞生了session和cookie\n\n2.\t应用场景\n\n\t-\t登录功能：记录登录状态，以及一些用户基本信息。\n\t-\t用户基本信息：昵称、头像地址、加密后的密码（记住密码）、用户名\n\n3.\t做cookie插件的目的\n\n-\t方便前端人员操作cookie\n\n<!-- more -->\n##\t原生js操作cookie\n\n1.\t获取\n\t```javascript\n\tdocument.cookie\n\t```\n2.\t操作\n\t```javascript\n\tdocument.cookie = \"username=guoguo\";\n\t```\n3.\t设置有效期\n\n\t-\t默认如果没有设置cookie有效期，它就是一个会话的cookie，也就是说，当浏览器关闭时，该cookie的信息会被清除掉\n\n\t-\t在设置cookie有效期时，单位是天，在原生设置cookie有效期时，要给expiries赋值为截止日期；\n\n4.\t设置域名\n\t```javascript\n\tdomain=\"xxx.com\"\n\t```\n5.\t设置路径\n\t```javascript\n\tpath=\"/\"\n\t```","slug":"原生框架封装之插件开发","published":1,"updated":"2018-01-31T12:42:33.010Z","_id":"cjd30vwfg001l581iae4otx24","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><ol>\n<li><p>历史背景</p>\n<ul>\n<li>http https: 都是一种无状态、无连接的协议</li>\n<li>tcp/ip 是一种长连接协议</li>\n<li>无论什么用户都可以访问网址页面，在实际开发中，有些页面需要先验证身份才可以访问的，此时就需要http记录用户的状态，（登录状态），</li>\n<li>但是http协议是无状态的，因此就诞生了session和cookie</li>\n</ul>\n</li>\n<li><p>应用场景</p>\n<ul>\n<li>登录功能：记录登录状态，以及一些用户基本信息。</li>\n<li>用户基本信息：昵称、头像地址、加密后的密码（记住密码）、用户名</li>\n</ul>\n</li>\n<li><p>做cookie插件的目的</p>\n</li>\n</ol>\n<ul>\n<li>方便前端人员操作cookie</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"原生js操作cookie\"><a href=\"#原生js操作cookie\" class=\"headerlink\" title=\"原生js操作cookie\"></a>原生js操作cookie</h2><ol>\n<li><p>获取</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.cookie</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">\"username=guoguo\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置有效期</p>\n<ul>\n<li><p>默认如果没有设置cookie有效期，它就是一个会话的cookie，也就是说，当浏览器关闭时，该cookie的信息会被清除掉</p>\n</li>\n<li><p>在设置cookie有效期时，单位是天，在原生设置cookie有效期时，要给expiries赋值为截止日期；</p>\n</li>\n</ul>\n</li>\n<li><p>设置域名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">domain=<span class=\"string\">\"xxx.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置路径</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path=<span class=\"string\">\"/\"</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><ol>\n<li><p>历史背景</p>\n<ul>\n<li>http https: 都是一种无状态、无连接的协议</li>\n<li>tcp/ip 是一种长连接协议</li>\n<li>无论什么用户都可以访问网址页面，在实际开发中，有些页面需要先验证身份才可以访问的，此时就需要http记录用户的状态，（登录状态），</li>\n<li>但是http协议是无状态的，因此就诞生了session和cookie</li>\n</ul>\n</li>\n<li><p>应用场景</p>\n<ul>\n<li>登录功能：记录登录状态，以及一些用户基本信息。</li>\n<li>用户基本信息：昵称、头像地址、加密后的密码（记住密码）、用户名</li>\n</ul>\n</li>\n<li><p>做cookie插件的目的</p>\n</li>\n</ol>\n<ul>\n<li>方便前端人员操作cookie</li>\n</ul>","more":"<h2 id=\"原生js操作cookie\"><a href=\"#原生js操作cookie\" class=\"headerlink\" title=\"原生js操作cookie\"></a>原生js操作cookie</h2><ol>\n<li><p>获取</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.cookie</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">\"username=guoguo\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置有效期</p>\n<ul>\n<li><p>默认如果没有设置cookie有效期，它就是一个会话的cookie，也就是说，当浏览器关闭时，该cookie的信息会被清除掉</p>\n</li>\n<li><p>在设置cookie有效期时，单位是天，在原生设置cookie有效期时，要给expiries赋值为截止日期；</p>\n</li>\n</ul>\n</li>\n<li><p>设置域名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">domain=<span class=\"string\">\"xxx.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置路径</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path=<span class=\"string\">\"/\"</span></span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"原生框架封装练习02","date":"2016-11-17T01:26:35.000Z","_content":" \n\n##\t工具类方法与功能类方法\n\n1.\t工具类方法：\n\t-\t可以在内部使用，也可以给使用者使用，不需要常见实例就可以调用的\n\n2.\t功能类方法：\n\t-\t框架内部的对象的方法，必须使用该对象去调用，操作dom元素的方法\n\n##\t类型判断方法\n\n1.\tisString方法：判断指定 参数是不是字符串类型，\n\n2.\tisHTML：判断指定参数是不是html字符串\n\t-\t以<开头，以>结尾，长度不小于3的字符串\n\n3.\tisDOM：判断指定的参数是不是dom对象\n\t-\t如果参数不为null或undefined，并且具有nodetype属性，那么类型就是dom对象\n\n4.\tisArrayLink：判断指定参数是不是数组或伪数组\n\t-\t如果对象的length属性是number类型\n\n<!-- more -->\n5.\tisFunction：\n\t-\t\n\n6.\tiswindow：判断指定参数是不是window\n\t-\t如果参数值不是null undefined，并具有window属性指向自己，那么该对象就是window\n\n##\t工具类方法\n\n1.\ttype方法：\n\n2.\tParseHTML方法：将html字符串转换为对应的元素节点\n\n##\tselector参数类型与逻辑\n\n##\t保持itcast对象是伪数组\n\n-\t在itcast的原型上添加length=0；表示itcast对象默认的属相为0；\n\n##\t功能类方法toArray\n\n1.\t\n\n2.\t功能：将itcast对象，转换成真数组\n\n3.\t实现思路：借调数组的slice方法，\n\n##\t功能类get方法\n\n1.\t语法：`itcast对象.get( index )`\n\n2.\t功能：根据索引获取指定的dom元素\n\n3.\t实现思路：\n\t-\t判断index是不是null undefined值，如果是就返回一个数组，存储itcast对象所有的dom元素\n\t-\t判断index是否小于0，是 就index+this.length转换成自然数索引值，\n\t-\t返回this[index]\n\n##\t鸭子类型Ducking Type\n\n-\t如果一个东西，走路像鸭子，声音像鸭子，那么它就是鸭子。\n\n-\t实现伪数组对象，在控制台显示时是以数组形式显示","source":"_posts/原生框架封装练习2.md","raw":"---\ntitle: 原生框架封装练习02\ntags: [原生js实现jq,原生框架封装]\ndate: 2016-11-17 09:26:35\n---\n \n\n##\t工具类方法与功能类方法\n\n1.\t工具类方法：\n\t-\t可以在内部使用，也可以给使用者使用，不需要常见实例就可以调用的\n\n2.\t功能类方法：\n\t-\t框架内部的对象的方法，必须使用该对象去调用，操作dom元素的方法\n\n##\t类型判断方法\n\n1.\tisString方法：判断指定 参数是不是字符串类型，\n\n2.\tisHTML：判断指定参数是不是html字符串\n\t-\t以<开头，以>结尾，长度不小于3的字符串\n\n3.\tisDOM：判断指定的参数是不是dom对象\n\t-\t如果参数不为null或undefined，并且具有nodetype属性，那么类型就是dom对象\n\n4.\tisArrayLink：判断指定参数是不是数组或伪数组\n\t-\t如果对象的length属性是number类型\n\n<!-- more -->\n5.\tisFunction：\n\t-\t\n\n6.\tiswindow：判断指定参数是不是window\n\t-\t如果参数值不是null undefined，并具有window属性指向自己，那么该对象就是window\n\n##\t工具类方法\n\n1.\ttype方法：\n\n2.\tParseHTML方法：将html字符串转换为对应的元素节点\n\n##\tselector参数类型与逻辑\n\n##\t保持itcast对象是伪数组\n\n-\t在itcast的原型上添加length=0；表示itcast对象默认的属相为0；\n\n##\t功能类方法toArray\n\n1.\t\n\n2.\t功能：将itcast对象，转换成真数组\n\n3.\t实现思路：借调数组的slice方法，\n\n##\t功能类get方法\n\n1.\t语法：`itcast对象.get( index )`\n\n2.\t功能：根据索引获取指定的dom元素\n\n3.\t实现思路：\n\t-\t判断index是不是null undefined值，如果是就返回一个数组，存储itcast对象所有的dom元素\n\t-\t判断index是否小于0，是 就index+this.length转换成自然数索引值，\n\t-\t返回this[index]\n\n##\t鸭子类型Ducking Type\n\n-\t如果一个东西，走路像鸭子，声音像鸭子，那么它就是鸭子。\n\n-\t实现伪数组对象，在控制台显示时是以数组形式显示","slug":"原生框架封装练习2","published":1,"updated":"2018-01-31T12:42:33.004Z","_id":"cjd30vwfq001o581i0s6vcldm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"工具类方法与功能类方法\"><a href=\"#工具类方法与功能类方法\" class=\"headerlink\" title=\"工具类方法与功能类方法\"></a>工具类方法与功能类方法</h2><ol>\n<li><p>工具类方法：</p>\n<ul>\n<li>可以在内部使用，也可以给使用者使用，不需要常见实例就可以调用的</li>\n</ul>\n</li>\n<li><p>功能类方法：</p>\n<ul>\n<li>框架内部的对象的方法，必须使用该对象去调用，操作dom元素的方法</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"类型判断方法\"><a href=\"#类型判断方法\" class=\"headerlink\" title=\"类型判断方法\"></a>类型判断方法</h2><ol>\n<li><p>isString方法：判断指定 参数是不是字符串类型，</p>\n</li>\n<li><p>isHTML：判断指定参数是不是html字符串</p>\n<ul>\n<li>以&lt;开头，以&gt;结尾，长度不小于3的字符串</li>\n</ul>\n</li>\n<li><p>isDOM：判断指定的参数是不是dom对象</p>\n<ul>\n<li>如果参数不为null或undefined，并且具有nodetype属性，那么类型就是dom对象</li>\n</ul>\n</li>\n<li><p>isArrayLink：判断指定参数是不是数组或伪数组</p>\n<ul>\n<li>如果对象的length属性是number类型</li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li><p>isFunction：</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li><p>iswindow：判断指定参数是不是window</p>\n<ul>\n<li>如果参数值不是null undefined，并具有window属性指向自己，那么该对象就是window</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"工具类方法\"><a href=\"#工具类方法\" class=\"headerlink\" title=\"工具类方法\"></a>工具类方法</h2><ol>\n<li><p>type方法：</p>\n</li>\n<li><p>ParseHTML方法：将html字符串转换为对应的元素节点</p>\n</li>\n</ol>\n<h2 id=\"selector参数类型与逻辑\"><a href=\"#selector参数类型与逻辑\" class=\"headerlink\" title=\"selector参数类型与逻辑\"></a>selector参数类型与逻辑</h2><h2 id=\"保持itcast对象是伪数组\"><a href=\"#保持itcast对象是伪数组\" class=\"headerlink\" title=\"保持itcast对象是伪数组\"></a>保持itcast对象是伪数组</h2><ul>\n<li>在itcast的原型上添加length=0；表示itcast对象默认的属相为0；</li>\n</ul>\n<h2 id=\"功能类方法toArray\"><a href=\"#功能类方法toArray\" class=\"headerlink\" title=\"功能类方法toArray\"></a>功能类方法toArray</h2><ol>\n<li></li>\n<li><p>功能：将itcast对象，转换成真数组</p>\n</li>\n<li><p>实现思路：借调数组的slice方法，</p>\n</li>\n</ol>\n<h2 id=\"功能类get方法\"><a href=\"#功能类get方法\" class=\"headerlink\" title=\"功能类get方法\"></a>功能类get方法</h2><ol>\n<li><p>语法：<code>itcast对象.get( index )</code></p>\n</li>\n<li><p>功能：根据索引获取指定的dom元素</p>\n</li>\n<li><p>实现思路：</p>\n<ul>\n<li>判断index是不是null undefined值，如果是就返回一个数组，存储itcast对象所有的dom元素</li>\n<li>判断index是否小于0，是 就index+this.length转换成自然数索引值，</li>\n<li>返回this[index]</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"鸭子类型Ducking-Type\"><a href=\"#鸭子类型Ducking-Type\" class=\"headerlink\" title=\"鸭子类型Ducking Type\"></a>鸭子类型Ducking Type</h2><ul>\n<li><p>如果一个东西，走路像鸭子，声音像鸭子，那么它就是鸭子。</p>\n</li>\n<li><p>实现伪数组对象，在控制台显示时是以数组形式显示</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"工具类方法与功能类方法\"><a href=\"#工具类方法与功能类方法\" class=\"headerlink\" title=\"工具类方法与功能类方法\"></a>工具类方法与功能类方法</h2><ol>\n<li><p>工具类方法：</p>\n<ul>\n<li>可以在内部使用，也可以给使用者使用，不需要常见实例就可以调用的</li>\n</ul>\n</li>\n<li><p>功能类方法：</p>\n<ul>\n<li>框架内部的对象的方法，必须使用该对象去调用，操作dom元素的方法</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"类型判断方法\"><a href=\"#类型判断方法\" class=\"headerlink\" title=\"类型判断方法\"></a>类型判断方法</h2><ol>\n<li><p>isString方法：判断指定 参数是不是字符串类型，</p>\n</li>\n<li><p>isHTML：判断指定参数是不是html字符串</p>\n<ul>\n<li>以&lt;开头，以&gt;结尾，长度不小于3的字符串</li>\n</ul>\n</li>\n<li><p>isDOM：判断指定的参数是不是dom对象</p>\n<ul>\n<li>如果参数不为null或undefined，并且具有nodetype属性，那么类型就是dom对象</li>\n</ul>\n</li>\n<li><p>isArrayLink：判断指定参数是不是数组或伪数组</p>\n<ul>\n<li>如果对象的length属性是number类型</li>\n</ul>\n</li>\n</ol>","more":"<ol>\n<li><p>isFunction：</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li><p>iswindow：判断指定参数是不是window</p>\n<ul>\n<li>如果参数值不是null undefined，并具有window属性指向自己，那么该对象就是window</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"工具类方法\"><a href=\"#工具类方法\" class=\"headerlink\" title=\"工具类方法\"></a>工具类方法</h2><ol>\n<li><p>type方法：</p>\n</li>\n<li><p>ParseHTML方法：将html字符串转换为对应的元素节点</p>\n</li>\n</ol>\n<h2 id=\"selector参数类型与逻辑\"><a href=\"#selector参数类型与逻辑\" class=\"headerlink\" title=\"selector参数类型与逻辑\"></a>selector参数类型与逻辑</h2><h2 id=\"保持itcast对象是伪数组\"><a href=\"#保持itcast对象是伪数组\" class=\"headerlink\" title=\"保持itcast对象是伪数组\"></a>保持itcast对象是伪数组</h2><ul>\n<li>在itcast的原型上添加length=0；表示itcast对象默认的属相为0；</li>\n</ul>\n<h2 id=\"功能类方法toArray\"><a href=\"#功能类方法toArray\" class=\"headerlink\" title=\"功能类方法toArray\"></a>功能类方法toArray</h2><ol>\n<li></li>\n<li><p>功能：将itcast对象，转换成真数组</p>\n</li>\n<li><p>实现思路：借调数组的slice方法，</p>\n</li>\n</ol>\n<h2 id=\"功能类get方法\"><a href=\"#功能类get方法\" class=\"headerlink\" title=\"功能类get方法\"></a>功能类get方法</h2><ol>\n<li><p>语法：<code>itcast对象.get( index )</code></p>\n</li>\n<li><p>功能：根据索引获取指定的dom元素</p>\n</li>\n<li><p>实现思路：</p>\n<ul>\n<li>判断index是不是null undefined值，如果是就返回一个数组，存储itcast对象所有的dom元素</li>\n<li>判断index是否小于0，是 就index+this.length转换成自然数索引值，</li>\n<li>返回this[index]</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"鸭子类型Ducking-Type\"><a href=\"#鸭子类型Ducking-Type\" class=\"headerlink\" title=\"鸭子类型Ducking Type\"></a>鸭子类型Ducking Type</h2><ul>\n<li><p>如果一个东西，走路像鸭子，声音像鸭子，那么它就是鸭子。</p>\n</li>\n<li><p>实现伪数组对象，在控制台显示时是以数组形式显示</p>\n</li>\n</ul>"},{"title":"快速搭建hexo个人博客站点","date":"2016-03-10T15:51:18.000Z","_content":"\n##  1.  首先安装hexo命令行，\n\n```\nsudo npm install hexo-cli -g\n//安装之后输入下面命令验证是否安装成功\nhexo -v\n```\n\n##  2.  接着我们找一个我们打算把博客放在打文件夹中，打开终端\n\n```\n//输入下面命令，会自动部署博客框架\nhexo init [blog]\n//blog 就是我们防止博客文件的文件夹，可以不写，就会在打开终端打目录下直接创建\n//完成之后，进入blog文件夹安装依赖\nnpm install\n```\n\n##  3.  本地预览\n\n```\nhexo s\n```\n输入命令之后，看到下面这行提示之后，就可以再浏览器输入地址，预览配置好的页面。\n```\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n```\n\n<!-- more -->\n##  4.  创建新文章\n\n```\nhexo new 文章标题\n```\n\n输入命令之后，就可以再\\hexo\\source\\_posts\\路径下看到自己输入名字的md文件，文章标题默认就是创建时候写的。\n\n##  5. 生成部署\n\n```\nhexo g\n```\n\n输入命令之后，会生成静态页面，\n\n##  6. 提交\n\n```\nhexo d\n```\n\n输入命令，可以把生成的静态页，提交到自己的github主页上。\n\n\n","source":"_posts/hexo配置个人博客站点.md","raw":"---\ntitle: 快速搭建hexo个人博客站点\ndate: 2016-03-10 23:51:18\ntags: [ hexo,个人博客,技术分享 ]\n---\n\n##  1.  首先安装hexo命令行，\n\n```\nsudo npm install hexo-cli -g\n//安装之后输入下面命令验证是否安装成功\nhexo -v\n```\n\n##  2.  接着我们找一个我们打算把博客放在打文件夹中，打开终端\n\n```\n//输入下面命令，会自动部署博客框架\nhexo init [blog]\n//blog 就是我们防止博客文件的文件夹，可以不写，就会在打开终端打目录下直接创建\n//完成之后，进入blog文件夹安装依赖\nnpm install\n```\n\n##  3.  本地预览\n\n```\nhexo s\n```\n输入命令之后，看到下面这行提示之后，就可以再浏览器输入地址，预览配置好的页面。\n```\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n```\n\n<!-- more -->\n##  4.  创建新文章\n\n```\nhexo new 文章标题\n```\n\n输入命令之后，就可以再\\hexo\\source\\_posts\\路径下看到自己输入名字的md文件，文章标题默认就是创建时候写的。\n\n##  5. 生成部署\n\n```\nhexo g\n```\n\n输入命令之后，会生成静态页面，\n\n##  6. 提交\n\n```\nhexo d\n```\n\n输入命令，可以把生成的静态页，提交到自己的github主页上。\n\n\n","slug":"hexo配置个人博客站点","published":1,"updated":"2018-01-31T12:39:09.826Z","_id":"cjd30vwfx001q581ibi79zdpx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-首先安装hexo命令行，\"><a href=\"#1-首先安装hexo命令行，\" class=\"headerlink\" title=\"1.  首先安装hexo命令行，\"></a>1.  首先安装hexo命令行，</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo-cli -g</span><br><span class=\"line\">//安装之后输入下面命令验证是否安装成功</span><br><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-接着我们找一个我们打算把博客放在打文件夹中，打开终端\"><a href=\"#2-接着我们找一个我们打算把博客放在打文件夹中，打开终端\" class=\"headerlink\" title=\"2.  接着我们找一个我们打算把博客放在打文件夹中，打开终端\"></a>2.  接着我们找一个我们打算把博客放在打文件夹中，打开终端</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//输入下面命令，会自动部署博客框架</span><br><span class=\"line\">hexo init [blog]</span><br><span class=\"line\">//blog 就是我们防止博客文件的文件夹，可以不写，就会在打开终端打目录下直接创建</span><br><span class=\"line\">//完成之后，进入blog文件夹安装依赖</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-本地预览\"><a href=\"#3-本地预览\" class=\"headerlink\" title=\"3.  本地预览\"></a>3.  本地预览</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>输入命令之后，看到下面这行提示之后，就可以再浏览器输入地址，预览配置好的页面。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"4-创建新文章\"><a href=\"#4-创建新文章\" class=\"headerlink\" title=\"4.  创建新文章\"></a>4.  创建新文章</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new 文章标题</span><br></pre></td></tr></table></figure>\n<p>输入命令之后，就可以再\\hexo\\source_posts\\路径下看到自己输入名字的md文件，文章标题默认就是创建时候写的。</p>\n<h2 id=\"5-生成部署\"><a href=\"#5-生成部署\" class=\"headerlink\" title=\"5. 生成部署\"></a>5. 生成部署</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<p>输入命令之后，会生成静态页面，</p>\n<h2 id=\"6-提交\"><a href=\"#6-提交\" class=\"headerlink\" title=\"6. 提交\"></a>6. 提交</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>输入命令，可以把生成的静态页，提交到自己的github主页上。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-首先安装hexo命令行，\"><a href=\"#1-首先安装hexo命令行，\" class=\"headerlink\" title=\"1.  首先安装hexo命令行，\"></a>1.  首先安装hexo命令行，</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo-cli -g</span><br><span class=\"line\">//安装之后输入下面命令验证是否安装成功</span><br><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-接着我们找一个我们打算把博客放在打文件夹中，打开终端\"><a href=\"#2-接着我们找一个我们打算把博客放在打文件夹中，打开终端\" class=\"headerlink\" title=\"2.  接着我们找一个我们打算把博客放在打文件夹中，打开终端\"></a>2.  接着我们找一个我们打算把博客放在打文件夹中，打开终端</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//输入下面命令，会自动部署博客框架</span><br><span class=\"line\">hexo init [blog]</span><br><span class=\"line\">//blog 就是我们防止博客文件的文件夹，可以不写，就会在打开终端打目录下直接创建</span><br><span class=\"line\">//完成之后，进入blog文件夹安装依赖</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-本地预览\"><a href=\"#3-本地预览\" class=\"headerlink\" title=\"3.  本地预览\"></a>3.  本地预览</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>输入命令之后，看到下面这行提示之后，就可以再浏览器输入地址，预览配置好的页面。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p>","more":"<h2 id=\"4-创建新文章\"><a href=\"#4-创建新文章\" class=\"headerlink\" title=\"4.  创建新文章\"></a>4.  创建新文章</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new 文章标题</span><br></pre></td></tr></table></figure>\n<p>输入命令之后，就可以再\\hexo\\source_posts\\路径下看到自己输入名字的md文件，文章标题默认就是创建时候写的。</p>\n<h2 id=\"5-生成部署\"><a href=\"#5-生成部署\" class=\"headerlink\" title=\"5. 生成部署\"></a>5. 生成部署</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<p>输入命令之后，会生成静态页面，</p>\n<h2 id=\"6-提交\"><a href=\"#6-提交\" class=\"headerlink\" title=\"6. 提交\"></a>6. 提交</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>输入命令，可以把生成的静态页，提交到自己的github主页上。</p>"},{"title":"手动一步一步搭建ss","date":"2018-01-31T08:02:12.000Z","_content":" \n\n# 动手安装ss,教程\n\n##  安装具体步骤\n\n 我用的是Ubuntu系统，安装步骤非常简单，一步一步执行下面的命令就好\n\n```\nsudo apt-get update\n<!-- 如果服务器没有安装git，需要执行这一步 -->\nsudo apt-get install git\nsudo apt-get install python-pip\npip install git+https://github.com/shadowsocks/shadowsocks.git@master\n```\n\n<!-- more -->\n## 具体使用\n\n#### 直接使用\n\n\n```\nssserver -c /etc/shadowsocks.json\n```\n\n#### 后台使用\n\n```\nssserver -c /etc/shadowsocks.json -d start\nssserver -c /etc/shadowsocks.json -d stop\n```","source":"_posts/手动一步一步搭建ss.md","raw":"---\ntitle: 手动一步一步搭建ss\ntags: []\ndate: 2018-01-31 16:02:12\n---\n \n\n# 动手安装ss,教程\n\n##  安装具体步骤\n\n 我用的是Ubuntu系统，安装步骤非常简单，一步一步执行下面的命令就好\n\n```\nsudo apt-get update\n<!-- 如果服务器没有安装git，需要执行这一步 -->\nsudo apt-get install git\nsudo apt-get install python-pip\npip install git+https://github.com/shadowsocks/shadowsocks.git@master\n```\n\n<!-- more -->\n## 具体使用\n\n#### 直接使用\n\n\n```\nssserver -c /etc/shadowsocks.json\n```\n\n#### 后台使用\n\n```\nssserver -c /etc/shadowsocks.json -d start\nssserver -c /etc/shadowsocks.json -d stop\n```","slug":"手动一步一步搭建ss","published":1,"updated":"2018-01-31T12:42:33.003Z","_id":"cjd30vwg6001s581iuz49guaq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"动手安装ss-教程\"><a href=\"#动手安装ss-教程\" class=\"headerlink\" title=\"动手安装ss,教程\"></a>动手安装ss,教程</h1><h2 id=\"安装具体步骤\"><a href=\"#安装具体步骤\" class=\"headerlink\" title=\"安装具体步骤\"></a>安装具体步骤</h2><p> 我用的是Ubuntu系统，安装步骤非常简单，一步一步执行下面的命令就好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">&lt;!-- 如果服务器没有安装git，需要执行这一步 --&gt;</span><br><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\">sudo apt-get install python-pip</span><br><span class=\"line\">pip install git+https://github.com/shadowsocks/shadowsocks.git@master</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"具体使用\"><a href=\"#具体使用\" class=\"headerlink\" title=\"具体使用\"></a>具体使用</h2><h4 id=\"直接使用\"><a href=\"#直接使用\" class=\"headerlink\" title=\"直接使用\"></a>直接使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n<h4 id=\"后台使用\"><a href=\"#后台使用\" class=\"headerlink\" title=\"后台使用\"></a>后台使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"动手安装ss-教程\"><a href=\"#动手安装ss-教程\" class=\"headerlink\" title=\"动手安装ss,教程\"></a>动手安装ss,教程</h1><h2 id=\"安装具体步骤\"><a href=\"#安装具体步骤\" class=\"headerlink\" title=\"安装具体步骤\"></a>安装具体步骤</h2><p> 我用的是Ubuntu系统，安装步骤非常简单，一步一步执行下面的命令就好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">&lt;!-- 如果服务器没有安装git，需要执行这一步 --&gt;</span><br><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\">sudo apt-get install python-pip</span><br><span class=\"line\">pip install git+https://github.com/shadowsocks/shadowsocks.git@master</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"具体使用\"><a href=\"#具体使用\" class=\"headerlink\" title=\"具体使用\"></a>具体使用</h2><h4 id=\"直接使用\"><a href=\"#直接使用\" class=\"headerlink\" title=\"直接使用\"></a>直接使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n<h4 id=\"后台使用\"><a href=\"#后台使用\" class=\"headerlink\" title=\"后台使用\"></a>后台使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure>"},{"title":"数组方法梳理","date":"2016-11-26T00:55:03.000Z","_content":" \n\n![images/bg2.jpg](/images/bg2.jpg)\n\n>   由于发现对数组和字符串原生的方法有点记不太清了，所以打算梳理一下，把这写方法整理一下，加强自己的记忆。\n\n\n\n>   以下数组演示都以数组 数组arr=[1,2,3]为原始值；\n\n###   length \n-   返回数组的长度\n\n    ```javascript\n    arr.length;//返回值是3\n    ```\n      \n###   concat() \n-   连接两个或更多数组，并返回新数组，\n\n    ```javascript\n    arr.concat([8,9,0]);\n    //返回是数组[1,2,3,8,9,0]\n    //不会修改原数组\n    ```\n\n<!-- more -->\n###   join()  \n-   把数组的所有元素放进一个新的字符串，元素根据指定的字符串分割\n\n    ```javascript\n    arr.join(\"\");\n    //返回值是字符串123\n    ```\n\n###   pop()   \n-   删除并返回最后一个元素\n\n    ```javascript\n    arr.pop();\n    //从数组中删除最后一个元素\n    //返回值是删除的元素，\n    //原数组被更改\n    ```\n\n###   push()  \n-   向数组最后添加一个或多个元素，并返回添加之后数组的长度\n    ```javascript\n    arr.push(3);\n    //返回值是新数组长度\n    //原数组被更改\n    arr.push([1,2,3]);\n    //这样调用，会把传入的数组当作数组一个元素\n    arr.push(1,2,4);\n    //会把传入的值按照先后顺序放在数组的最后\n    ```\n\n###   reverse()   \n-   颠倒数组中元素的排序\n\n    ```javascript\n    arr.reverse();\n    //返回值和原数组都是反转之后的数组\n    ```\n\n###   shift() \n-   删除并返回数组的第一个元素\n\n    ```javascript\n    arr.shift();\n    //返回被删除的元素\n    //会修改原数组\n    ```\n\n###   unshift()   \n-   在数组最前添加一个或多个元素，返回新长度\n    ```javascript\n    arr.unshift([2,3,4]);\n    arr.unshift(2,4,4);\n    //如果传入多个元素，传入的第一个元素会在数组的索引0上，第二个会在1上，以此类推，\n    //简单理解，传入多个元素，直接把传入的内容直接放在最前边；\n    ```\n    \n###   slice() \n-   选取并返回数组中指定的元素\n\n    ```javascript\n    arr.slice(start,end);\n    //strat是开始索引值，end是结束索引值，不包含end索引的值\n    //如果索引值是负数，-1就是最后一个元素，以此类推\n    //如果没有第二个值，那么从start开始截取到数组结束\n    //不会修改原元素\n    ```\n\n###   sort()  \n-   对数组的元素进行排序,直接对原数组进行排序，返回值也是排序后的新数组,如果不传参数，则是按照元素首字母排序，如果需要按照指定的规则排序，需要传入指定的函数\n\n    ```javascript\n    arr.sort();\n    ```\n\n###   splice()    \n-   从数组中添加删除元素，返回被删除的元素\n\n    ```javascript\n    arr.splice(index,howmany,item1...itemx); \n    //index 添加或删除元素的索引位置\n    //howmany 要删除元素的个数，不删除可以设置为0\n    //item 要添加的元素\n    //返回值是删除的元素\n    ```\n\n###   toSource() \n-   返回对象的源代码,只有火狐支持\n\n###   toString()  \n-   把数组转换为字符串，并返回结果\n","source":"_posts/数组方法梳理.md","raw":"---------\ntitle: 数组方法梳理\ntags: [数组，js基础]\ndate: 2016-11-26 08:55:03\n---------\n \n\n![images/bg2.jpg](/images/bg2.jpg)\n\n>   由于发现对数组和字符串原生的方法有点记不太清了，所以打算梳理一下，把这写方法整理一下，加强自己的记忆。\n\n\n\n>   以下数组演示都以数组 数组arr=[1,2,3]为原始值；\n\n###   length \n-   返回数组的长度\n\n    ```javascript\n    arr.length;//返回值是3\n    ```\n      \n###   concat() \n-   连接两个或更多数组，并返回新数组，\n\n    ```javascript\n    arr.concat([8,9,0]);\n    //返回是数组[1,2,3,8,9,0]\n    //不会修改原数组\n    ```\n\n<!-- more -->\n###   join()  \n-   把数组的所有元素放进一个新的字符串，元素根据指定的字符串分割\n\n    ```javascript\n    arr.join(\"\");\n    //返回值是字符串123\n    ```\n\n###   pop()   \n-   删除并返回最后一个元素\n\n    ```javascript\n    arr.pop();\n    //从数组中删除最后一个元素\n    //返回值是删除的元素，\n    //原数组被更改\n    ```\n\n###   push()  \n-   向数组最后添加一个或多个元素，并返回添加之后数组的长度\n    ```javascript\n    arr.push(3);\n    //返回值是新数组长度\n    //原数组被更改\n    arr.push([1,2,3]);\n    //这样调用，会把传入的数组当作数组一个元素\n    arr.push(1,2,4);\n    //会把传入的值按照先后顺序放在数组的最后\n    ```\n\n###   reverse()   \n-   颠倒数组中元素的排序\n\n    ```javascript\n    arr.reverse();\n    //返回值和原数组都是反转之后的数组\n    ```\n\n###   shift() \n-   删除并返回数组的第一个元素\n\n    ```javascript\n    arr.shift();\n    //返回被删除的元素\n    //会修改原数组\n    ```\n\n###   unshift()   \n-   在数组最前添加一个或多个元素，返回新长度\n    ```javascript\n    arr.unshift([2,3,4]);\n    arr.unshift(2,4,4);\n    //如果传入多个元素，传入的第一个元素会在数组的索引0上，第二个会在1上，以此类推，\n    //简单理解，传入多个元素，直接把传入的内容直接放在最前边；\n    ```\n    \n###   slice() \n-   选取并返回数组中指定的元素\n\n    ```javascript\n    arr.slice(start,end);\n    //strat是开始索引值，end是结束索引值，不包含end索引的值\n    //如果索引值是负数，-1就是最后一个元素，以此类推\n    //如果没有第二个值，那么从start开始截取到数组结束\n    //不会修改原元素\n    ```\n\n###   sort()  \n-   对数组的元素进行排序,直接对原数组进行排序，返回值也是排序后的新数组,如果不传参数，则是按照元素首字母排序，如果需要按照指定的规则排序，需要传入指定的函数\n\n    ```javascript\n    arr.sort();\n    ```\n\n###   splice()    \n-   从数组中添加删除元素，返回被删除的元素\n\n    ```javascript\n    arr.splice(index,howmany,item1...itemx); \n    //index 添加或删除元素的索引位置\n    //howmany 要删除元素的个数，不删除可以设置为0\n    //item 要添加的元素\n    //返回值是删除的元素\n    ```\n\n###   toSource() \n-   返回对象的源代码,只有火狐支持\n\n###   toString()  \n-   把数组转换为字符串，并返回结果\n","slug":"数组方法梳理","published":1,"updated":"2018-01-31T12:42:33.014Z","_id":"cjd30vwgk001t581i9zrazkhy","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/bg2.jpg\" alt=\"images/bg2.jpg\"></p>\n<blockquote>\n<p>  由于发现对数组和字符串原生的方法有点记不太清了，所以打算梳理一下，把这写方法整理一下，加强自己的记忆。</p>\n<p>  以下数组演示都以数组 数组arr=[1,2,3]为原始值；</p>\n</blockquote>\n<h3 id=\"length\"><a href=\"#length\" class=\"headerlink\" title=\"length\"></a>length</h3><ul>\n<li><p>返回数组的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.length;<span class=\"comment\">//返回值是3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h3><ul>\n<li><p>连接两个或更多数组，并返回新数组，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.concat([<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"comment\">//返回是数组[1,2,3,8,9,0]</span></span><br><span class=\"line\"><span class=\"comment\">//不会修改原数组</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h3><ul>\n<li><p>把数组的所有元素放进一个新的字符串，元素根据指定的字符串分割</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.join(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//返回值是字符串123</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"pop()\"></a>pop()</h3><ul>\n<li><p>删除并返回最后一个元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.pop();</span><br><span class=\"line\"><span class=\"comment\">//从数组中删除最后一个元素</span></span><br><span class=\"line\"><span class=\"comment\">//返回值是删除的元素，</span></span><br><span class=\"line\"><span class=\"comment\">//原数组被更改</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push()\"></a>push()</h3><ul>\n<li>向数组最后添加一个或多个元素，并返回添加之后数组的长度<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.push(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//返回值是新数组长度</span></span><br><span class=\"line\"><span class=\"comment\">//原数组被更改</span></span><br><span class=\"line\">arr.push([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"comment\">//这样调用，会把传入的数组当作数组一个元素</span></span><br><span class=\"line\">arr.push(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">//会把传入的值按照先后顺序放在数组的最后</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse()\"></a>reverse()</h3><ul>\n<li><p>颠倒数组中元素的排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reverse();</span><br><span class=\"line\"><span class=\"comment\">//返回值和原数组都是反转之后的数组</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"shift()\"></a>shift()</h3><ul>\n<li><p>删除并返回数组的第一个元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.shift();</span><br><span class=\"line\"><span class=\"comment\">//返回被删除的元素</span></span><br><span class=\"line\"><span class=\"comment\">//会修改原数组</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h3><ul>\n<li>在数组最前添加一个或多个元素，返回新长度<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.unshift([<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]);</span><br><span class=\"line\">arr.unshift(<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">//如果传入多个元素，传入的第一个元素会在数组的索引0上，第二个会在1上，以此类推，</span></span><br><span class=\"line\"><span class=\"comment\">//简单理解，传入多个元素，直接把传入的内容直接放在最前边；</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h3><ul>\n<li><p>选取并返回数组中指定的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.slice(start,end);</span><br><span class=\"line\"><span class=\"comment\">//strat是开始索引值，end是结束索引值，不包含end索引的值</span></span><br><span class=\"line\"><span class=\"comment\">//如果索引值是负数，-1就是最后一个元素，以此类推</span></span><br><span class=\"line\"><span class=\"comment\">//如果没有第二个值，那么从start开始截取到数组结束</span></span><br><span class=\"line\"><span class=\"comment\">//不会修改原元素</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h3><ul>\n<li><p>对数组的元素进行排序,直接对原数组进行排序，返回值也是排序后的新数组,如果不传参数，则是按照元素首字母排序，如果需要按照指定的规则排序，需要传入指定的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.sort();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h3><ul>\n<li><p>从数组中添加删除元素，返回被删除的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.splice(index,howmany,item1...itemx); </span><br><span class=\"line\"><span class=\"comment\">//index 添加或删除元素的索引位置</span></span><br><span class=\"line\"><span class=\"comment\">//howmany 要删除元素的个数，不删除可以设置为0</span></span><br><span class=\"line\"><span class=\"comment\">//item 要添加的元素</span></span><br><span class=\"line\"><span class=\"comment\">//返回值是删除的元素</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"toSource\"><a href=\"#toSource\" class=\"headerlink\" title=\"toSource()\"></a>toSource()</h3><ul>\n<li>返回对象的源代码,只有火狐支持</li>\n</ul>\n<h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h3><ul>\n<li>把数组转换为字符串，并返回结果</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/bg2.jpg\" alt=\"images/bg2.jpg\"></p>\n<blockquote>\n<p>  由于发现对数组和字符串原生的方法有点记不太清了，所以打算梳理一下，把这写方法整理一下，加强自己的记忆。</p>\n<p>  以下数组演示都以数组 数组arr=[1,2,3]为原始值；</p>\n</blockquote>\n<h3 id=\"length\"><a href=\"#length\" class=\"headerlink\" title=\"length\"></a>length</h3><ul>\n<li><p>返回数组的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.length;<span class=\"comment\">//返回值是3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h3><ul>\n<li><p>连接两个或更多数组，并返回新数组，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.concat([<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"comment\">//返回是数组[1,2,3,8,9,0]</span></span><br><span class=\"line\"><span class=\"comment\">//不会修改原数组</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h3><ul>\n<li><p>把数组的所有元素放进一个新的字符串，元素根据指定的字符串分割</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.join(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//返回值是字符串123</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"pop()\"></a>pop()</h3><ul>\n<li><p>删除并返回最后一个元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.pop();</span><br><span class=\"line\"><span class=\"comment\">//从数组中删除最后一个元素</span></span><br><span class=\"line\"><span class=\"comment\">//返回值是删除的元素，</span></span><br><span class=\"line\"><span class=\"comment\">//原数组被更改</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push()\"></a>push()</h3><ul>\n<li>向数组最后添加一个或多个元素，并返回添加之后数组的长度<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.push(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//返回值是新数组长度</span></span><br><span class=\"line\"><span class=\"comment\">//原数组被更改</span></span><br><span class=\"line\">arr.push([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"comment\">//这样调用，会把传入的数组当作数组一个元素</span></span><br><span class=\"line\">arr.push(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">//会把传入的值按照先后顺序放在数组的最后</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse()\"></a>reverse()</h3><ul>\n<li><p>颠倒数组中元素的排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reverse();</span><br><span class=\"line\"><span class=\"comment\">//返回值和原数组都是反转之后的数组</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"shift()\"></a>shift()</h3><ul>\n<li><p>删除并返回数组的第一个元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.shift();</span><br><span class=\"line\"><span class=\"comment\">//返回被删除的元素</span></span><br><span class=\"line\"><span class=\"comment\">//会修改原数组</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h3><ul>\n<li>在数组最前添加一个或多个元素，返回新长度<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.unshift([<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]);</span><br><span class=\"line\">arr.unshift(<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">//如果传入多个元素，传入的第一个元素会在数组的索引0上，第二个会在1上，以此类推，</span></span><br><span class=\"line\"><span class=\"comment\">//简单理解，传入多个元素，直接把传入的内容直接放在最前边；</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h3><ul>\n<li><p>选取并返回数组中指定的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.slice(start,end);</span><br><span class=\"line\"><span class=\"comment\">//strat是开始索引值，end是结束索引值，不包含end索引的值</span></span><br><span class=\"line\"><span class=\"comment\">//如果索引值是负数，-1就是最后一个元素，以此类推</span></span><br><span class=\"line\"><span class=\"comment\">//如果没有第二个值，那么从start开始截取到数组结束</span></span><br><span class=\"line\"><span class=\"comment\">//不会修改原元素</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h3><ul>\n<li><p>对数组的元素进行排序,直接对原数组进行排序，返回值也是排序后的新数组,如果不传参数，则是按照元素首字母排序，如果需要按照指定的规则排序，需要传入指定的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.sort();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h3><ul>\n<li><p>从数组中添加删除元素，返回被删除的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.splice(index,howmany,item1...itemx); </span><br><span class=\"line\"><span class=\"comment\">//index 添加或删除元素的索引位置</span></span><br><span class=\"line\"><span class=\"comment\">//howmany 要删除元素的个数，不删除可以设置为0</span></span><br><span class=\"line\"><span class=\"comment\">//item 要添加的元素</span></span><br><span class=\"line\"><span class=\"comment\">//返回值是删除的元素</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"toSource\"><a href=\"#toSource\" class=\"headerlink\" title=\"toSource()\"></a>toSource()</h3><ul>\n<li>返回对象的源代码,只有火狐支持</li>\n</ul>\n<h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h3><ul>\n<li>把数组转换为字符串，并返回结果</li>\n</ul>"},{"title":"框架封装之Ajax","date":"2016-11-17T01:31:26.000Z","_content":" \n\n##\tajax请求步骤\n\n1.\t创建请求对象\n2.\t格式化数据\n3.\t与服务器建立连接\n4.\t监听请求状态\n5.\t发送请求\n\n##\t创建请求对象\n\n1.\t原生方法\n\t-\tw3c:XMLHttpRequest\n\t-\tIE：ActiveXObject\n\n\n##\t封装Ajax模块\n\n1.\t确定Ajax配置的默认值\n\t-\turl => \"\"\n\t-\ttype => \"get\"\n\t-\tdata => {}\n\t-\tsuccess => null\n\t-\tfail => null\n\t-\tasync => true\n\t-\tdataType => \"json\"\n\t-\tcontentType => \"application/x-www-form-ulencoded\"\n\n2.\tajax默认配置放在哪？\n\t-\t要用一个对象来存储上述Ajax配置信息，像jQuery一样，将其放到工厂函数上；\n\t放在工厂函数jq上\n\n<!-- more -->\n###\t改造extend方法\n\n1.\t如果只传入一个参数，给this扩展成员，\n2.\t或者传入两个以上，就是给第一个参数扩展成员，，\n\n##\t跨域\n1.\tjsonp跨域的一种方式，缺点：只能发送跨域get请求\n\n2.\t本质：利用script标签的src属性可以跨域的特性\n\n3.\t实现流程：\n\t-\t创建script标签，添加到head下\n\t-\t常见一个全局函数，用来处理服务器响应的数据\n\t-\t指定script标签src的属性值，同时将全局函数发送到服务区\n\t-\t要与后台人员沟通，将发送全局函数的参数名告诉后台人员\n\t-\t\t\n4.\t实现步骤：\n\t-\t常见请求对象，script标签\n\t-\t格式化数据\n\t-\t创建一个全局函数，将函数添加到data内，\n\t-\t监听请求的状态-》使用timeout来做请求状态的监听，如果在超过时间内，表示成功，否则就报超时，\n\t-\t发送请求，-》给script标签指定src属性值","source":"_posts/框架封装之Ajax.md","raw":"---\ntitle: 框架封装之Ajax\ntags: [框架封装，ajax]\ndate: 2016-11-17 09:31:26\n---\n \n\n##\tajax请求步骤\n\n1.\t创建请求对象\n2.\t格式化数据\n3.\t与服务器建立连接\n4.\t监听请求状态\n5.\t发送请求\n\n##\t创建请求对象\n\n1.\t原生方法\n\t-\tw3c:XMLHttpRequest\n\t-\tIE：ActiveXObject\n\n\n##\t封装Ajax模块\n\n1.\t确定Ajax配置的默认值\n\t-\turl => \"\"\n\t-\ttype => \"get\"\n\t-\tdata => {}\n\t-\tsuccess => null\n\t-\tfail => null\n\t-\tasync => true\n\t-\tdataType => \"json\"\n\t-\tcontentType => \"application/x-www-form-ulencoded\"\n\n2.\tajax默认配置放在哪？\n\t-\t要用一个对象来存储上述Ajax配置信息，像jQuery一样，将其放到工厂函数上；\n\t放在工厂函数jq上\n\n<!-- more -->\n###\t改造extend方法\n\n1.\t如果只传入一个参数，给this扩展成员，\n2.\t或者传入两个以上，就是给第一个参数扩展成员，，\n\n##\t跨域\n1.\tjsonp跨域的一种方式，缺点：只能发送跨域get请求\n\n2.\t本质：利用script标签的src属性可以跨域的特性\n\n3.\t实现流程：\n\t-\t创建script标签，添加到head下\n\t-\t常见一个全局函数，用来处理服务器响应的数据\n\t-\t指定script标签src的属性值，同时将全局函数发送到服务区\n\t-\t要与后台人员沟通，将发送全局函数的参数名告诉后台人员\n\t-\t\t\n4.\t实现步骤：\n\t-\t常见请求对象，script标签\n\t-\t格式化数据\n\t-\t创建一个全局函数，将函数添加到data内，\n\t-\t监听请求的状态-》使用timeout来做请求状态的监听，如果在超过时间内，表示成功，否则就报超时，\n\t-\t发送请求，-》给script标签指定src属性值","slug":"框架封装之Ajax","published":1,"updated":"2018-01-31T12:42:33.022Z","_id":"cjd30vwho001v581ix1v5ig0l","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"ajax请求步骤\"><a href=\"#ajax请求步骤\" class=\"headerlink\" title=\"ajax请求步骤\"></a>ajax请求步骤</h2><ol>\n<li>创建请求对象</li>\n<li>格式化数据</li>\n<li>与服务器建立连接</li>\n<li>监听请求状态</li>\n<li>发送请求</li>\n</ol>\n<h2 id=\"创建请求对象\"><a href=\"#创建请求对象\" class=\"headerlink\" title=\"创建请求对象\"></a>创建请求对象</h2><ol>\n<li>原生方法<ul>\n<li>w3c:XMLHttpRequest</li>\n<li>IE：ActiveXObject</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"封装Ajax模块\"><a href=\"#封装Ajax模块\" class=\"headerlink\" title=\"封装Ajax模块\"></a>封装Ajax模块</h2><ol>\n<li><p>确定Ajax配置的默认值</p>\n<ul>\n<li>url =&gt; “”</li>\n<li>type =&gt; “get”</li>\n<li>data =&gt; {}</li>\n<li>success =&gt; null</li>\n<li>fail =&gt; null</li>\n<li>async =&gt; true</li>\n<li>dataType =&gt; “json”</li>\n<li>contentType =&gt; “application/x-www-form-ulencoded”</li>\n</ul>\n</li>\n<li><p>ajax默认配置放在哪？</p>\n<ul>\n<li>要用一个对象来存储上述Ajax配置信息，像jQuery一样，将其放到工厂函数上；<br>放在工厂函数jq上</li>\n</ul>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h3 id=\"改造extend方法\"><a href=\"#改造extend方法\" class=\"headerlink\" title=\"改造extend方法\"></a>改造extend方法</h3><ol>\n<li>如果只传入一个参数，给this扩展成员，</li>\n<li>或者传入两个以上，就是给第一个参数扩展成员，，</li>\n</ol>\n<h2 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h2><ol>\n<li><p>jsonp跨域的一种方式，缺点：只能发送跨域get请求</p>\n</li>\n<li><p>本质：利用script标签的src属性可以跨域的特性</p>\n</li>\n<li><p>实现流程：</p>\n<ul>\n<li>创建script标签，添加到head下</li>\n<li>常见一个全局函数，用来处理服务器响应的数据</li>\n<li>指定script标签src的属性值，同时将全局函数发送到服务区</li>\n<li>要与后台人员沟通，将发送全局函数的参数名告诉后台人员</li>\n<li></li>\n</ul>\n</li>\n<li>实现步骤：<ul>\n<li>常见请求对象，script标签</li>\n<li>格式化数据</li>\n<li>创建一个全局函数，将函数添加到data内，</li>\n<li>监听请求的状态-》使用timeout来做请求状态的监听，如果在超过时间内，表示成功，否则就报超时，</li>\n<li>发送请求，-》给script标签指定src属性值</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"ajax请求步骤\"><a href=\"#ajax请求步骤\" class=\"headerlink\" title=\"ajax请求步骤\"></a>ajax请求步骤</h2><ol>\n<li>创建请求对象</li>\n<li>格式化数据</li>\n<li>与服务器建立连接</li>\n<li>监听请求状态</li>\n<li>发送请求</li>\n</ol>\n<h2 id=\"创建请求对象\"><a href=\"#创建请求对象\" class=\"headerlink\" title=\"创建请求对象\"></a>创建请求对象</h2><ol>\n<li>原生方法<ul>\n<li>w3c:XMLHttpRequest</li>\n<li>IE：ActiveXObject</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"封装Ajax模块\"><a href=\"#封装Ajax模块\" class=\"headerlink\" title=\"封装Ajax模块\"></a>封装Ajax模块</h2><ol>\n<li><p>确定Ajax配置的默认值</p>\n<ul>\n<li>url =&gt; “”</li>\n<li>type =&gt; “get”</li>\n<li>data =&gt; {}</li>\n<li>success =&gt; null</li>\n<li>fail =&gt; null</li>\n<li>async =&gt; true</li>\n<li>dataType =&gt; “json”</li>\n<li>contentType =&gt; “application/x-www-form-ulencoded”</li>\n</ul>\n</li>\n<li><p>ajax默认配置放在哪？</p>\n<ul>\n<li>要用一个对象来存储上述Ajax配置信息，像jQuery一样，将其放到工厂函数上；<br>放在工厂函数jq上</li>\n</ul>\n</li>\n</ol>","more":"<h3 id=\"改造extend方法\"><a href=\"#改造extend方法\" class=\"headerlink\" title=\"改造extend方法\"></a>改造extend方法</h3><ol>\n<li>如果只传入一个参数，给this扩展成员，</li>\n<li>或者传入两个以上，就是给第一个参数扩展成员，，</li>\n</ol>\n<h2 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h2><ol>\n<li><p>jsonp跨域的一种方式，缺点：只能发送跨域get请求</p>\n</li>\n<li><p>本质：利用script标签的src属性可以跨域的特性</p>\n</li>\n<li><p>实现流程：</p>\n<ul>\n<li>创建script标签，添加到head下</li>\n<li>常见一个全局函数，用来处理服务器响应的数据</li>\n<li>指定script标签src的属性值，同时将全局函数发送到服务区</li>\n<li>要与后台人员沟通，将发送全局函数的参数名告诉后台人员</li>\n<li></li>\n</ul>\n</li>\n<li>实现步骤：<ul>\n<li>常见请求对象，script标签</li>\n<li>格式化数据</li>\n<li>创建一个全局函数，将函数添加到data内，</li>\n<li>监听请求的状态-》使用timeout来做请求状态的监听，如果在超过时间内，表示成功，否则就报超时，</li>\n<li>发送请求，-》给script标签指定src属性值</li>\n</ul>\n</li>\n</ol>"},{"title":"jqeury框架封装练习3","date":"2016-11-18T03:23:09.000Z","_content":" \n\n##\tDOM操作模块\n\n###\tappendTO方法\n\n1.\t语法：实例对象.appendTo(target);\n\n2.\t功能：将调用者上的所有DOM元素，分别追加到目标元素上\n\n3.\ttarget参数类型：\n\t-\t选择器\n\t-\tDOM元素\n\t-\tDOM数组，伪数组\n\n-\t为了更方便处理不同的类型，在实现时，首先统一target的参数类型，方便发i吗逻辑的处理\n\n-\t将target统一成itcast的对象，参数一致，便于处理，同时由于是itcast对象，就可以直接调用each方法进行遍历元素\n\n4.\t实现思路\n\n-\t统一target类型，\n-\t遍历target，再遍历调用者\n-\t判断，当目标元素是不是第一个元素，如果是，不需要拷贝源节点，否则就要深拷贝源节点，\n-\t将上述得到的新节点，缓存起来到数组中，\n-\t再将新节点追加到dom元素中\n-\t将缓存的数组转换成itcast对象，作为appendTo的返回值，来实现链式编程。\n\n<!-- more -->\n###\tappend方法\n\n1.\t功能：\t将传入参数追加给调用者。\n\n2.\t思路：\n\t-\t将传入实参转换成itcast对象\n\t-\t用传入的实参调用appendTo方法，将this作为目标元素传入appendTo方法\n\t-\t实现链式编程\n\n","source":"_posts/框架封装练习3.md","raw":"---\ntitle: jqeury框架封装练习3\ntags: [原生框架,JavaScript]\ndate: 2016-11-18 11:23:09\n---\n \n\n##\tDOM操作模块\n\n###\tappendTO方法\n\n1.\t语法：实例对象.appendTo(target);\n\n2.\t功能：将调用者上的所有DOM元素，分别追加到目标元素上\n\n3.\ttarget参数类型：\n\t-\t选择器\n\t-\tDOM元素\n\t-\tDOM数组，伪数组\n\n-\t为了更方便处理不同的类型，在实现时，首先统一target的参数类型，方便发i吗逻辑的处理\n\n-\t将target统一成itcast的对象，参数一致，便于处理，同时由于是itcast对象，就可以直接调用each方法进行遍历元素\n\n4.\t实现思路\n\n-\t统一target类型，\n-\t遍历target，再遍历调用者\n-\t判断，当目标元素是不是第一个元素，如果是，不需要拷贝源节点，否则就要深拷贝源节点，\n-\t将上述得到的新节点，缓存起来到数组中，\n-\t再将新节点追加到dom元素中\n-\t将缓存的数组转换成itcast对象，作为appendTo的返回值，来实现链式编程。\n\n<!-- more -->\n###\tappend方法\n\n1.\t功能：\t将传入参数追加给调用者。\n\n2.\t思路：\n\t-\t将传入实参转换成itcast对象\n\t-\t用传入的实参调用appendTo方法，将this作为目标元素传入appendTo方法\n\t-\t实现链式编程\n\n","slug":"框架封装练习3","published":1,"updated":"2018-01-31T12:42:27.854Z","_id":"cjd30vwi3001x581i7vqbuh0h","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"DOM操作模块\"><a href=\"#DOM操作模块\" class=\"headerlink\" title=\"DOM操作模块\"></a>DOM操作模块</h2><h3 id=\"appendTO方法\"><a href=\"#appendTO方法\" class=\"headerlink\" title=\"appendTO方法\"></a>appendTO方法</h3><ol>\n<li><p>语法：实例对象.appendTo(target);</p>\n</li>\n<li><p>功能：将调用者上的所有DOM元素，分别追加到目标元素上</p>\n</li>\n<li><p>target参数类型：</p>\n<ul>\n<li>选择器</li>\n<li>DOM元素</li>\n<li>DOM数组，伪数组</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>为了更方便处理不同的类型，在实现时，首先统一target的参数类型，方便发i吗逻辑的处理</p>\n</li>\n<li><p>将target统一成itcast的对象，参数一致，便于处理，同时由于是itcast对象，就可以直接调用each方法进行遍历元素</p>\n</li>\n</ul>\n<ol>\n<li>实现思路</li>\n</ol>\n<ul>\n<li>统一target类型，</li>\n<li>遍历target，再遍历调用者</li>\n<li>判断，当目标元素是不是第一个元素，如果是，不需要拷贝源节点，否则就要深拷贝源节点，</li>\n<li>将上述得到的新节点，缓存起来到数组中，</li>\n<li>再将新节点追加到dom元素中</li>\n<li>将缓存的数组转换成itcast对象，作为appendTo的返回值，来实现链式编程。</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"append方法\"><a href=\"#append方法\" class=\"headerlink\" title=\"append方法\"></a>append方法</h3><ol>\n<li><p>功能：    将传入参数追加给调用者。</p>\n</li>\n<li><p>思路：</p>\n<ul>\n<li>将传入实参转换成itcast对象</li>\n<li>用传入的实参调用appendTo方法，将this作为目标元素传入appendTo方法</li>\n<li>实现链式编程</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"DOM操作模块\"><a href=\"#DOM操作模块\" class=\"headerlink\" title=\"DOM操作模块\"></a>DOM操作模块</h2><h3 id=\"appendTO方法\"><a href=\"#appendTO方法\" class=\"headerlink\" title=\"appendTO方法\"></a>appendTO方法</h3><ol>\n<li><p>语法：实例对象.appendTo(target);</p>\n</li>\n<li><p>功能：将调用者上的所有DOM元素，分别追加到目标元素上</p>\n</li>\n<li><p>target参数类型：</p>\n<ul>\n<li>选择器</li>\n<li>DOM元素</li>\n<li>DOM数组，伪数组</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>为了更方便处理不同的类型，在实现时，首先统一target的参数类型，方便发i吗逻辑的处理</p>\n</li>\n<li><p>将target统一成itcast的对象，参数一致，便于处理，同时由于是itcast对象，就可以直接调用each方法进行遍历元素</p>\n</li>\n</ul>\n<ol>\n<li>实现思路</li>\n</ol>\n<ul>\n<li>统一target类型，</li>\n<li>遍历target，再遍历调用者</li>\n<li>判断，当目标元素是不是第一个元素，如果是，不需要拷贝源节点，否则就要深拷贝源节点，</li>\n<li>将上述得到的新节点，缓存起来到数组中，</li>\n<li>再将新节点追加到dom元素中</li>\n<li>将缓存的数组转换成itcast对象，作为appendTo的返回值，来实现链式编程。</li>\n</ul>","more":"<h3 id=\"append方法\"><a href=\"#append方法\" class=\"headerlink\" title=\"append方法\"></a>append方法</h3><ol>\n<li><p>功能：    将传入参数追加给调用者。</p>\n</li>\n<li><p>思路：</p>\n<ul>\n<li>将传入实参转换成itcast对象</li>\n<li>用传入的实参调用appendTo方法，将this作为目标元素传入appendTo方法</li>\n<li>实现链式编程</li>\n</ul>\n</li>\n</ol>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjd30vvzs0002581ie4pdv1d7","tag_id":"cjd30vw1h0005581ic3sfbdey","_id":"cjd30vw4l000e581iefei0vxb"},{"post_id":"cjd30vvzs0002581ie4pdv1d7","tag_id":"cjd30vw370009581imnfl4vfh","_id":"cjd30vw4o000g581i7yo78rcr"},{"post_id":"cjd30vw4d000d581ixwlhol9a","tag_id":"cjd30vw1h0005581ic3sfbdey","_id":"cjd30vw57000j581igpy7ymdf"},{"post_id":"cjd30vw0i0004581iyead7qp5","tag_id":"cjd30vw1h0005581ic3sfbdey","_id":"cjd30vw7b000n581i1rcr96mh"},{"post_id":"cjd30vw0i0004581iyead7qp5","tag_id":"cjd30vw4t000h581iwxje88ou","_id":"cjd30vw7j000p581ieaxfhzl4"},{"post_id":"cjd30vw2r0007581ig4lo0w1i","tag_id":"cjd30vw6g000l581ivgfcw9q0","_id":"cjd30vw9d000v581iaiyj4cl6"},{"post_id":"cjd30vw2r0007581ig4lo0w1i","tag_id":"cjd30vw7k000q581itng6dkgw","_id":"cjd30vw9m000x581i4eoj6vwj"},{"post_id":"cjd30vw2z0008581iuhm0oaa9","tag_id":"cjd30vw95000u581i750q41n5","_id":"cjd30vwac0014581iq6uqw39w"},{"post_id":"cjd30vw2z0008581iuhm0oaa9","tag_id":"cjd30vw9s000z581i90sh5cul","_id":"cjd30vwak0016581izteihwe3"},{"post_id":"cjd30vw3a000a581ij8g70kpz","tag_id":"cjd30vwa50012581i8zlc3sca","_id":"cjd30vwcg0019581i7uz4yt5f"},{"post_id":"cjd30vw4m000f581iw2d0ijv2","tag_id":"cjd30vw7k000q581itng6dkgw","_id":"cjd30vwfb001k581itmsdkhes"},{"post_id":"cjd30vw4m000f581iw2d0ijv2","tag_id":"cjd30vwcs001b581iwx6pij95","_id":"cjd30vwfm001m581i736t7gqo"},{"post_id":"cjd30vw4m000f581iw2d0ijv2","tag_id":"cjd30vwe9001f581i32x98emx","_id":"cjd30vwft001p581iqe4awo9g"},{"post_id":"cjd30vw54000i581icxg3o8d0","tag_id":"cjd30vw7k000q581itng6dkgw","_id":"cjd30vwi0001w581im6k5e9yo"},{"post_id":"cjd30vw54000i581icxg3o8d0","tag_id":"cjd30vwfp001n581ixplw6otk","_id":"cjd30vwij001y581ia388y2f3"},{"post_id":"cjd30vw54000i581icxg3o8d0","tag_id":"cjd30vwe9001f581i32x98emx","_id":"cjd30vwil0020581iqs6neav6"},{"post_id":"cjd30vw5a000k581iafenr4n5","tag_id":"cjd30vwh3001u581i0x4g0ae8","_id":"cjd30vwin0021581indqwehso"},{"post_id":"cjd30vw6y000m581igv8l6o8d","tag_id":"cjd30vwik001z581ixnd2bcnj","_id":"cjd30vwji0023581itjq8se1i"},{"post_id":"cjd30vw7m000r581ik8so0ioq","tag_id":"cjd30vwio0022581i0aymv6dk","_id":"cjd30vwjm0027581i35agc1sg"},{"post_id":"cjd30vw7m000r581ik8so0ioq","tag_id":"cjd30vwji0024581i2xefv19b","_id":"cjd30vwjm0028581i0j8q00fd"},{"post_id":"cjd30vw7m000r581ik8so0ioq","tag_id":"cjd30vwjj0025581ivt738qdp","_id":"cjd30vwjs002a581iqpii808s"},{"post_id":"cjd30vw8y000s581ivzrvwnec","tag_id":"cjd30vwio0022581i0aymv6dk","_id":"cjd30vwk0002c581iebdw9i4t"},{"post_id":"cjd30vw8y000s581ivzrvwnec","tag_id":"cjd30vwjn0029581id15d7u2x","_id":"cjd30vwk1002d581idfa4lfik"},{"post_id":"cjd30vw91000t581ijwklqoh6","tag_id":"cjd30vwio0022581i0aymv6dk","_id":"cjd30vwkc002h581i9ki0wy0v"},{"post_id":"cjd30vw91000t581ijwklqoh6","tag_id":"cjd30vwk5002e581iusglppyr","_id":"cjd30vwkc002i581ih84aberk"},{"post_id":"cjd30vw91000t581ijwklqoh6","tag_id":"cjd30vwk6002f581i9w2n9twa","_id":"cjd30vwke002k581i429tefm9"},{"post_id":"cjd30vw9e000w581i3h20kcl3","tag_id":"cjd30vwio0022581i0aymv6dk","_id":"cjd30vwki002n581in9jc001k"},{"post_id":"cjd30vw9e000w581i3h20kcl3","tag_id":"cjd30vwji0024581i2xefv19b","_id":"cjd30vwki002o581ic1l18ixu"},{"post_id":"cjd30vw9e000w581i3h20kcl3","tag_id":"cjd30vwjj0025581ivt738qdp","_id":"cjd30vwkk002q581ixo77pj8i"},{"post_id":"cjd30vw9n000y581iwmkfdgu2","tag_id":"cjd30vwio0022581i0aymv6dk","_id":"cjd30vwks002t581i03mudig5"},{"post_id":"cjd30vw9n000y581iwmkfdgu2","tag_id":"cjd30vwkj002p581isgdovuod","_id":"cjd30vwkt002u581ic8aq7ag6"},{"post_id":"cjd30vw9n000y581iwmkfdgu2","tag_id":"cjd30vwjj0025581ivt738qdp","_id":"cjd30vwku002w581iuh40scsb"},{"post_id":"cjd30vw9s0010581iq3w12x5g","tag_id":"cjd30vwkm002s581i9j2d17p8","_id":"cjd30vwku002x581ilesipbv8"},{"post_id":"cjd30vw9y0011581iwim4slu9","tag_id":"cjd30vwkt002v581ime0cb216","_id":"cjd30vwl10031581i4x1ab5we"},{"post_id":"cjd30vw9y0011581iwim4slu9","tag_id":"cjd30vwkv002y581i1zqn9zdf","_id":"cjd30vwl10032581ikz8gw7mf"},{"post_id":"cjd30vw9y0011581iwim4slu9","tag_id":"cjd30vwkw002z581ittz1xdki","_id":"cjd30vwl60034581ilnnm62xe"},{"post_id":"cjd30vwa80013581iu01cqm8a","tag_id":"cjd30vwkx0030581i4hczp22j","_id":"cjd30vwl80035581ir52m1bqf"},{"post_id":"cjd30vwad0015581icy1hrqet","tag_id":"cjd30vwkt002v581ime0cb216","_id":"cjd30vwni0038581ilvwlwqxy"},{"post_id":"cjd30vwad0015581icy1hrqet","tag_id":"cjd30vwl90036581ix8fzn90s","_id":"cjd30vwnk0039581ink724s9h"},{"post_id":"cjd30vwat0018581i370yaext","tag_id":"cjd30vwma0037581iinr7rt8e","_id":"cjd30vwns003c581i0gbi1xcp"},{"post_id":"cjd30vwat0018581i370yaext","tag_id":"cjd30vwnk003a581iupvc10b0","_id":"cjd30vwns003d581in9nzftxk"},{"post_id":"cjd30vwcl001a581ig75b3jpj","tag_id":"cjd30vwma0037581iinr7rt8e","_id":"cjd30vwoq003g581ipkm8scm9"},{"post_id":"cjd30vwcl001a581ig75b3jpj","tag_id":"cjd30vwnk003a581iupvc10b0","_id":"cjd30vwow003h581iwlekss20"},{"post_id":"cjd30vwct001c581ixejil3w0","tag_id":"cjd30vwio0022581i0aymv6dk","_id":"cjd30vwq4003l581i622hhtnz"},{"post_id":"cjd30vwct001c581ixejil3w0","tag_id":"cjd30vwow003i581i5eqi1jmo","_id":"cjd30vwq5003m581iwv6wbokx"},{"post_id":"cjd30vwct001c581ixejil3w0","tag_id":"cjd30vwp7003j581i9qfuumy8","_id":"cjd30vwqk003o581i8rofoo02"},{"post_id":"cjd30vwcy001d581iw83yc7uo","tag_id":"cjd30vwp8003k581i6hlvz8ye","_id":"cjd30vwqp003s581i7snxftwz"},{"post_id":"cjd30vwcy001d581iw83yc7uo","tag_id":"cjd30vwqh003n581i0qdct54n","_id":"cjd30vwqp003t581i93e2hvt8"},{"post_id":"cjd30vwcy001d581iw83yc7uo","tag_id":"cjd30vwqm003p581i6bd7jry4","_id":"cjd30vwqq003v581i7ivdtj6l"},{"post_id":"cjd30vwcy001d581iw83yc7uo","tag_id":"cjd30vwqn003q581iqbsmw16k","_id":"cjd30vwqr003w581i23rbdzmc"},{"post_id":"cjd30vweh001g581iijnc0jth","tag_id":"cjd30vwqo003r581iu9t29p0u","_id":"cjd30vwqu003y581i1skp9adf"},{"post_id":"cjd30vwem001h581iuh75e5z2","tag_id":"cjd30vwp8003k581i6hlvz8ye","_id":"cjd30vwqw0040581i52azk9yd"},{"post_id":"cjd30vwem001h581iuh75e5z2","tag_id":"cjd30vwqr003x581i0ib4f2bh","_id":"cjd30vwqx0041581ibf7r69dy"},{"post_id":"cjd30vwf7001j581i9w46k0g6","tag_id":"cjd30vw7k000q581itng6dkgw","_id":"cjd30vwr00045581iv61a474c"},{"post_id":"cjd30vwf7001j581i9w46k0g6","tag_id":"cjd30vwqv003z581ir665mh3k","_id":"cjd30vwr60046581iu7drwq79"},{"post_id":"cjd30vwf7001j581i9w46k0g6","tag_id":"cjd30vwqx0042581in1ulmu1g","_id":"cjd30vwrd0048581ie4qspuka"},{"post_id":"cjd30vwf7001j581i9w46k0g6","tag_id":"cjd30vwqn003q581iqbsmw16k","_id":"cjd30vwre0049581ijt5yrgmz"},{"post_id":"cjd30vwfg001l581iae4otx24","tag_id":"cjd30vwqz0044581idbdp60b6","_id":"cjd30vwrh004b581ipolngbos"},{"post_id":"cjd30vwfg001l581iae4otx24","tag_id":"cjd30vwrc0047581i8215x1rm","_id":"cjd30vwri004c581i6hqabltq"},{"post_id":"cjd30vwfq001o581i0s6vcldm","tag_id":"cjd30vwrf004a581iki0vqf5c","_id":"cjd30vwro004f581ixqev5aep"},{"post_id":"cjd30vwfq001o581i0s6vcldm","tag_id":"cjd30vwqz0044581idbdp60b6","_id":"cjd30vwrp004g581i1eoae7z0"},{"post_id":"cjd30vwfx001q581ibi79zdpx","tag_id":"cjd30vwrk004e581ii4bc328l","_id":"cjd30vwrx004k581i2nm8346j"},{"post_id":"cjd30vwfx001q581ibi79zdpx","tag_id":"cjd30vwrq004h581i6gjjn9qe","_id":"cjd30vwry004l581i9fxoffio"},{"post_id":"cjd30vwfx001q581ibi79zdpx","tag_id":"cjd30vwrr004i581i7f725esc","_id":"cjd30vws0004n581ih3qrepwp"},{"post_id":"cjd30vwgk001t581i9zrazkhy","tag_id":"cjd30vwrs004j581i25c8oudt","_id":"cjd30vws0004o581ijj4ac6u7"},{"post_id":"cjd30vwho001v581ix1v5ig0l","tag_id":"cjd30vwrz004m581i35e8cf30","_id":"cjd30vwsf004q581i2snjrca1"},{"post_id":"cjd30vwi3001x581i7vqbuh0h","tag_id":"cjd30vws0004p581i91lruwgo","_id":"cjd30vwso004s581ilhkkdyee"},{"post_id":"cjd30vwi3001x581i7vqbuh0h","tag_id":"cjd30vwsl004r581i67ldq27m","_id":"cjd30vwso004t581iarpl0ufb"}],"Tag":[{"name":"ajax","_id":"cjd30vw1h0005581ic3sfbdey"},{"name":"基本功","_id":"cjd30vw370009581imnfl4vfh"},{"name":"http","_id":"cjd30vw4t000h581iwxje88ou"},{"name":"Angular","_id":"cjd30vw6g000l581ivgfcw9q0"},{"name":"JS","_id":"cjd30vw7k000q581itng6dkgw"},{"name":"MongoDB","_id":"cjd30vw95000u581i750q41n5"},{"name":"NodeJS","_id":"cjd30vw9s000z581i90sh5cul"},{"name":"ECMA","_id":"cjd30vwa50012581i8zlc3sca"},{"name":"canvas","_id":"cjd30vwcs001b581iwx6pij95"},{"name":"画布","_id":"cjd30vwe9001f581i32x98emx"},{"name":"Canvas","_id":"cjd30vwfp001n581ixplw6otk"},{"name":"centos","_id":"cjd30vwh3001u581i0x4g0ae8"},{"name":"css3","_id":"cjd30vwik001z581ixnd2bcnj"},{"name":"git","_id":"cjd30vwio0022581i0aymv6dk"},{"name":"版本控制","_id":"cjd30vwji0024581i2xefv19b"},{"name":"工具","_id":"cjd30vwjj0025581ivt738qdp"},{"name":"常用命令操作","_id":"cjd30vwjn0029581id15d7u2x"},{"name":"vi","_id":"cjd30vwk5002e581iusglppyr"},{"name":"vim","_id":"cjd30vwk6002f581i9w2n9twa"},{"name":"SSH","_id":"cjd30vwkj002p581isgdovuod"},{"name":"hexo ubuntu","_id":"cjd30vwkm002s581i9j2d17p8"},{"name":"markdown","_id":"cjd30vwkt002v581ime0cb216"},{"name":"转换，html","_id":"cjd30vwkv002y581i1zqn9zdf"},{"name":"i5ting_toc","_id":"cjd30vwkw002z581ittz1xdki"},{"name":"NodeJS express","_id":"cjd30vwkx0030581i4hczp22j"},{"name":"语法","_id":"cjd30vwl90036581ix8fzn90s"},{"name":"linux","_id":"cjd30vwma0037581iinr7rt8e"},{"name":"ubuntu","_id":"cjd30vwnk003a581iupvc10b0"},{"name":"shell","_id":"cjd30vwow003i581i5eqi1jmo"},{"name":"bash","_id":"cjd30vwp7003j581i9qfuumy8"},{"name":"js","_id":"cjd30vwp8003k581i6hlvz8ye"},{"name":"静态方法","_id":"cjd30vwqh003n581i0qdct54n"},{"name":"实例方法","_id":"cjd30vwqm003p581i6bd7jry4"},{"name":"函数","_id":"cjd30vwqn003q581iqbsmw16k"},{"name":"服务端渲染","_id":"cjd30vwqo003r581iu9t29p0u"},{"name":"原生js实现jq，原生框架封装","_id":"cjd30vwqr003x581i0ib4f2bh"},{"name":"原型","_id":"cjd30vwqv003z581ir665mh3k"},{"name":"原型链","_id":"cjd30vwqx0042581in1ulmu1g"},{"name":"原生框架封装","_id":"cjd30vwqz0044581idbdp60b6"},{"name":"js，jquery","_id":"cjd30vwrc0047581i8215x1rm"},{"name":"原生js实现jq","_id":"cjd30vwrf004a581iki0vqf5c"},{"name":"hexo","_id":"cjd30vwrk004e581ii4bc328l"},{"name":"个人博客","_id":"cjd30vwrq004h581i6gjjn9qe"},{"name":"技术分享","_id":"cjd30vwrr004i581i7f725esc"},{"name":"数组，js基础","_id":"cjd30vwrs004j581i25c8oudt"},{"name":"框架封装，ajax","_id":"cjd30vwrz004m581i35e8cf30"},{"name":"原生框架","_id":"cjd30vws0004p581i91lruwgo"},{"name":"JavaScript","_id":"cjd30vwsl004r581i67ldq27m"}]}}